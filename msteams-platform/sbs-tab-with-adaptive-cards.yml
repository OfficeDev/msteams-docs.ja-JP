### YamlMime:Tutorial
title: アダプティブ カードを使用してタブを作成する
metadata:
  title: アダプティブ カードを使用してタブを作成する
  description: このチュートリアルでは、アダプティブ カードをタブで設定する方法について説明します。Teams。
  audience: Developer
  level: Beginner
  ms.date: 12/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/auth-aad-sso.md
  nextTutorialTitle: タブ認証の詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 48c4ebb71f77aba204cb04f94df9374d7b201559
  ms.sourcegitcommit: c66da76fb766df6270095265e1da8c49a3afd195
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 02/07/2022
  ms.locfileid: "62435888"
items:
- durationInMinutes: 1
  content: >
    アダプティブ カード タブは、新しい方法でタブを作成する方法Teams。 IFrame に Web コンテンツを埋め込む代わりに、アダプティブ カードをタブにレンダリングできます。フロントエンドがアダプティブ カードでレンダリングされている間、バックエンドはボットによって駆動されます。 ボットは、要求を受け入れ、レンダリングされるアダプティブ カードで適切に応答する責任があります。


    デスクトップ、Web、モバイルでネイティブな関連するユーザー インターフェイス (UI) 構成要素を使用してタブを構築できます。


    この記事では、以下を理解するのに役立ちます。


    * アプリ マニフェストに対して行う必要がある変更。

    * アダプティブ カードを使用して、呼び出しアクティビティがタブで情報を要求および送信する方法を識別します。

    * タスク モジュールのワークフローに対する影響。


    このステップ バイ ステップ ガイドは、デスクトップとモバイルでアダプティブ カードを使用してタブを構築するのに役立ちます。 次の出力が表示されます。


    ![デスクトップ モバイルのスクリーンショット](~/assets/images/adaptive-cards/desktop-mobile-screenshot.png)
- title: 前提条件
  durationInMinutes: 1
  content: >
    次のツールをインストールし、開発環境をセットアップする必要があります。


    * Microsoft Teams (ゲスト アカウントではありません) を使用します。

    * [Visual Studio Code](https://code.visualstudio.com/)

    * [.NET Core SDK](https://dotnet.microsoft.com/download) バージョン 3.1

    * [ngrok](https://ngrok.com/) または [Tunnel Relay](https://github.com/OfficeDev/microsoft-teams-tunnelrelay)

    * [Microsoft 365アプリをインストール](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant)するための適切Teamsアクセス許可を持つ開発者アカウントまたはユーザー アカウントへのアクセスを許可します。
- title: ポータルでボット登録をMicrosoft Azureする
  durationInMinutes: 2
  content: "アダプティブ カード タブでは、Azure Bot Service がチーム内でタブを作成する必要があります。 Azure でボットを開発してホストするときに、ボットを Azure Bot Service に登録します。 次の操作を実行します。\n1. ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n1. Azure Bot Service にボットを登録する Azure Bot リソースを作成します。\n1. ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n1. ボットMicrosoft Teamsチャネルを追加して、ボットを展開Teamsします。\n1. 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\nngrok を使用して、ローカルで実行中の Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Azure Bot リソースを作成するには**\n\n1. ポータル[Microsoft Azure開きます](https://portal.azure.com/)。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックス **で Azure ボット** を検索します。\n1. [ **Azure Bot] を選択します**。\n\n    ![Azure Bot](~/assets/images/adaptive-cards/azure-bot.png)\n\n1. **[作成]** を選択します。\n1. [ボット ハンドル] フィールドにボット ハンドル **名を入力** します。\n1. ドロップダウン リスト **から [サブスクリプション** ] を選択します。\n1. ドロップダウン リスト **からリソース グループ** を選択します。\n    \n    新しいリソース グループを作成するには、[新しいリソース グループの **作成] を** 選択し、リソース名を入力し、[ **OK**] を選択し、[新しいリソース グループの場所] ドロップダウン リストから必要な場所 **を** 選択します。\n\n1. [Microsoft **アプリ ID のマルチ** テナント **としてアプリの種類****] を選択します**。\n\n    ![マルチ テナント](~/assets/images/adaptive-cards/multi-tenant.png)\n\n    > [!NOTE]\n    > [ **Microsoft App ID の作成** の種類] セクションで、[ **新しい Microsoft アプリ ID** の作成] が既に選択され、新しいボットが作成されます。 ボットを既に **登録している場合は**、[既存のアプリ登録を使用する] を選択することもできます。 [既存のアプリ ID] **フィールドに Microsoft App ID** を入力し、[既存のアプリパスワード] フィールドに値 **を入力** します。\n\n1. **[確認 + 作成]** を選びます。\n\n    ![Azure Bot の作成](~/assets/images/adaptive-cards/create-azure-bot.png)\n\n1. 検証に合格した場合は、[作成] を **選択します**。\n\n    ボット サービスをプロビジョニングするには、少し時間が必要です。\n\n    ![Azure Bot の検証](~/assets/images/adaptive-cards/validation-pane.png)\n\n1. [**リソースに移動**] を選びます。 ボットと関連リソースがリソース グループに一覧表示されます。\n\n    ![[リソースに移動]](~/assets/images/adaptive-cards/go-to-resource-card.png)\n\n    これで、Azure ボットが作成されます。\n\n    ![Azure ボット リソースの作成](~/assets/images/adaptive-cards/azure-bot-ui.png)\n\n**クライアント シークレットを作成するには**\n\n1. [構成 **設定** 構成] を **選択します**。 将来の **参照のために Microsoft App ID** (クライアント ID) を保存します。\n\n    ![Microsoft アプリ ID](~/assets/images/adaptive-cards/config-microsoft-app-id.png)\n\n    > [!NOTE]\n    > [ **ボットの種類] で [MultiTenant** ] が **選択されている必要があります**。\n\n1. **[Microsoft アプリ ID] の隣にある [** 管理] を **選択します**。\n\n    ![ボットの管理](~/assets/images/adaptive-cards/manage-bot-label.png)\n\n1. [クライアント シークレット **] セクションで、[** 新しいクライアント シークレット **] を選択します**。**[クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n    ![新しいクライアント シークレット](~/assets/images/adaptive-cards/new-client-secret.png)\n\n1. [説明 **] と入力し** 、[追加] を **選択します**。\n\n    ![クライアント シークレット](~/assets/images/adaptive-cards/client-secret.png)\n\n1. [値 **] 列で** 、[クリップボードに **コピー] を選択し** 、将来の参照のためにクライアント シークレット ID を保存します。\n\n    ![クライアント シークレット値](~/assets/images/adaptive-cards/client-secret-value.png)\n   \n**チャネルを追加Microsoft Teamsするには**\n\n1. [ホーム] に **移動します**。\n\n    ![ボットのホーム ページ](~/assets/images/adaptive-cards/bot-home-page.png)\n\n1. [最近使ったリソース] セクションに一覧表示されているボット **を開** きます。\n1. 左側 **のウィンドウで** [チャネル] を選択し、[チャネル] **をTeams** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n    ![チャネル Teams](~/assets/images/adaptive-cards/channel-teams.png)\n\n1. このチェック ボックスをオンにすると、利用規約に同意し、[同意する] を **選択します**。</br>\n\n    ![サービス条件の選択](~/assets/images/adaptive-cards/select-terms-of-service.png)\n\n1. **[保存]** を選択します。\n\n    ![[選択Teams](~/assets/images/adaptive-cards/select-teams.png)\n\n**メッセージング エンドポイントを追加するには**\n\n1. [ホーム] **ページに移動** し、左側の **ウィンドウから** **[** 設定構成] を選択します。\n1. ngrok に移動します。\n1. 次の図に示すように、HTTPS URL (https to io) をコピーします。\n\n    ![ngrok HTTPS URL](~/assets/images/adaptive-cards/ngrok-url.png)\n\n1. メッセージング **エンドポイントで、** ngrok から生成された HTTPS URL を追加し、URL の最後に **/api/messages を追加します**。\n\n    ![メッセージング エンドポイント](~/assets/images/adaptive-cards/ngrok-messaging-endpoint.png)\n\n1. **[適用]** を選択します。\n\n    Azure Bot Service でボットを正常にセットアップし、ボット サービス接続をセットアップする必要があります。\n"
- title: ボット サービス接続のセットアップ
  durationInMinutes: 5
  content: "ボット サービスでユーザーがサインインしてボットにアクセスするには、ボットの SSO を構成する必要があります。 これを行うには、次の手順を実行します。\n\n1. Azure ボット リソースへのリダイレクト URI の追加\n1. API エンドポイントを公開する\n1. クライアント アプリケーションの承認\n1. ダウンストリーム呼び出しに必要な API アクセス許可を追加する\n1. 暗黙的な付与を有効にする\n1. マニフェストの更新\n1. ボット サービス接続のセットアップ\n\n**Azure ボット リソースにリダイレクト URI を追加するには**\n\n1. [Microsoft **アプリ ID]** の横にある **[管理] を選択します**。\n\n    ![ボットの管理](~/assets/images/adaptive-cards/manage-bot-label.png)\n\n1. ボット **リソースの** 左側のウィンドウから [認証] を選択します。\n1. [ **プラットフォーム構成] で、[** プラットフォームの **追加] を選択します**。\n1. **[Web]** を選びます。\n1. [リダイレクト **URI] と入力し** 、[ **https://token.botframework.com/.auth/web/redirect** 構成] を **選択します**。\n\n    ![Web リダイレクト URL の構成](~/assets/images/adaptive-cards/configure-web-redirect-url.png)\n\n    リダイレクト URI が Azure ボット リソースに追加されます。\n\n    ![Web リダイレクト URL の表示](~/assets/images/adaptive-cards/web-redirect-url-display.png)\n\n**API エンドポイントを公開するには**\n\n1. 左側 **のウィンドウから [API を公開** する] を選択します。\n1. アプリケーション ID **URI の [** 設定] を選択します。\n1. **ngrok** **URL の** api:// 代わりに  api:// **https://** アプリケーション ID URL を使用し、アプリ ID URL の先頭に追加します。\n\n    ![アプリ ID URI](~/assets/images/adaptive-cards/app-id-url.png)\n\n1. **[保存]** を選択します。\n1. **[スコープの追加]** を選択します。\n1. [ **スコープ名] に**、「スコープ名 **」とaccess_as_user**。\n1. [**Who同意できますか?] で**、[管理者と **ユーザー] に切り替えます**。\n1. ボックスに次の値を入力します。\n\n    | フィールド | 値 |\n    | ----- | ----- |\n    | 管理者の同意表示名 | Teamsプロファイルにアクセスできる |\n    | 管理者の同意の説明 | アプリTeams Web API を現在のユーザーとして呼び出す権限を持つユーザーを許可します。 |\n    | ユーザーの同意表示名 | Teamsプロファイルにアクセスし、代理で要求を行うことができます |\n    | ユーザーの同意の説明 | ユーザー Teams同じ権限でこのアプリの API を呼び出す方法を有効にしてください。 |\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n    ![スコープを追加する](~/assets/images/adaptive-cards/add-scope.png)\n\n1. **[スコープの追加]** を選択します。 スコープ名は自動的にアプリケーション ID URI と一致し、 **/access_as_user** に追加されます。\n\n**クライアント アプリケーションを承認するには**\n\n次の ID を承認済みクライアント アプリケーションとして追加 **し**、[承認済みスコープ] のチェック ボックスをオンにして、[アプリケーション **の追加]** **を選択します**。      \n* 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams モバイルまたはデスクトップ アプリケーション)            \n* 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams Web アプリケーション)</br>\n\n    ![クライアント アプリケーションの追加](~/assets/images/adaptive-cards/add-client-aapplication.png)      \n\n**ダウンストリーム呼び出しに必要な API アクセス許可を追加するには**\n\n1. 左側 **のウィンドウから [API のアクセス** 許可] を選択します。\n1. [**アクセス許可を追加**] を選択します。 **[API アクセス許可の要求]** ウィンドウが表示されます。\n1. [ **Microsoft API の] を選択します**。 次に、[**Microsoft Graph**] を選択し、[**委任されたアクセス許可] を選択します**。\n1. アプリで必要 **なユーザーの委任されたアクセス** 許可を、ダウンストリーム API (User.Read など) に追加します。</br>\n\n    ![API アクセス許可](~/assets/images/adaptive-cards/add-permissions.png)\n\n**暗黙的な付与を有効にするには**\n\n1. 左側の **ウィンドウから** [認証] を選択します。\n1. [ **アクセス トークンと** **ID トークン] チェック ボックス** をオンにします。</br>\n\n    ![認証トークン](~/assets/images/adaptive-cards/authentication-tokens.png)\n\n1. [保存 **] を** 選択して変更を保存します。\n\n**マニフェストを更新するには**\n\n1. 左側 **のウィンドウから** [マニフェスト] を選択します。\n1. 構成項目が \" **accessTokenAcceptedVersion\": 2 に設定されている必要があります**。 指定しない場合は、その値を **2 に変更し、[** 保存] を **選択します**。\n    \n    > [!NOTE]\n    > ボットをテストしている場合は、このアプリTeamsサインアウトして、ボットをサインアウトするTeams。 次に、もう一度サインインして、この変更を表示します。\n\n    ![マニフェストの更新](~/assets/images/adaptive-cards/manifest.png)\n\n**Bot Service 接続を設定するには**\n\n1. [ホーム] **ページに移動** し、左側の **ウィンドウから** **[** 設定構成] を選択します。\n1. [**OAuth 接続の追加] を設定**。\n1. [ **新しい接続設定] で**、次の詳細を入力します。\n\n    | フィールド | 値または説明 |\n    | ----- | ----- |\n    | 名前 | 新しい接続設定の名前を入力します。 ボット サービス コードの設定で名前を使用できます。 |\n    | Service Provider | [**V2 Azure Active Directory選択します**。 |\n    | クライアント ID | 以前は Microsoft **App ID として保存されています**。 |\n    | クライアント シークレット | 以前はクライアント シークレット ID **の** 値として保存されています。 |\n    | トークンExchange URL | API エンドポイント **の公開中に** 以前に取得したアプリケーション ID URL を使用します。 |\n    | テナント ID | 共通と **入力します**。 |\n    | Scopes | **User.Read と入力** し、ダウンストリーム API  へのアクセス許可を指定する際に必要なすべてのスコープを追加します。 |\n\n    :::image type=\"content\" source=\"./assets/images/adaptive-cards/oauth-connection-setting.png\" alt-text=\"ボット サービス接続\":::\n\n1. **[保存]** を選択します。\n"
- title: ボットを構成する
  durationInMinutes: 1
  content: >
    ボット サンプルを構成して、会話型ボットを認証する方法を理解Microsoft Teams。


    **ボット サンプルを構成して実行するには**


    1. repo に移動します https://github.com/OfficeDev/Microsoft-Teams-Samples.git。

    1. [ **コード] を選択** し、ドロップダウンを選択します。

    1. [ZIP **のダウンロード] を選択します**。

        ![Repo ダウンロード](~/assets/images/adaptive-cards/repo-download.png)

    1. ダウンロードされるリポジトリのパスに注意してください。

    1. エクスプローラーで、[ファイル の選択] **Project**。

    1. **TabWithAdpativeCardFlow フォルダー Teams csharp >アダプティブ カード> Microsoft-Teams >-Samples >に移動** します。

    1. アプリで **appsettings.json** ファイルを開Visual Studio Code。

    1. ボットの **appsettings.json** `MicrosoftAppId`構成を更新して 、 を使用 `MicrosoftAppPassword`し、ngrok URI をとして追加します `ApplicationBaseUrl`。

    1. 接続名として OAuth 接続名を **使用します**。

        > [!NOTE]
        > ボットの [構成] `MicrosoftAppId` ページから取得できます。 これは `MicrosoftAppPassword` 、以前に保存したクライアント シークレット ID の値です。

        ![Appsettings Json](~/assets/images/adaptive-cards/appsettings-json.png)

    1. **[保存]** を選択します。
- title: アプリを構成し、アプリをアップロードTeams
  durationInMinutes: 2
  content: >
    ボットをテストする最も包括的な方法は、アプリ パッケージを作成し、アプリ パッケージをアプリ パッケージにアップロードTeams。 このメソッドは、すべてのスコープでボットで使用できる完全な機能をテストする唯一の方法です。 アプリを構成して実行するには、Teamsファイルを **アップロードmanifest.zipします**。


    **ファイルをアップロードTeamsしてアプリをmanifest.zipするには**


    1. エクスプローラーで、**Microsoft-Teams-Samples > サンプル > タブアダプティブ カード > csharp > TabWithAdpativeCardFlow > AppPackage** に移動して、フォルダーを開きます。

    1. マニフェスト.**json ファイルを開** きます。Visual Studio Code。

    1. **manifest.json ファイルで**{**contentBotId}** を見つけて、Microsoft App ID を追加して保存します。

        ![マニフェスト構成](~/assets/images/adaptive-cards/manifest-vsc.png)

    1. エクスプローラーで、 **AppPackage フォルダーに移動** します。

    1. **AppPackage** フォルダーの内容を圧縮して **、ファイルを** 作成manifest.zip。

        > [!NOTE]
        > この **manifest.zip** に追加のフォルダーを含めない必要があります。 マニフェスト json ソース **ファイル、** 色アイコン、およびアウトライン アイコンが  zip フォルダー内にある必要があります。

    1. [次へ] Teams。

    1. アプリをアップロード **manifest.zip**、[ストア] を選択>**カスタム** アプリ> アップロードアプリを管理し、アプリを **開manifest.zip。**

    1. [追加 **] を** 選択して、タブをチャットに追加します。

        ![アプリ内Teamsタブ](~/assets/images/adaptive-cards/tab-in-teams.png)

        サインインすると、このタブを操作できます。

    1. タブにメッセージを送信します。

        ![デスクトップ モバイルのスクリーンショット](~/assets/images/adaptive-cards/desktop-mobile-screenshot.png)
- title: '[タブ] ウィンドウでの操作Teams'
  durationInMinutes: 1
  content: "タブを使用すると、チャネル内またはチャット内の専用スペース内のサービスとコンテンツにアクセスできます。\n\n手順に従ってタブを使用します。\n\n1. 左側のウィンドウで、省略Teams ●●● を選択し、一覧からアプリを選択します。\n1. アクション コントロールを含むアダプティブ カードを表示するタブ。\n\n    ![アクション コントロール付きアダプティブ カードを表示するタブ](~/assets/images/adaptive-cards/adaptive-cards-tab-action-controls.png)\n\n1. [ **サインイン] を選択** し、タブにアクセスするアカウントを選択します。\n\n    ![サインイン](~/assets/images/adaptive-cards/sign-in-page.png)\n\n1. ホーム **ページで [タスク モジュールの** 表示] を選択します。\n\n    ![タスク モジュールの表示](~/assets/images/adaptive-cards/tab-home-page.png)\n\n1. Tab/fetch は、ユーザーがアダプティブ カード タブを開いた際にボットが受け取る最初の呼び出し要求です。ボットが要求を受信すると、タブ続行応答またはタブ認証応答が送信されます。\n\n    ![サンプル タスク モジュール](~/assets/images/adaptive-cards/sample-task-module.png)\n\n1. **アダプティブ カードの送信機能**\n   **task/submit** 要求は、アクションを介して対応するデータを使用してボットにトリガーされます。 \n\n    ![タスク送信カード](~/assets/images/adaptive-cards/task-submit.png)\n\n1. [サインアウト] を選択しない限り、Tab キーを押してサインイン **します**。\n\n    ![サインアウト](~/assets/images/adaptive-cards/sign-out.png)\n\n1. 再び **サインインするには、最新の情報に** 更新します。\n\n    ![成功サインアウト](~/assets/images/adaptive-cards/success-sign-out.png)\n"
- title: 完全なチャレンジ
  durationInMinutes: 1
  content: >
    このようなことを思い付い出しましたか?


    ![デスクトップ モバイルのスクリーンショット](~/assets/images/adaptive-cards/desktop-mobile-screenshot.png)
- content: ボット フレームワークを使用したアダプティブ カードの使用Microsoft Teams完了しました。
