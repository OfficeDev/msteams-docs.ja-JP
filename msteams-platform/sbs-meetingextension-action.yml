### YamlMime:Tutorial
title: アクション ベースのメッセージ拡張機能をビルドする
metadata:
  title: アクション ベースのメッセージ拡張機能をビルドする
  description: この学習モジュールでは、Teams のアクション メッセージ拡張機能を設定して、メッセージとメッセージの作成領域からアクションを開始する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 24/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/action-commands/define-action-command.md
  nextTutorialTitle: 詳細については、メッセージ拡張アクション コマンドを有効にする
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 33fb68574eb2a3f199fdbeef056b3d84dc95fd42
  ms.sourcegitcommit: 88fb2e9a18de3bd84e3c604ff235fc753c8de8f5
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/02/2022
  ms.locfileid: "68818320"
items:
- durationInMinutes: 1
  content: "Teams アクション ベースのメッセージ拡張機能を使用すると、ユーザーは Microsoft Teams クライアントで Web サービスと対話できます。 このメッセージ拡張機能は、メッセージの作成領域、コマンド ボックス、またはメッセージから直接、外部システムでアクションを開始するのに役立ちます。\n\n**アクション ベースのメッセージ拡張機能の主な機能:**\n\n* 情報を収集または表示するためのモーダル ポップアップをユーザーに表示します。\n* メッセージ作成領域、コマンド ボックス、またはメッセージからアクション コマンドをトリガーします。 \n\nこのステップ バイ ステップ ガイドは、Teams アクション ベースのメッセージ拡張機能を構築して、メッセージとメッセージの作成領域からアクションを開始するのに役立ちます。 このチュートリアルの終わりまでに、次の出力を実現できます。\n   \n:::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/sharemessageoutput1.png\" alt-text=\"出力。\":::\n"
- title: 前提条件
  durationInMinutes: 1
  content: >
    次のツールをインストールし、開発環境を設定していることを確認します。

     | &nbsp; | インストール | 使用するには... |
     | --- | --- | --- |
     | **必須** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべてのアプリを通じて作業するすべてのユーザーと 1 か所で共同作業を行います。|
     | &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.microsoft.com)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • ASP.NET と Web 開発 <br> • .NET Core クロスプラットフォーム開発 | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |
     | &nbsp; | [.NET Core SDK バージョン 3.1](https://dotnet.microsoft.com/en-us/download) | ローカル デバッグとAzure Functionsアプリのデプロイ用にカスタマイズされたバインド。 .NET 3.1 (以降) SDK をグローバルにインストールしていない場合は、移植可能なバージョンをインストールできます。 |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話型ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリには必要ありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |

      > [!NOTE]
      > ngrok をダウンロードしたら、サインアップして [authtoken を](https://ngrok.com/download)インストールします。
- title: ローカル環境を設定する
  durationInMinutes: 1
  content: "リポジトリをローカル GitHub に複製 `BotBuilder-Samples` します。  \n\n 1. [BotBuilder-Samples を](https://github.com/Microsoft/BotBuilder-Samples)開きます。\n 1. [ **コード] を選択します**。\n 1. ドロップダウン メニューから、[ **GitHub Desktop で開く**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-messagingextension-action/clonerepository_1.png\" alt-text=\"リポジトリを複製する\":::\n\n\n 1. [ **複製] を選択します**。 \n"
- title: Azure AD ポータルでボットを作成して登録する
  durationInMinutes: 5
  content: "Microsoft Azure Active Directory (Azure AD) でボットを作成して登録するには、次の手順に従います。\n\n* Azure Bot サービスにボットを登録する Azure Bot リソースを作成します。\n* クライアント シークレットを作成して、ボットのシングル サインオン (SSO) 認証を有効にします。\n* Azure アカウントでボット チャネル登録を作成します。\n* Teams チャネルを追加して、ボットを Teams チャネルにデプロイします。\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Microsoft Azure portal](https://portal.azure.com/)に移動します。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに「 **Azure Bot**」と入力します。\n1. **Enter** キーを押します。\n1. [ **Azure Bot**] を選択します。\n1. **[作成]** を選択します。\n\n     :::image type=\"content\" source=\"./assets/images/azure-bot_1.png\" alt-text=\"Azure ボット。\":::\n\n**[Azure Bot の作成** ] ウィンドウが表示されます。\n\n1. [Bot handle]\\(ボット ハンドル\\) に必要な **ボット ハンドル** 名を入力します。\n1. それぞれのドロップダウン リストから **[サブスクリプション]** と [ **リソース] グループ** を選択します。\n    \n     :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/create-azurebot_1.png\" alt-text=\"リソース Azure ボットを選択します。\":::\n\n   新しいリソース グループを作成できます。 [ **新規作成]** を選択>リソース名を入力> **[OK] を選択します**。 [ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n    \n    :::image type=\"content\" source=\"~/assets/images/bots/newresource.png\" alt-text=\"新しいリソース グループの場所を示すスクリーンショット。\":::\n   \n1. [**マルチテナント**] として [**アプリの種類]** を選択します。\n\n1. [ **Microsoft アプリ ID** ] セクションで、既定で [ **新しい Microsoft アプリ ID の作成** ] が選択されています。 \n\n   [ **既存のアプリの登録を使用する** ] を選択し、 **アプリ ID**、 **アプリ テナント ID**、 **MSI リソース ID を** 入力できます。\n\n   > [!NOTE]\n   > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n1. **[確認 + 作成]** を選びます。\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-messagingextension-action/register-bot-2_1.png\" alt-text=\"Microsoft アプリ ID の作成を示すスクリーンショット。\":::\n\n1. 検証に合格した場合は、[作成] を選択 **します**。\n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。 \n\n1. [**リソースに移動**] を選びます。 \n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/created-azure-bot_1.png\" alt-text=\"作成された Azure ボット リソース。\":::\n\n   Azure ボットが作成され、Azure ボットに **リソース グループ** と **サブスクリプション ID が** 表示されます。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/created-azure-bot_2.png\" alt-text=\"Azure ボット リソースが作成されました2。\":::\n\n**クライアント シークレットを作成するには**\n\n  新しい **Microsoft アプリ ID** を作成した場合は、次の手順を実行します。\n\n1. 左側のウィンドウで、[構成] を選択 **します**。 \n\n   > [!TIP]\n   > 今後参照するために **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **[Microsoft アプリ ID] の** 横にある [管理] を選択 **します**。\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-messagingextension-action/manage-bot-label.png\" alt-text=\"管理\":::\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 \n\n   :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/newclientsecret_1.png\" alt-text=\"新しいクライアント シークレットの選択を示すスクリーンショット。\":::\n\n   **[クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n1. クライアント シークレットに **「Description」と** 入力します。\n\n1. **[追加]** を選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/add-a-clientsecret_1.png\" alt-text=\"クライアント シークレットをアプリに追加します。\":::\n\n1. [ **クリップボードにコピー] を** 選択して **、値** の詳細をコピーします。\n\n     :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/client-secret_1.png\" alt-text=\"クライアント シークレットの値。\":::\n\n   \n   > [!TIP]\n   > 後で参照するために、クライアント シークレット **の値** またはアプリ パスワードを保存します。\n\n**Teams チャネルを追加するには**\n\n1. [**ホーム**] を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/select-home_1.png\" alt-text=\"ホーム ページ\":::\n\n1. [ **最近使ったリソース**] からボットを選択します。\n\n1. 左側のウィンドウで [**チャネル**] を選択し、[**Microsoft Teams**] を選択します <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/teams 1.png\" alt-text=\"[Teams] を選択します。\":::\n\n1. チェックボックスをオンにして **、利用規約** に同意します。\n\n1. [ **同意する] を選択します**。\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-messagingextension-action/terms.png\" alt-text=\"サービス利用規約\":::\n\n1. **[適用]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-link-unfurling/apply.png\" alt-text=\"Teams の選択を示すスクリーンショット。\":::\n\n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n ```bash\n ngrok http --host-header=localhost 3978\n ```\n\n> [!TIP]\n> **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに記載されている手順に従って、ngrok のサインアップと認証を行います。 `ngrok http --host-header=localhost 3978` コマンドを実行します。\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から、HTTPS URL (https から io) をコピーします。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-messagingextension-action/ngrok-url.png\" alt-text=\"ngrok HTTPS URL\":::\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、 を含 `https://`まないドメイン名です。\n\n1. **[構成設定]** で、**[追加]** を選択します。\n\n1. **メッセージング エンドポイント** で、ngrok から HTTPS URL を追加し、URL の末尾に **/api/messages** を追加します。\n\n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/appuri_1.png\" alt-text=\"アプリ URI。\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot サービスでボットを正常に設定しました。\n"
- title: Azure AD アプリの登録を更新する
  durationInMinutes: 1
  content: "1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **Azure Active Directory** を選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/AAD_1.png\" alt-text=\"Azure Directory。\":::\n\n1. 左側のナビゲーション ウィンドウで、[**アプリの登録**] を選択します。\n\n1. ボットを選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/app-registerations_2.png\" alt-text=\"アプリの登録。\":::\n\n1. [**管理**] で [**API の公開**] を選択します。\n\n1. [ **設定] を選択します**。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/set-exposeanapi_2.png\" alt-text=\"API を公開します。\":::\n\n1. **アプリケーション ID URI を** の形式`api://*******.ngrok.io/{AppID}`で設定します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/set-link_1.png\" alt-text=\"リンクを設定します。\":::\n\n   次の図は、ドメイン名を示しています。\n    \n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/exposeanapi_1.png\" alt-text=\"公開。\":::\n\n    > [!NOTE]\n    > ngrok などのトンネリング サービスを使用している場合は、ngrok サブドメインが変更されるたびに値を更新してください。\n    > たとえば、 `api://*******.ngrok.io/00000000-000-0000-0000-000000000``********.ngrok.io` は新しい ngrok サブドメイン名です。\n\n1. **[スコープの追加]** を選択します。 \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/Teams-link-unfurling/selectscope_1.png\" alt-text=\"[スコープの追加]\":::\n\n   **[スコープの追加]** ウィンドウが表示されます。\n\n1. スコープを構成するには、次の詳細を入力します。\n\n     * **スコープ名** として「」と入力`access_as_user`します。\n\n     * [ **同意できるユーザー]** を に `Admins and users`設定します。\n\n1. スコープの適切な値 `access_as_user` を使用して管理者とユーザーの同意プロンプトを構成するには、フィールドに次の情報を指定します。</br>\n\n     * **同意の表示名管理** 入力`Teams can access the user’s profile`します。\n\n     * **同意の説明として「管理**」と入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n     * **[ユーザーの同意] 表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n     * **[ユーザーの同意の説明]** として入力`Enable Teams to call this app’s APIs with the same rights as the user`します。\n\n1. [ **状態]** を **[有効]** に設定します。\n\n1. [ **スコープの追加]** を選択して保存します。\n\n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/addascopeuser_1.png\" alt-text=\"スコープを追加します。\":::\n\n    > [!NOTE]\n    > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。</br>\n       `api://*******.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/scopes_1.png\" alt-text=\"スコープ。\"::: \n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。 \n\n1. **[クライアント アプリケーションの追加]** を選択します。 \n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/meetings-side-panel/selectclientapp_1.png\" alt-text=\"クライアント アプリケーションの選択を示すスクリーンショット。\":::\n\n1. 「 **クライアント ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application」と入力します。 \n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/meetings-side-panel/addclientapplication1.png\" alt-text=\"クライアント アプリケーションの追加を示すスクリーンショット\":::\n\n   「 **クライアント ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams Web アプリケーション」と入力できます。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/meetings-side-panel/addclientapplication2.png\" alt-text=\"クライアント ID の追加のスクリーンショット。\":::\n\n1. [ **承認されたスコープ] を選択します**。\n\n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/authorizedscope_1.png\" alt-text=\"クライアント アプリケーション 2 を追加します。\":::\n\n   次の図は、クライアント ID を表示します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/meetings-side-panel/clientapps.png\" alt-text=\"クライアント アプリを示すスクリーンショット。\"::: \n\n1. 左側のウィンドウで、[ **API アクセス許可**] を選択します。 \n\n   > [!NOTE]\n   > ユーザーは、Azure AD アプリが別のテナントに登録されている場合にのみ、これらのアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n1. **[Microsoft Graph]** を選択します。 \n\n    :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/add-permission_2.png\" alt-text=\"アクセス許可を追加します。\" lightbox= \"./assets/images/sbs-messagingextension-action/add-permission_2.png\":::\n\n1. [**委任されたアクセス許可**] を選択します。 \n\n1. 次の API アクセス許可を追加します。</br>\n     * **email**\n     * **offline_access**\n     * **Openid**\n     * **profile**\n     * **User.Read**\n\n1. **[アクセス許可の追加]** を選択します。\n\n     :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/other-permissions.png\" alt-text=\"その他のアクセス許可。\":::\n\n1. 左側のウィンドウで、[ **認証** ] を選択してリダイレクト URI を設定します。 \n\n   > [!NOTE]\n   > アプリに IT 管理者の同意が付与されていない場合、ユーザーはアプリを初めて使用する際に同意する必要があります。\n           \n     1. **[プラットフォームの追加]** を選択します。\n     1. **[Web]** を選びます。\n\n        :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/web_1.png\" alt-text=\"Web。\" lightbox=\"./assets/images/sbs-messagingextension-action/web_1.png\":::\n\n     1. ドメイン名に追加`auth-end`して、アプリの **リダイレクト URI を** 入力します。</br> \n       `https://*******.ngrok.io/auth-end`. </br>\n\n     1. 次のチェック ボックスをオンにして、 **暗黙的な許可フローとハイブリッド フロー** を有効にします。\n         * **アクセス トークン (暗黙的フローに使用)**\n         * **ID トークン (暗黙的フローとハイブリッド フローに使用)**\n\n     1. **[構成]** を選択します。\n\n        :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/authend_1.png\" alt-text=\"認証の終了。\":::\n"
- title: アプリ設定とマニフェスト ファイルを設定する
  durationInMinutes: 1
  content: "1. 複製されたリポジトリの **appsettings.json** に移動します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/appsettingslocation_1.png\" alt-text=\"場所。\":::\n\n1. 最新バージョンの Visual Studio で **appsettings.json** を開き、次の情報を更新します。  \n\n     * をマルチテナントに置き換えます `\"MicrosoftAppType\"` 。\n     * をボットの Microsoft アプリ ID に置き換えます `\"MicrosoftAppId\"` 。\n     * を、ボットのクライアント シークレット ID の値に置き換えます `\"MicrosoftAppPassword\"` 。\n     * マルチテナント ボットの場合は空白に置き換えます `\"MicrosoftAppTenantId\"` 。\n     * を ngrok ドメイン名に置き換えます `\"BaseUrl\"` 。\n\n     :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/json-file_1.png\" alt-text=\"Json ファイル。\":::\n\n1. 複製されたリポジトリの **manifest.json** に移動します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/manifest location.png\" alt-text=\"マニフェストの場所。\":::\n\n1. 最新バージョンの Visual Studio で **manifest.json** を開き、次の変更を行います。\n\n     * を `<<validDomains>>` ngrok ドメイン名に置き換えます。\n     * のすべての出現箇所を `<<Microsoft-App-ID>>` ボットの **Microsoft アプリ ID に** 置き換えます。\n\n     :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/manifest_1.png\" alt-text=\"マニフェスト ファイル。\" lightbox=\"./assets/images/sbs-messagingextension-action/manifest_1.png\" :::\n"
- title: サービスをビルドして実行する
  durationInMinutes: 1
  content: "**最新バージョンの Visual Studio またはコマンド ラインを使用してサービスをビルドして実行するには**\n\n# <a name=\"latest-version-of-visual-studio\"></a>[Visual Studio の最新バージョン](#tab/latestversionofvisualstudio)\n\n   1. 最新バージョンの Visual Studio を起動します。\n   1. [**ファイル]**[**プロジェクト/ソリューション****を** > 開く]  >  を選択します。\n\n      :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/VSopenfile_1.png\" alt-text=\"ファイルを開きます。\":::\n\n   1. フォルダーから **TeamsMessagingExtensionsAction.csproj** ファイル **csharp_dotnet** 選択します。\n\n      :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/openproject_1.png\" alt-text=\"プロジェクトを開きます。\":::\n\n   1. **F5** キーを押してプロジェクトを実行します。\n\n   1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n      :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/certificate_1.png\" alt-text=\"証明 書。\":::\n\n      Web ページに、ボットの **準備ができました!** というメッセージが表示されます。\n\n      :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/appisready.png\" alt-text=\"アプリの準備完了。\"::: \n\n    \n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nコマンド プロンプト ウィンドウ **> csharp_dotnetcore > 51.teams-messaging-extensions-action のサンプル** に移動し、次のコマンドを入力します。\n\n```bash\ndotnet run\n```\n\n![Dotnet](~/assets/images/sbs-messagingextension-action/dotnetruncmd.png)\n  \n"
- title: アクション メッセージ拡張機能アプリを Teams に追加する
  durationInMinutes: 1
  content: "1. 複製したリポジトリで、 **teamsAppManifest > 51.teams-messaging-extensions-action csharp_dotnetcore >** に移動します。\n\n1. **Manifest** フォルダーに次のファイルを含む.zipを作成します。\n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n1. **Microsoft Teams** に移動します。\n\n1. [**アプリ]** > **[アプリの管理] [アプリ** >  > **のアップロード****] [カスタム アプリのアップロード] の順に選択します**。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-messagingextension-action/uploadapp_1.png\" alt-text=\"Zip ファイル\":::\n\n1. [ **開く** ] を選択して、 **Manifest** フォルダーに作成した.zip ファイルをアップロードします。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/openzipfile_1.png\" alt-text=\"zip を選択します。\":::\n\n1. **[追加]** を選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/add_1.png\" alt-text=\"アプリを追加します。\":::\n\n                \n"
- title: Teams でアプリを操作する
  durationInMinutes: 1
  content: "1. 新規作成ボックスのコマンド 一覧から [ **カードの作成** ] コマンドを選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/create-card_1.png\" alt-text=\"カードを作成します。\":::\n\n1. モーダル ポップアップにカード情報を入力します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/output-card.png\" alt-text=\"情報。\":::\n\n1. **[送信]** を選択します。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/submit.png\" alt-text=\"情報カード。\":::\n\n1. カードを右クリックします。\n   \n1. [**その他のアクション]**[**メッセージの共有] の順に選択します** > 。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/sharemessage.png\" alt-text=\"共有カード。\":::\n\n1. チェック ボックスをオンにして画像を含め、[送信] を選択 **します**。\n\n   :::image type=\"content\" source=\"./assets/images/sbs-messagingextension-action/sharemessageoutput.png\" alt-text=\"出力を送信します。\":::\n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    あなたはこのような出力を思いついたのですか?

       :::image type="content" source="./assets/images/sbs-messagingextension-action/sharemessageoutput1.png" alt-text="出力。":::
- content: '**アクション メッセージ拡張機能** アプリの使用を開始するためのチュートリアルを完了しました。'
