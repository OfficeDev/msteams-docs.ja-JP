### YamlMime:Tutorial
title: Microsoft Teams からタスク モジュールを呼び出す
metadata:
  title: Microsoft Teams からタスク モジュールを呼び出す
  description: この学習モジュールでは、アダプティブ カードまたは Bot Framework カードを使用して Teams タスク モジュールを設定する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 23/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: task-modules-and-cards/task-modules/task-modules-bots.md
  nextTutorialTitle: ボットからのタスク モジュールの詳細
  ms.custom: mvc
  ms.localizationpriority: High
  ms.openlocfilehash: 021dd5a5dc61ba57b5293f7763cc187226994f04
  ms.sourcegitcommit: 0e4fcbc5efff4bfa1dbfba1e5467bbfaa6638705
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 10/28/2022
  ms.locfileid: "68773553"
items:
- durationInMinutes: 1
  content: >
    アダプティブ カードまたは Bot Framework カードを使用して、Teams ボットからタスク モジュールを呼び出すことができます。


    **タスク モジュールの主な機能:**


    * 複数の手順を回避することで、ユーザー エクスペリエンスを強化します。

    * ユーザーがボットの状態を追跡するのに役立ちます。

    * ユーザーから入力を取得し、カスタム Web ページ コンテンツを表示します。


    このステップ バイ ステップ ガイドは、Teams タスク モジュールを呼び出すサンプル Azure ボットを作成するのに役立ちます。 次の出力が表示されます。

     :::image type="content" source="./assets/images/Teams-task-module/final_image.png" alt-text="タスク モジュール":::
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境をセットアップしてください。 \n\n | &nbsp; | インストール | 使用するには... |\n | --- | --- | --- |\n | **必須** | &nbsp; | &nbsp; |\n | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべてのアプリを通じて作業するすべてのユーザーと 1 か所で共同作業を行います。|\n | &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.microsoft.com)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • ASP.NET と Web 開発 <br> • .NET Core クロスプラットフォーム開発 | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |\n | &nbsp; | [.NET Core SDK バージョン 3.1](https://dotnet.microsoft.com/en-us/download) | ローカル デバッグとAzure Functionsアプリのデプロイ用にカスタマイズされたバインド。 .NET 3.1 (以降) SDK をグローバルにインストールしていない場合は、移植可能なバージョンをインストールできます。 |\n | &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話型ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリには必要ありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken を](https://ngrok.com/download)インストールします。\n"
- title: ローカル環境を設定する
  durationInMinutes: 1
  content: "リポジトリをローカル GitHub に複製 `BotBuilder-Samples` します。  \n\n 1. [BotBuilder サンプルを](https://github.com/microsoft/BotBuilder-Samples)開きます。\n 1. [ **コード] を選択します**。\n 1. ドロップダウン メニューから [ **GitHub Desktop で開く** ] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/clonerepository_2.png\" alt-text=\"リポジトリを複製する\":::\n\n 1. [ **複製] を選択します**。 \n"
- title: Azure AD ポータルでボットを作成して登録する
  durationInMinutes: 5
  content: "Microsoft Azure Active Directory (Azure AD) でボットを作成して登録するには、次の手順に従います。\n\n* Azure Bot リソースを作成して、ボットを Azure Bot Serviceに登録します。\n* クライアント シークレット ID と値の詳細を作成して、ボットのシングル サインオン (SSO) 認証を有効にします。\n* Teams チャネルを追加して、ボットを Teams チャネルにデプロイします。\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Microsoft Azure portal](https://portal.azure.com/)に移動します。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに「 **Azure Bot**」と入力します。\n1. **Enter** キーを押します。\n1. [ **Azure Bot**] を選択します。\n\n     :::image type=\"content\" source=\"./assets/images/Teams-task-module/azure-bot_1.png\" alt-text=\"Azure ボット。\":::\n\n1. **[作成]** を選択します。\n1. [Bot handle]\\(ボット ハンドル\\) に必要な **ボット ハンドル** 名を入力します。\n1. ドロップダウン リストから **サブスクリプション** と **リソース グループ** を選択します。\n1. [必要な **データ所在地 (プレビュー)] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/review-plus-create_2.png\" alt-text=\"リソース Azure ボットを選択する\"::: \n\n   新しいリソース グループを作成するには、[ **新規作成** ] を選択>リソース名を入力> **[OK] を選択します**。 [ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n   \n    :::image type=\"content\" source=\"~/assets/images/bots/newresource.png\" alt-text=\"新しいリソース グループの場所\":::\n\n1. [ **アプリの種類]** を **[MultiTenant**] として選択します。\n\n1. [ **Microsoft アプリ ID** ] セクションで、既定で [ **新しい Microsoft アプリ ID の作成** ] が選択されています。 \n\n   [ **既存のアプリの登録を使用する** ] を選択し、 **アプリ ID**、 **アプリ テナント ID**、 **MSI リソース ID を** 入力することもできます。\n\n   > [!NOTE]\n   > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n1. **[確認 + 作成]** を選びます。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/multi-tenant-option_1.png\" alt-text=\"Microsoft アプリ ID\":::\n\n1. 検証に合格したら、[作成] を選択 **します**。 \n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。 \n\n1. [**リソースに移動**] を選びます。 \n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/bot-deployment_2.png\" alt-text=\"アプリのデプロイ\":::\n\n    Azure ボットが作成されます。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/bot-page_1.png\" alt-text=\"Azure ボット リソースが作成されました\":::\n\n**クライアント シークレットを作成するには**\n\n  新しい **Microsoft アプリ ID** を作成した場合は、次の手順を実行します。\n\n1. 左側のウィンドウで、[構成] を選択 **します**。 \n\n   > [!TIP]\n   > 今後参照するために **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/manage_1.png\" alt-text=\"作成された Microsoft ID\":::\n\n1. **[Microsoft アプリ ID] の** 横にある [管理] を選択 **します**。\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/newclientsecret_2.png\" alt-text=\"新しいクライアント シークレット\":::\n\n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。 \n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/clientsecret_2.png\" alt-text=\"アプリにクライアント シークレットを追加する\":::\n\n1. [ **値** ] 列で、[ **クリップボードにコピー**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/Teams-task-module/clientvalue_2.png\" alt-text=\"クライアント シークレットの値\":::\n   \n   > [!TIP]\n   > 後で参照するために、 **クライアント シークレットの** 値またはアプリ パスワードを保存します。\n\n**Teams チャネルを追加するには**\n\n1. [**ホーム**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/gotohome_2.png\" alt-text=\"ホーム ページ\":::\n\n1. [ **最近使ったリソース**] からボットを選択します。\n\n1. 左側のウィンドウで [**チャネル**] を選択し、[**Microsoft Teams**] を選択します <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n     :::image type=\"content\" source=\"~/assets/images/adaptive-cards/channel-teams.png\" alt-text=\"チャネルで Teams を選択する\":::\n     \n1. チェックボックスをオンにして **、利用規約** に同意します。\n\n1. [ **同意する] を選択します**。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/terms_2.png\" alt-text=\"サービス利用規約\":::\n\n1. **[適用]** を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/configteams_2.png\" alt-text=\"[Teams] を選択します\":::  \n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n ```bash\n ngrok http --host-header=rewrite 3978\n ```\n\n> [!TIP]\n> **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに記載されている手順に従って、ngrok のサインアップと認証を行います。 `ngrok http --host-header=localhost 3978` コマンドを実行します。\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から HTTPS URL をコピーします。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/ngrok-url1_1.png\" alt-text=\"ngrok HTTPS URL\":::\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n    > `WebAppDomain`は、それに含`https://`まれていない完全修飾ドメイン名です。\n\n1. 作成した Azure ボットの **[設定]** で、[構成] を選択 **します**。\n\n1. **メッセージング エンドポイント** で、ngrok から使用できる HTTPS URL を使用し、URL の末尾に **/api/messages** を追加します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/messaging-endpoint_1.png\" alt-text=\"メッセージング エンドポイント\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot Serviceでボットが正常に設定されました。\n"
- title: Azure AD アプリの登録を更新する
  durationInMinutes: 1
  content: "1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **Azure Active Directory** を選択します。\n\n1. 左側のウィンドウで、[ **アプリの登録**] を選択します。\n\n1. ボットを選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/appregister_1.png\" alt-text=\"アプリの登録\":::\n\n1. [ **API の公開] を選択します**。\n\n1. [ **設定] を選択します**。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/exposeanapi_1.png\" alt-text=\"API を公開する\":::\n\n1. **アプリケーション ID URI を** の形式`api://your ngrok/{AppID}`で設定します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/setlink_1.png\" alt-text=\"リンクの設定\":::\n\n    > [!NOTE]\n    > ngrok などのトンネリング サービスを使用している場合は、ngrok サブドメインが変更されるたびに値を更新してください。\n    > たとえば、 `api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2``f631****.ngrok.io` は新しい ngrok サブドメイン名です。\n\n1. **[スコープの追加]** を選択します。 \n\n   :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/selectscope_2.png\" alt-text=\"[スコープの追加]\":::\n\n   [ **スコープの追加]** ウィンドウが表示されます。\n\n1. スコープを構成するには、次の詳細を入力します。\n\n    1. **スコープ名** として「」と入力`access_as_user`します。\n\n    1. [ **同意できるユーザー]** を に `Admins and users`設定します。\n\n1. スコープの適切な値 `access_as_user` を使用して管理者とユーザーの同意プロンプトを構成するには、フィールドに次の情報を指定します。</br>\n\n     * **同意の表示名管理** 入力`Teams can access the user’s profile`します。\n\n     * **同意の説明として「管理**」と入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n     * **[ユーザーの同意] 表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n     * **[ユーザーの同意の説明]** として入力`Enable Teams to call this app’s APIs with the same rights as the user`します。\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n1. [ **スコープの追加]** を選択して保存します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/addascope_1.png\" alt-text=\"スコープを追加する\":::\n\n    > [!NOTE]\n    > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。</br>\n       `api://d4b8****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/scopes_3.png\" alt-text=\"Scope\"::: \n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。 \n\n1. **[クライアント アプリケーションの追加]** を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/selectclientapp_1.png\" alt-text=\"クライアント アプリケーションの選択\"::: \n\n1. 「 **クライアント ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application」と入力します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/addclientapplication1.png\" alt-text=\"クライアント アプリケーションの追加 1\"::: \n\n   「 **クライアント ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams Web アプリケーション」と入力します。\n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/addclientapplication2.png\" alt-text=\"クライアント アプリケーションの追加 2\"::: \n\n1. [ **承認されたスコープ] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/authorizedscope.png\" alt-text=\"クライアント アプリケーションの追加 2\"::: \n\n   次の図は、クライアント ID を表示します。\n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/clientapps.png\" alt-text=\"クライアント アプリケーション\"::: \n\n1. 左側のウィンドウで、[ **API アクセス許可**] を選択します。 \n\n   > [!NOTE]\n   > ユーザーは、Azure AD アプリが別のテナントに登録されている場合にのみ、API のアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/add-permission_2.png\" alt-text=\"アクセス許可の追加\":::\n\n1. **[Microsoft Graph]** を選択します。\n\n1. [**委任されたアクセス許可**] を選択します。\n\n1. 次のアクセス許可を選択します。</br>\n     * **email**\n     * **offline_access**\n     * **Openid**\n     * **profile**\n      * **User.Read**\n\n1. **[アクセス許可の追加]** を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/other-permissions_1.png\" alt-text=\"その他のアクセス許可\":::\n\n1. 左側のパネルで、[ **認証** ] を選択してリダイレクト URI を設定します。 \n\n   > [!NOTE]\n   > アプリに IT 管理者の同意が付与されていない場合、ユーザーは初めてアプリを使用する際に同意を提供する必要があります。\n           \n     1. [プラットフォーム >  **Web の追加] を** 選択します。\n\n        :::image type=\"content\" source=\"~/assets/images/Teams-task-module/webauth_1.png\" alt-text=\"Web\":::\n\n     1. 完全修飾ドメイン名に追加して、アプリの `auth-end` リダイレクト URI を入力します。</br> \n       `https://d4b8****.ngrok.io/auth-end`. </br>\n\n     1. 次のチェック ボックスをオンにして、 **暗黙的な許可フローとハイブリッド フロー** を有効にします。\n         * **ID トークン**\n         * **アクセス トークン**\n\n     1. **[構成]** を選択します。\n\n        :::image type=\"content\" source=\"~/assets/images/Teams-task-module/authend_1.png\" alt-text=\"Auth-end\":::\n"
- title: アプリ設定とマニフェスト ファイルを設定する
  durationInMinutes: 1
  content: "1. 複製されたリポジトリの **appsettings.json** に移動します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/appsettingslocation_1.png\" alt-text=\"アプリ設定の場所\":::\n\n1. 最新バージョンの Visual Studio で **appsettings.json** を開き、次の情報を更新します。  \n\n     * **MultiTenant** に設定`\"MicrosoftAppType\"`します。\n     * ボットの **Microsoft アプリ ID に** 設定`\"MicrosoftAppId\"`します。\n     * **[クライアント シークレット** の **値]** に設定`\"MicrosoftAppPassword\"`します。\n     * アプリが使用されているテナントのテナント ID に設定 `\"MicrosoftAppTenantId\"` します。\n     * 完全修飾ドメイン名 (https から io) に設定 `\"BaseUrl\"` します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/appsettings_1.png\" alt-text=\"Visual Studio の appsetting.json を示すスクリーンショット。\":::\n\n1. 複製されたリポジトリの **manifest.json** に移動します。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/manifestlocation_1.png\" alt-text=\"マニフェスト ファイルの場所\":::\n\n1. 最新バージョンの Visual Studio で **manifest.json** を開き、次の変更を行います。\n\n     * のすべての出現箇所を `YourDeployedBotUrl.com` 名前に置き `WebAppDomain` 換えます。\n     * のすべての出現箇所を `<<YOUR-MICROSOFT-APP-ID>>` ボットの **Microsoft アプリ ID に** 置き換えます。\n\n    :::image type=\"content\" source=\"~/assets/images/Teams-task-module/manifest_1.png\" alt-text=\"マニフェスト イメージ2。\"lightbox=\"~/assets/images/Teams-task-module/manifest_1.png\":::\n"
- title: サービスをビルドして実行する
  durationInMinutes: 1
  content: "**最新バージョンの Visual Studio またはコマンド ラインを使用してサービスをビルドして実行するには**\n\n# <a name=\"latest-version-of-visual-studio\"></a>[Visual Studio の最新バージョン](#tab/latestversionofvisualstudio)\n\n   1. 最新バージョンの Visual Studio を起動します。\n   1. **[ファイル** > を **開く****] [プロジェクト/ソリューション**]  >  に移動します。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/VSopenfile.png\" alt-text=\"フォルダーの場所を含む開いているファイルを示すスクリーンショット。\":::\n\n   1. **54.teams-task-module** フォルダーから **TeamsTaskModule.csproj** ファイルを選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/csprojfileopen_1.png\" alt-text=\"CS proj ファイル\":::\n\n   1. **ビュー** から **ソリューション エクスプローラー** を開きます。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/solutionexplorer_1.png\" alt-text=\"開いているソリューション エクスプローラーを示すスクリーンショット。\":::\n\n   1. 右クリックして **TeamsTaskModule** を選択します。\n\n   1. [ **スタートアップ プロジェクトとして設定] を選択します**。\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/startup_1.png\" alt-text=\"[スタートアップ プロジェクトとして設定] を選択する方法を示すスクリーンショット。\":::\n\n   1. **F5** キーを押してプロジェクトを実行します。\n\n   1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/certificate_1.png\" alt-text=\"信頼証明書\":::\n\n      Web ページが開き、 というメッセージが表示されます **。ボットの準備ができました。**\n\n      :::image type=\"content\" source=\"~/assets/images/Teams-task-module/appisready.png\" alt-text=\"アプリの準備完了\"::: \n\n    \n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nコマンド プロンプト ウィンドウで **54.teams-task-module > csharp_dotnetcore > BotBuilder-Samples >サンプル** に移動し、次のコマンドを入力します。\n\n```bash\ndotnet run\n```\n\n:::image type=\"content\" source=\"~/assets/images/Teams-task-module/dotnetruncmd.png\" alt-text=\"dotnet run のコマンド プロンプトを示すスクリーンショット。\"::: \n"
- title: タスク モジュール アプリのアップロード
  durationInMinutes: 1
  content: "1. 複製したリポジトリで、 **TeamsAppManifest > 54.teams-task-module csharp_dotnetcore >** に移動します。\n\n1. **TeamsAppManifest** フォルダーに存在する次のファイルを含む.zipを作成します。 \n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/zip-file_1.png\" alt-text=\"Zip ファイル\"::: \n\n1. **Microsoft Teams** に移動します。\n\n1. **[アプリ]** を選択します。\n\n1. **[アプリの管理]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/manage-apps_3.png\" alt-text=\"アプリを管理する\":::\n\n1. **[カスタム アプリをアップロードする]** を選択します。 \n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/upload-app_1.png\" alt-text=\"カスタム アプリをアップロードする\":::\n\n1. [ **開く** ] を選択して、 **TeamsAppManifest** フォルダーに作成した.zip ファイルをアップロードします。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/select-zip_1.png\" alt-text=\"zip ファイルを選択する\":::\n\n1. **[追加]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/add-app_1.png\" alt-text=\"アプリを追加する\":::\n\n   アプリがチャットで開きます。\n\n1. 任意のテキストを入力して送信します。 \n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/chat_ready_1.png\" alt-text=\"チャット\":::\n\n   アプリには、 **ヒーロー カードからのタスク モジュール呼び出し** と **アダプティブ カードからのタスク モジュール呼び出しが** 表示されます。         \n"
- title: Teams でアプリを操作する
  durationInMinutes: 1
  content: "1. **[ヒーロー カードからのタスク モジュール呼び出し]** または [**アダプティブ カードからのタスク モジュール呼び出し] から [アダプティブ カード]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/adaptive-card_1.png\" alt-text=\"アダプティブ カード\":::\n\n1. 任意のテキストを入力します。\n\n1. **[送信]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/adaptive-card-text.png\" alt-text=\"アダプティブ カード メッセージ ボックスを示すスクリーンショット。\":::\n\n   **アダプティブ カードは** 受信確認メッセージを送信します。\n   \n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/adaptive-card-submit.png\" alt-text=\"アダプティブ カードが受信確認メッセージを送信するスクリーンショット。\":::\n\n1. **[ヒーロー カードからのタスク モジュール呼び出し]** または [**アダプティブ カードからのタスク モジュールの呼び出し] から** [**カスタム フォーム**] を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/custom-form_1.png\" alt-text=\"カスタム フォーム\":::\n\n1. 必要な情報を入力します。\n\n   * **名前**\n   * **電子メール**\n   * **お気に入りの本**\n   * **Password**\n   * **パスワードの確認**\n\n1. [ **サインアップ] を選択します**。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/custom-text.png\" alt-text=\"カスタム フォームテキスト\":::\n\n   **カスタム フォーム** から受信確認メッセージが送信されます。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/custom-on-sign-up.png\" alt-text=\"サインアップ\":::\n\n   次の情報がチャットに表示されます。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/adaptive-custom-chat.png\" alt-text=\"チャット\":::\n\n1. **[ヒーロー カードからのタスク モジュールの呼び出し]** または [**アダプティブ カードからのタスク モジュールの呼び出し] から** **[YouTube**] を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/youtube_1.png\" alt-text=\"YouTube\":::\n\n1. [ **再生] を選択します**。\n\n   :::image type=\"content\" source=\"~/assets/images/Teams-task-module/youtube-select_1.png\" alt-text=\"YouTube の選択\":::\n\n   ビデオが再生されます。\n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    このようなものを思いついたのですか?

       :::image type="content" source="./assets/images/Teams-task-module/final_image.png" alt-text="タスク モジュール":::
- content: Teams タスク モジュール アプリの使用を開始するためのチュートリアルを完了しました。
