### YamlMime:Tutorial
title: JavaScript を使用して最初のメッセージ拡張アプリを作成する
metadata:
  title: JavaScript を使用した Hello World
  description: このチュートリアルでは、Teams Toolkit を使用して新しいプロジェクトを設定し、メッセージ拡張機能アプリをビルドして展開することで、JavaScript を使用してHello World アプリを構築する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 開始の概要に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 439ea7e66afc55b9281f26880730702280975378
  ms.sourcegitcommit: 5e645a3436a6924f4a6bf470c563aa0d76e0d226
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/07/2022
  ms.locfileid: "67615643"
items:
- durationInMinutes: 1
  content: "最初の Teams アプリを使用して Microsoft Teams アプリの開発を開始します。 メッセージ拡張機能 Teams アプリを作成します。 \n\nアプリには、独自の UI と UX が付属する機能があります。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"このアプリを示すダイアグラムには、3 つの機能があります。\":::\n\n\nこのチュートリアルでは、次の方法について学ぶことができます:\n\n- Teams Toolkit を使用して新しいプロジェクトを設定する方法。\n- メッセージ拡張機能アプリをビルドする方法。\n- アプリをデプロイする方法。\n"
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリをビルドしてデプロイするために必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | 使用するには... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript または TypeScript、ビルド環境。 最新バージョン​​を使用します。 |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Microsoft Visual Studio Code 拡張機能。 バージョン 4.0.0 を使用します。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バックエンド JavaScript ランタイム環境。 バージョン 14 または 16 を使用します。|\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべて 1 か所のアプリを通じて、共同作業するすべてのユーザーと共同作業を行います。|\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Microsoft 365 開発者アカウント](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | アプリをインストールするための適切なアクセス許可を持つ Teams アカウントにアクセスします。 |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) および [Azure CLI](/cli/azure/install-azure-cli) | 保存されたデータにアクセスしたり、Azure で Teams アプリ用のクラウドベースのバックエンドをデプロイしたりするための Azure ツール。 |\n| &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) または [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | オープン ソース React JavaScript ライブラリのブラウザー DevTools 拡張機能。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph エクスプローラー。Microsoft Graph データからクエリを実行できるブラウザー ベースのツール。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | Teams アプリを構成、管理、組織や Teams ストアなどに配布するための Web ベースのポータル。 |\n\n\n> [!TIP]\n> Microsoft Graph データを操作する場合は、Microsoft Graph エクスプローラーについて学び、ブックマークする必要があります。 このブラウザー ベースのツールを使用すると、アプリの外部で Microsoft Graph に対してクエリを実行できます。\n\n\n## <a name=\"prepare-development-environment\"></a>開発環境を準備する\n\n必要なツールをインストールしたら、開発環境を設定します。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Teams Toolkit をインストールする\n\nTeams Toolkit を使用すると、アプリのクラウド リソースのプロビジョニングとデプロイ、Teams ストアへの公開などを行うツールにより、開発プロセスを簡略化できます。 \n \n使用このツールキットは、Visual Studio Code または `TeamsFx` という CLI (コマンド ライン インターフェイス) で使用できます。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開き、**[拡張機能]** ビュー (**Ctrl + Shift + X** / **⌘⇧-X** または **[表示] > [拡張機能]**) を選択します。\n1. 検索ボックスに、「**Teams Toolkit**」と入力します。\n1. Teams Toolkit の横にある **[インストール]** を選択します。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"図は、Teams Toolkit 拡張機能のインストールを示しています。\":::\n\n インストール後に Teams Toolkit アイコンが、Visual Studio Code サイド バーに表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、Visual Studio Code サイド バーの Teams Toolkit アイコンを示しています。\":::\n\nTeams Toolkit は、[Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) にもあります。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、`npm` パッケージ マネージャーを使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI をインストールするために `sudo` を使用しなければならないこともあります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nLinux および macOS システムではこの条件はより一般的です。\n\nnpm グローバル キャッシュが PATH に追加されていることを確認します。 この手順は通常、Node.js インストーラーの一部として行われます。  \n\nCLI で `teamsfx` コマンドを指定して使用できます。 `teamsfx -h` を実行して、このコマンドが動作していることを確認します。\n\n> [!CAUTION]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell で \"remote signed\" 実行ポリシーを有効にする必要があります。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** とは、チャット、ファイルの共有、会議の実行を行う Teams の組織のスペースまたはコンテナーのようなものです。 このスペースは、アプリをサイドロードしてテストする場所でもあります。 テナントを使って開発する準備ができているかどうかを確認しましょう。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 このプロセスはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 有効になっていない場合は、Teams でアプリをローカルでプレビューしてテストすることはできません。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にそうかどうかを確認しましょう。\n\nTeams でアプリをサイドロードできるかどうかを確認します。\n\n 1. Teams クライアントで、**[ストア]** アイコンを選択します。\n 1. **[アプリの管理]** を選択します。\n 1. [**アプリ の発行**] を選択します。\n 1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/spfx-custom-new1.png\" alt-text=\"ボット ホーム\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションが表示されない場合は、Teams 管理者にお問い合わください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で、**[E5 サブスクリプションの設定]** を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 設定した管理者アカウントを使用して Teams にサインインします。 Teams に **[カスタム アプリのアップロード]** オプションがあることを確認します。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得します。\n\nアプリをホストする場合、または Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。開始する前に、[無料アカウントを作成](https://azure.microsoft.com/free/) してください。\n\nこれで、すべてのツールを入手し、アカウントを設定しました。 次に、開発環境を設定し、ビルドを開始しましょう。 最初に実行するアプリを選択します。\n"
- title: メッセージ拡張機能アプリ用のプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\nボット アプリをビルドしました。 次に、最初のメッセージ拡張機能アプリを作成しましょう。\n\nメッセージ拡張機能機能を使用すると、Web サービスを操作できます。 Teams クライアントの作成領域、コマンド ボックス、またはメッセージングを使用して、外部システムを検索したり、外部システムで操作を開始したりできます。\n\n  :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png\" alt-text=\"このアプリには 3 つの機能があることを示す図。メッセージ拡張機能が強調表示されています。\":::\n\nTeams **メッセージ拡張機能** には、以下の 2 種類があります。\n\n- [検索コマンド](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md): 外部システムを検索できます。 次に、その結果をカード形式でメッセージに挿入できます。\n- [アクション コマンド](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md): ユーザーにモーダル ポップアップを表示して、情報を収集または表示できます。 その後、それらの操作を処理し、Teams に情報を送り返すことができます。\n\n*検索コマンド* を使用してメッセージ拡張機能アプリを作成しましょう。 それを使用して、外部データを検索し、結果を Teams クライアント内のメッセージに挿入します。\n\nこれらのアプリを作成する準備は既に整っているので、メッセージ拡張機能アプリを作成するための新しい Teams プロジェクトを設定できます。\n\n> [!NOTE]\n> メッセージ拡張機能は、ユーザーとコードの間のダイアログを提供するボットに依存しています。\n\n\nこのチュートリアルでは、次の方法について学ぶことができます:\n\n1. [Teams Toolkit を使用して新しいメッセージ拡張機能プロジェクトを設定する方法。](#create-your-message-extension-project-workspace)\n1. [アプリ プロジェクトのディレクトリ構造について。](#take-a-tour-of-the-message-extension-app-source-code)\n\n## <a name=\"create-your-message-extension-project-workspace\"></a>メッセージ拡張機能プロジェクト ワークスペースを作成する\n\n前提条件を満たしている場合は、始めましょう。\n\n> [!NOTE]\n> 表示される Visual Studio Code UI は Mac のものです。 オペレーティング システム、Toolkit バージョン、環境によって異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\":::。\n\n1. **[新しい Teams アプリを作成]** を選択して、Teams Toolkit を使用してアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-new-app1.png\" alt-text=\"[新しいプロジェクトの作成] のウィザードの開始\":::。\n\n1. アプリでビルドする機能として **メッセージ拡張機能** が選択されていることを確認します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex1.png\" alt-text=\"新しいアプリに機能を追加する方法を示すスクリーンショット\":::。\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-tab.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\":::\n\n1. **既定の場所** にプロジェクト ルート フォルダーを格納するには、[既定のフォルダー] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-default-location.png\" alt-text=\"既定の場所を選択する\":::\n\n    次の手順で既定の場所を変更することもできます。\n\n    1. **[参照] を選択します**。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-browse.png\" alt-text=\"参照場所を選択する\":::\n        \n    1. プロジェクト ワークスペースの場所を選択します。\n\n    1. フォルダーの **選択を選択します**。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png\" alt-text=\"フォルダーを選択する方法を示すスクリーンショット。\":::\n\n1. アプリに適した名前を入力します。 アプリの名前が英数字であることを確認します。 **Enter** キーを押します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-project-name.png\" alt-text=\"アプリ名を入力する方法を示すスクリーンショット。\":::\n\n1. 既定では、プロジェクトは 10 秒以内に新しいウィンドウで開きます。 現在のウィンドウで開く場合は、[現在のウィンドウ **で開く**] を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/new-window-notification.png\" alt-text=\"新しいウィンドウ通知。\":::\n\n    数秒で、Teams Toolkit によりアプリが作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\":::\n\n    アプリが作成されると、Teams Toolkit に次のメッセージが表示されます。 \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-project.png\" alt-text=\"Localdebug\":::\n\n    **[ローカル デバッグ**] を選択して、プロジェクトをプレビューできます。 \n\n  <details>\n  <summary>Teams アプリの作成に関する簡単なまとめ。</summary>\n  Teams アプリの作成に関する簡単なまとめをご覧ください。\n\n  ![Teams アプリを作成する](~/assets/videos/javascript-msg-ext-app1.gif)\n  </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して、新しい Teams アプリを作成できます。 CLI では、一連の質問によって作業を進めます。 すべての質問には、それに対する回答に関する指示が含まれています。\n\nたとえば、方向キーを使用してオプションを選択します。 選択した後、**Enter** キーを押して確定します。\n\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. **[メッセージング拡張機能]** 機能を選択し、**[タブ]** 機能の選択を解除します。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. **Enter** を選択して、既定のワークスペース フォルダーを選びます。\n1. `HelloMsgExtn` のように、アプリに適した名前を入力します。  アプリの名前は、英数字のみで構成されている必要があります。\n\n  すべての質問に答えると、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-message-extension-app-source-code\"></a>メッセージ拡張機能アプリのソース コードのツアーを開始する\n\nメッセージ拡張機能では Bot Framework を使用します。 これを使用して、会話を介してサービスと対話します。 スキャフォールディングが完了した後、プロジェクトのディレクトリとファイルを Visual Studio Code のエクスプローラー領域で確認できます。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/folder-structure-mex-app.png\" alt-text=\"folder msg\":::\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーが Teams アプリ用にカスタマイズできる構成ファイル。 |\n| `.fx/configs/config.<envName>.json` | 環境すべての構成ファイル。 |\n| `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| `.fx/states` | Toolkit によって生成されるプロビジョニング出力。  アプリのリソースをプロビジョニングした後にこのフォルダーが Toolkit によって作成されます。 |\n| `.fx/states/state.<envName>.json` | すべての環境のプロビジョニング出力ファイル。 |\n| `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密ユーザー データ。 |\n| `bot` |  実行時に必要なボットのコード。 |\n| `bot/messageExtensionBot.js` | メッセージ拡張機能のメイン エントリ ポイント。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイル、アプリ アイコン、color.png と outline.png。 |\n| `templates/appPackage/manifest.template.json` | ローカルおよびリモートの環境でアプリを実行するためのアプリ マニフェスト。  |\n| `templates/azure` | BICEP テンプレート ファイル |\n\n> [!Tip]\n> Teams 内でアプリを統合する前に、Teams 外のボットとメッセージ拡張機能に慣れておきましょう。\n"
- title: 最初のメッセージ拡張機能をビルドして実行する
  durationInMinutes: 1
  content: "\nTeams Toolkit を使用してプロジェクト ワークスペースを設定したら、次にプロジェクトをビルドします。 Microsoft 365 アカウントにサインインする必要があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nこのアカウントを使用して、Teams にサインインします。 Microsoft 365 開発者プログラム テナントを使用している場合は、Microsoft 365 アカウントは、登録中に設定した管理者アカウントです。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vcode)\n\n1. Visual Studio Code を開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. **[M365 にサインイン (Sign in to M365)]** を選択します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. Microsoft 365 アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n1. Visual Studio Code 内の Teams Toolkit に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、Microsoft 365 アカウント名が表示されます。 Microsoft 365 アカウントでサイドローディングが有効になっている場合、Teams Toolkit に **[サイドローディングが有効]** と表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled-msg.png\" alt-text=\"Microsoft 365と Azure にサインインする場所を示すスクリーンショット。\":::\n\n    これで、アプリをビルドし、ローカルで実行する準備が整いました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用して Microsoft 365 にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Code と TeamsFx CLI で共有されます。\n\n    開発環境が構成されたので、最初の Teams アプリを作成、ビルド、デプロイできます。\n\n---\n\n## <a name=\"build-and-run-your-app-in-the-local-environment\"></a>ローカル環境でアプリをビルドして実行する\n\nメッセージ拡張機能を使用すると、Web サービスを操作できます。 メッセージング機能とボットのセキュリティで保護された通信を利用します。 メッセージ拡張機能アプリは、ボットとして登録された Web サービスに追加されます。 \n\n### <a name=\"build-and-run-your-app-locally\"></a>アプリをローカルでビルドして実行する\n\n1. Visual Studio Code で **F5** を選択して、アプリケーションをデバッグ モードで実行します。  <!-- markdownlint-disable MD033 -->\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    **F5** を選択すると、Teams Toolkit によって以下の処理が行われます。\n\n    1. 次のすべての前提条件を確認します。\n      - Microsoft 365 アカウントでログインしています。\n      - Microsoft 365 アカウントに関してサイドローディングが有効になっています。\n      - サポートされている Node.js バージョンがインストールされています。\n      - ボット アプリの NPM パッケージがインストールされています。\n      - Ngrok がインストールされています。\n      - ボット アプリで必要なポートを使用できます。\n\n      > [!NOTE]\n      > Teams Toolkit によって特定の前提条件が確認できない場合は、確認を求めるメッセージが表示されます。\n\n    2. Ngrok を起動して HTTP トンネルを作成します。\n    3. アプリを Azure AD に登録し、アプリを構成します。\n    4. Bot Framework にボット アプリを登録し、アプリを構成します。\n    5. Teams 開発者ポータルにアプリを登録し、アプリを構成します。\n    6. ローカルでホストされているメッセージ拡張機能アプリを起動します。\n    7. Web ブラウザーで Teams を起動し、Teams アプリをサイドロードします。\n    \n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png\" alt-text=\"F5 キーを押してデバッグするときのスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 この処理には 3 ～ 5 分かかります。\n\n    Teams により、Web ブラウザーでアプリが実行されます。\n    \n1. メッセージが表示されたら、Microsoft 365 アカウントを使用してサインインします。\n1. **[追加]** を選択して、アプリを自分のアカウントに追加します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png\" alt-text=\"アプリを追加するメッセージを示すスクリーンショット\":::\n\n    Toolkit には、アプリが Teams に追加されることを示すメッセージが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-added-local-debug.png\" alt-text=\"スクリーンショットは、アプリを今すぐまたは後で試すためのメッセージを示しています\":::\n\n    - **[OK]** を選択した場合、サイドロードされたアプリの一覧から後でアプリを試すことができます。\n    - **[試してみる]** を選択した場合、Teams によってアプリが読み込まれます。\n\n1. **[試してみる]** を選択します。\n\n    メッセージ拡張機能アプリが、チャット ボット アプリに読み込まれます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png\" alt-text=\"Teams にサイドロードされたアプリを示すスクリーンショット\":::\n\n    メッセージ拡張機能アプリは、ユーザーと Web サービス間の通信を有効にする点でボットに依存しているため、アプリはボットのチャット機能に読み込まれます。\n\n    - メッセージ拡張機能アプリを作成する前にボット アプリを作成した場合は、作成したのと同じボット アプリに読み込まれていることがわかります。 以前のチャット メッセージが表示されます。\n    - 最初にメッセージ拡張機能を作成した場合、アプリは、Teams で開かれているすべてのチャットに読み込まれます。\n\n### <a name=\"test-your-app\"></a>アプリのテスト\n\nアプリが初めて読み込まれると、テストを行うためにメッセージ拡張機能アプリが開きます。 このサンプル アプリを使用すると、ソフトウェア レジストリからオープンソースの npm パッケージを検索できます。\n\n#### <a name=\"to-run-a-search-query\"></a>検索クエリを実行するには\n\n1. 検索ボックスに検索文字列 (\"cli\" など) を入力します。 一致する項目の一覧が表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png\" alt-text=\"アプリを検索に使用する方法を示すスクリーンショット\":::\n\n1. 検索結果からいずれかを選択します。 作成領域に表示されるので、結果をチャネルに送信できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png\" alt-text=\"検索結果を示すスクリーンショット\":::\n\n1. **[送信]** の手順を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png\" alt-text=\"チャットで送信された検索結果を示すスクリーンショット\":::\n\n    これで、基本的なメッセージ拡張機能アプリをビルドして実行する方法について学習できました。         \n\n## <a name=\"optional-scenarios\"></a>オプションのシナリオ\n\n基本的なメッセージ拡張機能アプリの検索機能をテストしました。 次に、このアプリの他の機能を試すことができます。 これらは、このアプリの省略可能なシナリオです。\n<br>\n<br>\n<details>\n<summary>カードを作成するには</summary>\n\n1. **[カードの作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png\" alt-text=\"カードを作成する方法を示すスクリーンショット\":::\n\n1. 示されているようにカードの詳細を入力し、**[送信]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\":::\n\n    作成領域にカードの詳細が表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\":::\n\n1. 作成領域にある **[送信]** アイコンを選択します。\n\n    アプリによって、ボット チャットでカードが送信されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png\" alt-text=\"送信されたカードを示すスクリーンショット\":::\n</details>\n<br>\n<details>\n<summary>作成領域からアプリを開くには</summary>\n\n以下のいずれかの方法を選択してアプリを開きます。\n\n* **`@mention` の使用:**\n\n1. アプリのコマンド領域に `@your-app-name` と入力します。\n    \n    アプリによって検索ボックスが表示され、それを使用してクエリを実行できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png\" alt-text=\"メッセージ拡張機能アプリを @メンションする方法を示すスクリーンショット\":::\n\n1. 検索文字列を入力し、検索結果からいずれかを選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png\" alt-text=\"メッセージ拡張機能アプリを使用して検索を実行する方法を示すスクリーンショット\":::\n\n    コマンド領域にカードとして表示されます。\n\n1. カードをコピーして、作成領域に貼り付けます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png\" alt-text=\"カード内の検索結果を示すスクリーンショット\":::\n    \n1. 作成領域を使用してカードを送信します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png\" alt-text=\"チャット内の検索結果を示すスクリーンショット\":::\n\n* **3 つのドット アイコンの使用:**\n\n1. 作成領域の下部にある 3 つのドットからメッセージ拡張機能を起動します。\n1. メッセージ拡張機能アプリを選択します。       \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png\" alt-text=\"サンプルのメッセージ拡張機能アプリを開く方法を示すスクリーンショット\":::\n\n    メッセージ拡張機能アプリが、検索を実行してアダプティブ カードを作成するオプションとともに読み込まれます。\n</details>\n<br>\n<details>\n<summary>サイドロードされたアプリからアプリを実行する</summary>\n\nサイドロードされたアプリの一覧からサイドロードされた Teams アプリを開くことができます。 \n\n1. Teams サイドバーから **[ストア]** アイコンを選択します。\n1. **[アプリを管理]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png\" alt-text=\"サイドロードされたアプリを示すスクリーンショット\":::\n\n1. アプリの 3 つのドット アイコンを選択してから、**[詳細を表示]** を選択します。 また、アプリへのリンクをコピーし、それを使用してアプリを開くこともできます。\n1. **[開く]** を選択してアプリを読み込み、**[試してみる]** を選択します。 \n    \n    アプリが Teams で読み込まれます。\n\n</details>\n<br>\n<br>\n<!-- markdownlint-disable MD033 -->\n<details>\n<summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\nTeams でアプリを実行するには、アプリのサイドロードを許可する Microsoft 365 開発アカウントが必要です。 「前提条件」セクションで、サイドローディングの詳細について確認できます。\n</details>\n"
- title: 最初の Teams アプリをデプロイする
  durationInMinutes: 1
  content: "\nメッセージ拡張機能機能を使用して Teams アプリを作成、ビルド、実行する方法を学習しました。 最後の手順は、アプリを Azure に展開することです。\n\nTeams Toolkit を使用して、タブ機能を備えた最初のアプリを Azure にデプロイしましょう。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nこのアカウントを使用して、Microsoft Azure potral にアクセスし、アプリをサポートする新しいクラウド リソースをプロビジョニングします。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. タブ アプリを作成したプロジェクト フォルダーを開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. **[Azure にサインイン]** を選択します。\n\n    > [!TIP]\n    > Azure アカウント拡張機能がインストールされ、同じアカウントを使用している場合は、この手順をスキップできます。 他の拡張機能で使用しているのと同じアカウントを使用します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。 使用可能な Azure サブスクリプションが少なくとも 1 つあることを確認します。 ない場合は、サインアウトして別のアカウントを使用します。\n\n    これで、アプリを Azure にデプロイする準備が整いました。\n\n    おめでとうございます。Teams アプリを作成しました。 \n    次に、Teams Toolkit を使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用して Microsoft 365 にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Code と TeamsFx CLI で共有されます。\n\n    おめでとうございます。Teams アプリを作成しました。 \n    次に、Teams Toolkit を使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリを Azure に展開した場合に発生することを説明します</summary>\n\n  展開前は、このアプリケーションは以下のようにローカルで動作しています。\n\n  * バックエンドは、**Azure Functions Core Tools** を使用して実行します。\n  * アプリケーションの HTTP エンドポイントは、Microsoft Teams がアプリケーションを読み込む場所でローカルに実行されます。\n\n  デプロイは、2 つの手順で構成されるプロセスです。 アクティブな Azure サブスクリプションにリソースをプロビジョニングし、その後アプリケーションのバックエンド コードとフロントエンド コードを Azure にデプロイまたはアップロードします。\n\n  * バックエンドが構成済みの場合、Azure App Service や Azure Storage など、さまざまな Azure のサービスが使用されています。\n  * フロントエンド アプリケーションは、静的な Web ホスティング用に構成された Azure Storage アカウントに展開されます。\n\n  </details>\n"
- title: おめでとうございます!
  durationInMinutes: 1
  content: "\nこれで完了です。\n\nメッセージ拡張機能アプリを作成しました。\n\n基本的なアプリの作成を学習したので、より複雑なアプリの作成に進むことができます。 まず、既存のアプリに機能を追加してみてください。\n\n既存のアプリに機能を追加するには:\n\n1. Teams Toolkit サイドバーの **[開発**] セクションで [**機能の追加]** を選択します。\n\n1. アプリに追加する機能を選択します。\n\n手順は以上です。 Teams Toolkit によって、アプリのディレクトリ構造に新しい機能のスキャフォールディングが追加されます。 手順に従ってアプリをビルドしてデプロイします。アプリには複数の機能を含めます。 \n\nJavaScript を使用してメッセージング拡張機能アプリを構築するためのチュートリアルを完了しました。"
