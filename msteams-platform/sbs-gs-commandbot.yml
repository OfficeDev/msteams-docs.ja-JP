### YamlMime:Tutorial
title: Build コマンド ボットと JavaScript
metadata:
  title: Build コマンド ボットと JavaScript
  description: このチュートリアルでは、Teams Toolkit を使用してコマンド ボットを構築することで、JavaScript を使用してコマンド ボットを作成する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: 機能の追加に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: de880f0a5b8720d2b891e05f1a53b4436f9472db
  ms.sourcegitcommit: dccb48902e08484692ab927415bcd3d61dc50db2
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/19/2022
  ms.locfileid: "67806930"
items:
- durationInMinutes: 1
  content: "Microsoft Teams では、コマンド ボットを使用して繰り返しタスクを自動化できます。 アダプティブ カードを使用してチャットで送信された簡単なコマンドに応答します。 \n\nこのチュートリアルでは以下を学習します。\n\n- Teams Toolkit を使用してコマンド ボットを構築する方法。\n- アプリのディレクトリ構造について説明します。\n\nこのステップ バイ ステップ ガイドは、Teams Toolkit を使用してコマンド ボットを構築するのに役立ちます。 次の出力が表示されます。\n\n  :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\":::\n"
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリをビルドしてデプロイするために必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | 使用する場合 |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript または TypeScript、ビルド環境。 最新バージョン​​を使用します。 |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Microsoft Visual Studio Code 拡張機能。 バージョン 4.0.0 を使用します。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バックエンド JavaScript ランタイム環境。 バージョン 14 または 16 を使用します。|\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべて 1 か所のアプリを通じて、共同作業するすべてのユーザーと共同作業を行います。|\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Microsoft 365 開発者アカウント](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | アプリをインストールするための適切なアクセス許可を持つ Teams アカウントにアクセスします。 |\n\n> [!NOTE]\n> このガイドは、Teams Toolkit バージョン 4.0.0 および Nodejs バージョン 14 および 16 でテストされています。 このガイドの手順は他のバージョンでも動作する場合がありますが、テストされていません。\n\n## <a name=\"prepare-development-environment\"></a>開発環境を準備する\n\n必要なツールをインストールしたら、開発環境を設定します。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Teams Toolkit をインストールする\n\nTeams Toolkit を使用すると、アプリのクラウド リソースのプロビジョニングとデプロイ、Teams ストアへの公開などを行うツールにより、開発プロセスを簡略化できます。 \n \nこのツールキットは、Visual Studio Code または CLI (コマンド ライン インターフェイス) と共 `TeamsFx`に使用できます。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開き、 **拡張機能** (**Ctrl + Shift + X** / **⌘⇧-X** または **表示>拡張機能**) を選択します。\n1. 検索ボックスに、「**Teams Toolkit**」と入力します。\n1. Teams Toolkit の横にある **[インストール]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/teams-toolkit.png\" alt-text=\"図は、Teams Toolkit 拡張機能のインストールを示しています。\":::\n\n インストール後に Teams Toolkit アイコンが、Visual Studio Code サイド バーに表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、Visual Studio Code サイド バーの Teams Toolkit アイコンを示しています。\":::\n\nTeams Toolkit は、[Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) にもあります。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、`npm` パッケージ マネージャーを使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI をインストールするために `sudo` を使用しなければならないこともあります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nLinux および macOS システムでは、より一般的です。\n\nnpm グローバル キャッシュが PATH に追加されていることを確認します。 この手順は通常、Node.js インストーラーの一部として行われます。  \n\nCLI で `teamsfx` コマンドを指定して使用できます。 `teamsfx -h` を実行して、このコマンドが動作していることを確認します。\n\n> [!NOTE]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell の **リモート署名済み** 実行ポリシーを有効にしてください。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** は、スペース、または Teams で組織のチャット、ファイルの共有、会議の実行を行うコンテナーのようなものです。 アプリをサイドロードしてテストすることもできます。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 これはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 サイドローディングを有効にして、Teams でアプリをローカルでプレビューしてテストします。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にあるかどうかを確認しましょう。\n\nTeams でサイドロード アプリを確認するには:\n\n 1. Teams クライアントで、[ストア] を選択 **します** 。\n 1. **[アプリの管理]** を選択します。\n 1. [**アプリ の発行**] を選択します。\n 1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションがない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で **[E5 サブスクリプションのセットアップ** ] を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 新しい管理者アカウントを使用して Teams にサインインします。 これで、[ **カスタム アプリのアップロード] オプションが表示** されます。\n"
- title: ビルド コマンド ボット
  durationInMinutes: 1
  content: "**Visual Studio Code を使用してコマンド ボットをビルドするには**\n\n 1. Visual Studio Code を開きます。\n\n 1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n 1. **[新しい Teams アプリを作成]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\":::。\n\n 1. [ **新しい Teams アプリの作成** ] オプションを選択して、Teams Toolkit を使用してアプリを作成します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png\" alt-text=\"新しいプロジェクトを作成するためのウィザードが開始されます\":::\n\n 1. アプリでビルドする機能として **Command ボット** が選択されていることを確認します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-bot.png\" alt-text=\"アプリ機能の選択\":::\n\n 1. プログラミング言語として **[JavaScript]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\":::\n \n 1. **既定の場所** にプロジェクト ルート フォルダーを格納するには、[既定のフォルダー] を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-default-location.png\" alt-text=\"ストレージの既定の場所を選択します。\":::\n\n    次の手順で既定の場所を変更することもできます。\n\n       1. **[参照] を選択します**。\n\n          :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-browse.png\" alt-text=\"ストレージの参照を選択する\":::\n\n       1. プロジェクト ワークスペースの場所を選択します。\n       1. [ **フォルダーの選択] を選択します**。\n\n           :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-folder.png\" alt-text=\"[フォルダー] を選択します。\":::\n \n 1. アプリケーション名としてコマンドボットなど、アプリに適した名前を入力します。 \n 1. **Enter** キーを押します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/app-name.png\" alt-text=\"アプリケーション名。\":::\n\n     > [!NOTE]\n     > アプリケーション名には英数字のみを使用してください。\n\n 1. 既定では、プロジェクトは 10 秒以内に新しいウィンドウで開きます。 現在のウィンドウで開く場合は、[現在のウィンドウ **で開く**] を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/new-window-notification.png\" alt-text=\"スキャフォールディングの新しいウィンドウ通知。\":::\n\n     コマンド ボット アプリは数秒で作成されます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/command-bot.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\":::\n\n 1. Visual Studio Code サイドバーから **[実行とデバッグ**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::] アイコンを選択します。\n\n 1. ドロップダウン リストから **[Debug(Edge)]** または **[Debug(Chrome)]** を選択します。\n\n 1. [ **デバッグの開始] ボタンを** 選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/debug-app.png\" alt-text=\"アプリケーションのデバッグ\":::\n\n 1. **[追加]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/add-app.png\" alt-text=\"アプリを追加する\":::     \n\n 1. コマンド ボットを選択します。\n \n 1. **Enter** キーを押します。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png\" alt-text=\"アプリドロップダウンを追加する\":::  \n\n    アダプティブ カードには、次のコマンド応答が表示されます。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\":::      \n\n ## <a name=\"take-tour-of-source-code\"></a>ソース コードのツアーに参加する\n\n Teams Toolkit には、アプリを構築するためのコンポーネントが用意されています。 プロジェクトを作成した後、プロジェクトのフォルダーとファイルを、Visual Studio Code の **エクスプローラー** 領域で確認できます。\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/folder-structure-command-bot.png\" alt-text=\"構造タグ\":::\n\n UI フレームワークを使用することを選択した場合、次のサンプル テンプレート コードは、React コンポーネントを使用したスキャフォールディングを提供します。 次のコンテンツが含まれています。\n\n | ファイル名 | コンテンツ |\n | --- | --- |\n | `bot/src/internal/initialize.js` | グローバル ボット アダプターを作成し、Teams Frameworks で初期化する |\n | `bot/src/index.js` | ボット アプリをホストし、/api/messages をリッスンして Bot Framework で Teams アクティビティを処理するサーバー コード |\n | `bot/src/helloworldCommandHandler.js` | helloworld コマンドを処理し、応答としてアダプティブ カードを返す hello world コマンド ハンドラー |\n | `bot/src/adaptiveCards/*.json` | コマンド応答として使用されるアダプティブ カード JSON ファイル |\n"
- title: 最初の Teams アプリをデプロイする
  durationInMinutes: 1
  content: "\nコマンド ボット機能を使用して Teams アプリを構築し、実行する方法を学習しました。 最後の手順は、アプリを Azure に展開することです。\n\nTeams Toolkit を使用して、コマンド ボット機能を備えた最初のアプリを Azure にデプロイしましょう。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nアカウントを使用して Microsoft Azure portalにアクセスし、アプリをサポートするための新しいクラウド リソースをプロビジョニングします。\n\n1. Visual Studio Code を開きます。\n1. コマンド ボット アプリを作成したプロジェクト フォルダーを開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. [ **Azure へのサインイン] を選択します**。\n\n    > [!TIP]\n    > Azure アカウント拡張機能がインストールされ、同じアカウントを使用している場合は、この手順をスキップできます。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできるようになります。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。\n    \n    > [!NOTE]\n    > 使用可能な Azure サブスクリプションが少なくとも 1 つあることを確認します。\n\n    これで、アプリを Azure にデプロイする準備が整いました。\n\n## <a name=\"deploy-your-app-to-azure\"></a>アプリを Azure にデプロイする\n\n **DEPLOYMENT** では、必要なクラウド リソースをプロビジョニングでき、アプリのコードは作成されたクラウド リソースにコピーされます。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. [デプロイ] **で [クラウドでプロビジョニング****] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-cloud.png\" alt-text=\"プロビジョニング コマンドを示すスクリーンショット\":::\n\n1. 既存のサブスクリプションの任意のユーザーを選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/select-subscription.png\" alt-text=\"プロビジョニングするサブスクリプションを選択する \":::\n\n1. 既存のリソース グループを選択するか、新しいリソース グループを作成します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/subscription-cloud.png\" alt-text=\"プロビジョニング用のリソースを示すスクリーンショット\":::\n\n    > [!NOTE]\n    > Azure でリソースを実行するときにコストが発生する可能性があることを示すダイアログが表示されます。\n\n1. **[プロビジョニング]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-confirm1.png\" alt-text=\"プロビジョニング ダイアログのスクリーンショット。\":::\n\n   プロビジョニング プロセスによって、Azure クラウドにリソースが作成されます。 右下隅にあるダイアログを観察することで、進行状況を監視できます。 数分後、次の通知が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-provision-success1.png\" alt-text=\"プロビジョニング完了のダイアログを示すスクリーンショット。\":::\n\n     プロビジョニングされたリソースを表示するオプションがあります。 このチュートリアルでは、リソースを表示する必要はありません。\n\n1. プロビジョニングが完了したら、[DEPLOYMENT] で [**クラウドにデプロイ****] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-cloud.png\" alt-text=\"クリックしてクラウドにデプロイする場所を示すスクリーンショット。\":::\n\n1. **[展開]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/Deploy-confirm.png\" alt-text=\"デプロイして確認します。\":::\n\n   デプロイには時間がかかります。 ダイアログの右下隅にある進行状況を監視できます。 数分後、次の通知が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/command-deploy-confirm.png\" alt-text=\"デプロイの確認。\":::\n\n\n1. Visual Studio Code からデバッグ パネル (**Ctrl + Shift + D** / **⌘⇧-D** または **View > Run**) を開きます。\n1. 起動構成ドロップダウンから [ **Launch Remote (Edge)]** を選択します。\n1. [ **デバッグの開始] ボタンを** 選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/remote-debug.png\" alt-text=\"リモート デバッグ。\":::\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/app-cloud-output.png\" alt-text=\"アプリ クラウドの出力。\":::\n\n1. コマンド ボットを選択します。\n1. **Enter** キーを押します。  \n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/hello-world-cloud.png\" alt-text=\"Hello World コマンド\":::\n\n    アダプティブ カードには、次のコマンド応答が表示されます。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/cloud-final-output.png\" alt-text=\"クラウドの最終出力\":::\n\n# <a name=\"command-line\"></a>[Command Line/コマンド ライン](#tab/cli)\n\nターミナル ウィンドウで以下を行います。\n\n1. 新しいプロジェクトを作成するために実行 `teamsfx new` します。\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. Azure リソースを作成するために実行 `teamsfx provision` します。\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. アプリをデプロイするために実行 `teamsfx deploy` します。\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. アプリを実行するために実行 `teamsfx preview` します。\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    このようなものを思いついたのですか?


    :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="クラウドの最終出力":::
- content: コマンド応答アプリをビルドするためのチュートリアルを完了しました。
