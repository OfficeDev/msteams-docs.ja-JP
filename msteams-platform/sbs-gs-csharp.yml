### YamlMime:Tutorial
title: SPFx を使用して初めてのアプリをビルドする
metadata:
  title: C# を使った Hello World
  description: このチュートリアルでは、新しいプロジェクトを設定し、タブ、ボット、メッセージ拡張機能アプリをビルドしてデプロイすることで、C# を使用してHello World アプリをビルドする方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 開始の概要に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 9dca990af0883f24a97a146b8b012181908314ac
  ms.sourcegitcommit: 60484634f38642048e9a9a1465ac0c3322c8229a
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 08/09/2022
  ms.locfileid: "67290149"
items:
- durationInMinutes: 1
  content: >
    タブ、ボット、メッセージ拡張機能のある最初のアプリをビルドして、Microsoft Teams アプリ開発を始めます。


    このアプリには全ての機能が含まれ、それぞれ独自の UI と UX を提供します。


    :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png" alt-text="このアプリを示すダイアグラムには、3 つの機能があります。":::


    このチュートリアルでは以下を学習します。


    - 新しいプロジェクトを設定する方法。

    - C# と Visual Studio を使用してタブ機能を備えたアプリをビルドする方法。
- title: 前提条件
  durationInMinutes: 1
  content: "Teams アプリをビルドして展開するためにインストールする必要があるツールのリストを次に示します。\n\n| &nbsp; | インストール | 使用するには... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.com/download)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • **ASP.NET と Web 開発** <br> • **.NET Core クロスプラットフォーム開発** | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |\n| &nbsp; | [Teams ツールキット](#install-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Visual Studio 拡張機能。 最新バージョン​​を使用します。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams を使用して、チャット、会議、通話用のアプリを通じて共同作業を行うすべてのユーザーと 1 か所で共同作業を行うことができます。 |\n\n## <a name=\"install-teams-toolkit\"></a>Teams Toolkit のインストール\n\nTeams Toolkit は、アプリのプロジェクト スキャフォールディングを作成するためのツールを使用して開発プロセスを簡略化するのに役立ちます。 選択したすべての機能に必要なディレクトリ構造が作成され、必要なファイルが配置され、プロジェクトをビルドする準備が整います。\n\nTeams Toolkit は、Visual Studio の拡張機能として使用できます。\n\nVisual Studio の最新のインストーラーは、 [Visual Studio のダウンロード ページからダウンロード](https://visualstudio.microsoft.com/vs/preview/)できます。\n\n> [!NOTE]\n> Visual Studio をインストールする前に、最初に Visual Studio インストーラーをインストールする必要があります。\n\nVisual Studio インストーラーを開いた後、ポップアップ ワークロード ウィンドウで実行します。\n\n  1. **ASP.NET と Web 開発ワークロードのボックスを** 選択します。\n  1. インストールの詳細パネルで **、Microsoft Teams 開発ツール** のボックスを選択します。\n  1. [**インストール**] を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-mstools.png\" alt-text=\"Visual Studio-installation\":::\n\n  1. **[起動]** を選択して Visual Studio を開きます。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/visual-studio-launch.png\" alt-text=\"Visual Studio を起動する\":::\n      \n     > [!IMPORTANT]\n     > Teams Toolkit for Visual Studio はこのバージョンの GA であるため、Visual Studio 2022 17.3.0 バージョンをダウンロードすることをお勧めします。 この記事は、Visual Studio 2022 17.3.0 バージョン用に記述されています。 Teams Toolkit バージョン 17.3.* 以降。\n\n  1. [**拡張機能****の管理]** >  を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-extension.png\" alt-text=\"[拡張機能] を選択します。\":::\n\n     次の [拡張機能の管理] ウィンドウが表示されます。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/manage-extension.png\" alt-text=\"拡張機能を管理します。\":::\n\n  1. [ **インストール済み]** を選択すると、 **Teams Toolkit 拡張機能が** インストールされていることがわかります。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-ttk.png\" alt-text=\"Teams Toolkit を選択する\":::\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** とは、チャット、ファイルの共有、会議の実行を行う Teams の組織のスペースまたはコンテナーのようなものです。 このスペースは、アプリをサイドロードしてテストする場所でもあります。 テナントを使って開発する準備ができているかどうかを確認しましょう。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 このプロセスはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n> [!NOTE]\n> サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 有効になっていない場合は、Teams でアプリをローカルでプレビューしてテストすることはできません。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にそうかどうかを確認しましょう。\n\nTeams でアプリをサイドロードできるかどうかを確認します。\n\n1. Teams クライアントで、**[Store]** アイコンを選択します。\n1. **[アプリの管理]** を選択します。\n1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n    > [!NOTE]\n    > Teams でカスタム アプリをアップロードするオプションが表示されない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams アカウントをお持ちでない場合は、無料で取得できます。Microsoft 365 開発者プログラムに参加しましょう。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で、**[E5 サブスクリプションの設定]** を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"Microsoft 365 開発者プログラムにサインアップした後に表示される内容の例\":::\n\n1. 設定した管理者アカウントを使用して Teams にサインインします。 Teams に **[カスタム アプリのアップロード]** オプションがあることを確認します。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得します。\n\nアプリをホストする場合、または Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。開始する前に、無料アカウントを作成 してください。\n\nこれで、すべてのツールの準備とアカウントの設定ができました。 次に、開発環境を設定し、ビルドを開始しましょう。 最初に実行するアプリを選択します\n"
- title: C を使用してタブ アプリのプロジェクト ワークスペースを作成する#
  durationInMinutes: 1
  content: "\n最初のアプリを作成して、Microsoft Teams アプリ開発を開始します。 このアプリは、タブ機能を使用します。\n \n 前提条件を満たしている場合は開始します。\n\n 次の手順は、Visual Studio でタブ アプリのプロジェクト ワークスペースを作成するのに役立ちます\n\n 1. Visual Studio を開きます。\n\n    次のページが表示されます。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/visual-studio.png\" alt-text=\"Visual Studio を開く\":::\n\n 1. [ **新しいプロジェクトの作成**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-create-project.png\" alt-text=\"プロジェクトの作成を選択する\":::\n\n 1. 検索ボックスに **「Teams」** と入力します。\n 1. **Microsoft Teams アプリを** 選択し、[**次へ**] を選択します。\n \n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/enter-teams.png\" alt-text=\"Teams を入力する\":::\n\n    新しいプロジェクトの構成ページが表示されます。\n\n 1. 次の詳細を入力して、新しいプロジェクトを構成します。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/enter-project-name.png\" alt-text=\"プロジェクト名を入力する\":::\n\n     1. プロジェクト名に必要な **プロジェクト名** を入力します。\n     1. プロジェクト ファイルとフォルダーを保存するために必要な場所を選択します。\n     1. **[作成]** を選択します。\n \n    新しい Teams アプリケーション ウィンドウを作成すると、次の画面が表示されます。\n\n 1. **[タブ] を** 選択し、[**作成**] を選択します。   \n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-tab.png\" alt-text=\"[選択] タブ\":::\n\n    Teams タブ アプリが数秒で作成されるようになりました。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/tap-app-in-vs.png\" alt-text=\"プロジェクトの作成\":::     \n\n ## <a name=\"take-a-tour-of-tab-app-source-code\"></a>タブ アプリのソース コードのツアーに参加する\n   \n Teams Toolkit には、アプリをビルドするためのすべてのコンポーネントが備わっています。 プロジェクトを作成した後、ソリューション エクスプローラーの下にプロジェクト フォルダーとファイル **を** 表示できます。  \n\n   :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/solution explorer.png\" alt-text=\"ソリューション エクスプローラー\"::: \n\n 任意の UI フレームワークを自由に選択できますが (またはまったく使用しないように選択することもできますが)、このサンプル テンプレート コードでは、React コンポーネントを使用したスキャフォールディングが提供されます。\n\n Toolkit では、このディレクトリ構造内の項目のうち、次の項目を保持します。\n\n | フォルダー名 | コンテンツ |\n | --- | --- |\n | `.fx/configs` | ユーザーが Teams アプリ用にカスタマイズできる構成ファイル。 |\n | - `.fx/configs/config.<envName>.json` | 環境すべての構成ファイル。 |\n | - `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n | - `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n | - `.fx/states` | Teams Toolkit によって生成されるプロビジョニング出力。  アプリのリソースをプロビジョニングした後にこのフォルダーが Toolkit によって作成されます。 |\n | - `.fx/states/state.<envName>.json` | すべての環境のプロビジョニング出力ファイル。 |\n | - `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密ユーザー データ。 |\n | `templates/appPackage` | アプリ マニフェスト テンプレート ファイルとアプリ アイコン: color.png および outline.png。 |\n | - `templates/appPackage/manifest.template.json` | ローカルまたはリモートの環境でアプリを実行するためのアプリ マニフェスト。  |\n | `templates/azure` | BICEP テンプレート ファイル |\n"
- title: C を使用して最初のタブ アプリをビルドして実行する#
  durationInMinutes: 1
  content: "\nTeams Toolkit を使用してプロジェクト ワークスペースを設定したら、タブ アプリをビルドします。 Microsoft 365 アカウントにサインインする必要があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nMicrosoft 365 アカウントを使用して Teams にサインインします。 Microsoft 365 開発者プログラム テナントを使用している場合は、Microsoft 365 アカウントは、登録中に設定した管理者アカウントです。\n\n1. Solution **Mytabapp** の下にある **Mytabapp** を右クリックします。\n\n1. **Teams Toolkit** >  の [**Teams アプリの依存関係の準備] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/teams-app-dependencies.png\" alt-text=\"Teams アプリの依存関係\":::\n\n1. **Microsoft 365 アカウント** を選択し、[**続行**] を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-m365-account.png\" alt-text=\"Select-M365-account\":::\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio\"></a>Visual Studio でアプリをローカルでビルドして実行する\n\nアプリをローカルに構築して実行するには、以下のようにします。\n\n1. Visual Studio で **F5** または **デバッグ** > **開始デバッグを** 選択して、アプリケーションをデバッグ モードで実行します。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/start-debugging.png\" alt-text=\"デバッグを開始する\":::\n\n   Teams Web クライアントがブラウザー ウィンドウで開きます。\n\n1. メッセージが表示されたら、Microsoft 365 アカウントを使用してサインインします。 \n\n1. ローカル マシン上の Teams にアプリをサイドロードするように求められたら、**[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/select-add.png\" alt-text=\"[追加] を選択する\":::\n\n   おめでとうございます。最初のタブ アプリは Teams で実行されています。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/final-output-vs.png\" alt-text=\"VS の最終的な出力\":::\n\n  <details>\n  <summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\n  Teams でアプリを正常に実行するには、Teams アカウントでサイドローディングが有効になっていることを確認します。 「前提条件」セクションで、サイドローディングの詳細について確認できます。\n\n  </details>   \n       \n"
- title: おめでとうございます!
  durationInMinutes: 1
  content: "\nこれで完了です。\n\nタブ アプリを作成しました。\n\nこれで、基本的なアプリを作成する方法を学習しました。\n\n手順は以上です。 Teams Toolkit によって、アプリのディレクトリ構造に新しい機能のスキャフォールディングが追加されます。 \n\nC# を使用してタブ アプリをビルドするチュートリアルを完了しました。"
