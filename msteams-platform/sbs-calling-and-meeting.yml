### YamlMime:Tutorial
title: Teams の通話と会議ボット
metadata:
  title: 通話と会議を含む Teams ボット
  description: このチュートリアルでは、Teams 用ボットで通話と会議を設定する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 02/08/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/calls-and-meetings/registering-calling-bot.md
  nextTutorialTitle: 通話ボットを登録する
  ms.custom: mvc
  ms.localizationpriority: none
  ms.openlocfilehash: 2a94377f6f2ea7d8faa2366d97b1a2c65d244b96
  ms.sourcegitcommit: e16b51a49756e0fe4eaf239898e28d3021f552da
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 06/04/2022
  ms.locfileid: "65887787"
items:
- durationInMinutes: 1
  content: >
    通話ボットと会議ボットは、クラウド通信 API Graph API を統合することで、通話の作成、通話への参加、通話の転送またはリダイレクト、スケジュールされた会議への参加、参加者の招待などの基本的な機能を提供します。


    ボットは、リアルタイムの音声、ビデオ、画面共有を使用して Teams の通話や会議と対話できます。 通話とオンライン会議用の Microsoft Graph API を使用して、Teams アプリは音声とビデオを使用してユーザーと対話し、エクスペリエンスを強化しました。 これらの API を使用すると、次の新機能を追加できます:


    * 対話型音声応答 (IVR)

    * 呼び出しコントロール

    * デスクトップとアプリの共有を含むリアルタイムのオーディオストリームとビデオ ストリームへのアクセス


    ボットを作成し、Teams アプリでこれらの Graph API を使用するための追加情報とアクセス許可を指定します。


    このステップ バイ ステップ ガイドは、通話機能と会議機能を備えたボットを作成するのに役立ちます。 このチュートリアルの終わりまでに、次の出力を実現できます。


    ![最終的な出力](~/assets/images/calls-and-meetings/final-output.png)
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境を設定してください。  \n\n* [Office 365 テナント](https://developer.microsoft.com/microsoft-365/dev-program)\n* [Ngrok](https://ngrok.com/) または同等のトンネリング ソリューション\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)\n* [.NET Core SDK](https://dotnet.microsoft.com/download) バージョン 3.1\n* アカウントを持つ Microsoft Teams (ゲスト アカウントではありません)\n* すべてのコマンドを実行して [Windows PowerShell](/microsoftteams/teams-powershell-install) をインストールする\n"
- title: 通話と会議ボットのセットアップ
  durationInMinutes: 5
  content: "アプリの Microsoft Azure portal でアプリ登録を使用してアプリケーションを登録し、Microsoft ID プラットフォームと統合し、Microsoft Graph を呼び出します。 次の操作を実行します。\n\n1. ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n1. Azure Bot Service にボットを登録する Azure Bot リソースを作成します。\n1. ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n1. PowerShell を使用してオンライン会議を作成するためのデモ テナント ユーザーのポリシーを作成します。\n1. ダウンストリーム呼び出しの API アクセス許可を追加します。\n1. Azure アカウントでボット チャネル登録を作成します。\n1. Microsoft Teams チャネルを追加して、ボットを Teams チャネルにデプロイします。\n1. 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**ngrok トンネルを作成する:**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Azure にアプリを登録する:**\n\n1. 個人用の Microsoft アカウントを使用して [Azure portal](https://portal.azure.com/) にサインインします。\n1. **Azure Active Directory** サービスを選択し、左側のウィンドウで **[アプリの登録**] を選択し、[**新しい登録**] を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/azure-active-directory.png\" alt-text=\"Azure active directory。\":::\n\n1. **アプリケーションの登録ページが** 開きます。 アプリケーションの登録情報を入力します。\n1. アプリのユーザーに表示されるわかりやすいアプリケーション名を入力 **します** 。\n1. **[サポートされているアカウントの種類**] で、アプリケーションでサポートするアカウントを選択します。\n1. [ **リダイレクト URI** (省略可能)] フィールドで、アプリ **Web またはパブリック クライアント (モバイル & デスクトップ)** の種類を選択し、アプリケーションのリダイレクト URI を入力します。\n\n    > [!NOTE]\n    > Web アプリケーションの場合は、ベース URI を `http://localhost:31544`. パブリック クライアント アプリケーションの場合は、Azure AD がトークン応答を返すために使用する URI を次のように `myapp://auth`指定します。\n\n1. **[登録]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/reg-app.png\" alt-text=\"アプリを登録します。\":::\n\n**クライアント シークレットを作成するには:**\n\n1. ボットの **[概要]** ページで[ **要点** ] を選択し、将来の参照のために **アプリケーション クライアント ID** (Microsoft アプリ ID) を保存します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/microsoft-app-id-new.png\" alt-text=\"Microsoft アプリ ID。\":::\n\n1. [ **管理**] で[ **証明書&シークレット** ] セクションを選択し、[ **クライアント シークレット** ] を選択し、[ **新しいクライアント シークレット**] を選択します。 [ **クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n1. **[説明]** を入力し、**[追加]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/add-client.png\" alt-text=\"クライアント シークレットを追加します。\":::\n\n1. **[値]** の列で、**[クリップボードにコピー]** を選択し、将来参照できるようにクライアント シークレット ID を保存します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/client-secret.png\" alt-text=\"値。\":::\n\n**PowerShell スクリプトを実行してポリシーを作成します。**\n\n1. 次の PowerShell スクリプトを使用して、オンライン会議を作成するためのデモ テナント ユーザーのポリシーを作成します。\n\n    > [!NOTE]\n    > 管理者として Windows PowerShell PSI を実行し、スクリプトを実行します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/powershell-script.png\" alt-text=\"PowerShell スクリプト。\":::\n\n1. ボットの **Microsoft アプリ ID** に置き換え、`object-id`Teams へのログインに使用するアカウントの **テナント ID** に置き換えます `azure-client-id` (次の図に示すようにリンクをコピーすると、取得したリンクで Teams アカウントのテナント ID を確認できます)。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/teams-link-new.png\" alt-text=\"Teams のリンク。\":::\n\n1. PowerShell スクリプトに 、`azure-client-id`、、`policy-description`、`object-id`を追加`PolicyName`します。 PowerShell のプロンプトが表示されたら、Teams アカウントでログインします。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/powershell.png\" alt-text=\"Powershell。\":::\n\n1. PowerShell で次のコマンドを実行して、ポリシーが正常に作成されているかどうかを確認します。 ポリシー名を定義済みのポリシー名に置き換えます。\n\n    ```powershell\n    Get-CsApplicationAccessPolicy -Identity “<<policy-identity/policy-name>>”\n    ```\n\n**ダウンストリーム呼び出しに対する API アクセス許可を追加するには、**\n\n> [!NOTE]\n> アカウントが Microsoft の管理者の同意を付与できることを確認します。 アクセス許可を追加した後、同意の状態を確認する場合に選択します `Grant admin consent for Microsoft` 。\n\n1. ボットの **[管理** ] ウィンドウで、[ **API アクセス許可**] を選択します。\n1. [**アクセス許可を追加**] を選択します。 **[要求 API のアクセス許可** ] ウィンドウが表示されます。\n1. **Microsoft API を** 選択し、**Microsoft Graph** を選択します。\n1. **[アプリケーションのアクセス許可**] を選択し、アクセス許可を選択します。\n1. Azure App に次の Graph API アプリケーションのアクセス許可を追加し、管理者の同意を付与します。\n    * `Calls.AccessMedia.All`\n    * `Calls.Initiate.All`\n    * `Calls.InitiateGroupCall.All`\n    * `Calls.JoinGroupCall.All`\n    * `Calls.JoinGroupCallAsGuest.All`\n    * `OnlineMeetings.ReadWrite.All`\n1. **[アクセス許可の追加]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/add-api-permissions.png\" alt-text=\"API アクセス許可を追加します。\":::\n\n**Azure アカウントでボット チャネル登録を作成する:**\n\n1. [Azure portal を開きます](https://portal.azure.com/)。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスで **Azure Bot** を検索します。\n1. **Azure Bot** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/azure-bot-homepage.png\" alt-text=\"Azure ボット カード。\":::\n\n1. **[作成]** を選択します。\n1. **[ボット ハンドル]** フィールドでボット ハンドル名を入力します。\n1. ドロップダウン リストから **[サブスクリプション]** を選択します。\n1. ドロップダウン リストから **[リソース グループ]** を選択します。\n\n    新しいリソース グループを作成するには、[ **新規作成**] を選択し、リソース名を入力 **し、[OK] を** 選択し、[ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/create-azure-bot.png\" alt-text=\"Azure Bot を作成します。\":::\n\n1. **Microsoft アプリ ID** の **マルチテナント** として **アプリ種類** を選択します。\n\n    > [!NOTE]\n    > Microsoft App ID セクションでは `Creation type` 、 `Create new Microsoft App ID` 新しいボットを作成するために既に選択されています。 ボットを既に登録している場合は、選択 `Use existing app registration`することもできます。 フィールドに `Existing app id` Microsoft アプリ ID を入力し、フィールドに値を `Existing app password` 入力します。\n\n1. **[既存のアプリの登録を使用** する] を選択し、デモ テナントに登録されている Azure アプリのアプリ **ID** とアプリ **シークレット** を入力します。\n1. **[確認 + 作成]** を選びます。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/review-create.png\" alt-text=\"マルチテナント。\":::\n\n1. 検証に合格した場合は、**[作成]** を選択します。\n\n   ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/validation.png\" alt-text=\"検証。\":::\n\n1. [**リソースに移動**] を選びます。 ボットと関連リソースがリソース グループに一覧表示されます。\n\n    これで、Azure ボットが作成されました。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/go-to-resource.png\" alt-text=\"リソースに移動します。\":::\n\n**Microsoft Teams チャネルに追加するには:**\n\n1. **[ホーム]** に移動します。\n1. **[最近使ったリソース]** セクションに一覧表示されているボット開きます。\n1. 左側のウィンドウで **[チャネル**] を選択し、**Microsoft Teams** を選択します。 <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/> 使用可能なチャネルの一覧から選択できます。    \n    \n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/channels-teams.png\" alt-text=\"チャネル Teams。\":::\n\n1. サービス利用規約に同意するチェック ボックスをオンにし、**[承諾する]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/terms-of-service.png\" alt-text=\"サービスの利用規約。\":::\n\n1. **[保存]** を選択します。\n1. **Microsoft Teams を** 選択し、Teams チャネル ページの [**通話**] タブを選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/configure-teams.png\" alt-text=\"Teams を構成します。\":::\n\n1. [ **呼び出しを有効にする]** を選択し、HTTPS ngrok URL で **Webhook** を更新します (https://yourNgrok/api/callback) 最後に追加 `/api/callback` します)。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/enable-calling.png\" alt-text=\"呼び出しを有効にします。\":::\n\n1. **[保存]** を選択します。\n\n**メッセージング エンドポイントを追加するには:**\n\n1. ボットの **ホーム** ページに移動し、左側のウィンドウの **[設定]** で **[構成**] を選択します。\n1. ngrok に移動します。\n1. 次の図に示すように、HTTPS URL (https から io) をコピーします。\n    \n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/ngrok.png\" alt-text=\"Ngrok。\":::\n\n1. **メッセージング エンドポイント** で、ngrok から使用できる HTTPS URL を追加し、URL の最後に **/api/messages** を追加します。\n    \n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/messaging-endpoint.png\" alt-text=\"メッセージング エンドポイント。\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot Service でボットを正常に設定したので、ボット サービス接続を設定する必要があります。\n"
- title: Teams アプリ パッケージを更新して作成する
  durationInMinutes: 1
  content: "Microsoft Teams で会話型ボットを認証し、Teams アプリ パッケージを作成して組織にアップロードする方法を理解するようにボット サンプルを構成します。\n\n1. Visual Studio で appsettings.json を更新します。\n1. Visual Studio で manifest.json を更新し、エクスプローラーで zip ファイルに圧縮します。\n\n**Bot を呼び出すための appsettings を更新します。**\n\n1. リポジトリ https://github.com/OfficeDev/Microsoft-Teams-Samples.gitに移動します。\n1. [ **コード** ] を選択し、ドロップダウンを選択します。\n1. [ **ZIP のダウンロード**] を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/repo-download.png\" alt-text=\"リポジトリのダウンロード。\":::\n\n1. ダウンロードされたリポジトリのパスを確認してください。\n1. **エクスプローラー** で、**Microsoft-Teams-Samples-main** > **サンプル** > **ボット呼び出し会議** > **csharp** フォルダーに移動します。\n1. Visual Studio で **appsettings.json** ファイルを開き、ボットの構成を更新します。\n\n    * ボットの `MicrosoftAppId` 構成ページから取得できます。 以前 `MicrosoftAppPassword` に保存したクライアント シークレット ID の値です。\n    * Teams へのログインに `Tenant ID` 使用するアカウントのリンクから取得または `UserId` 取得できます。 イメージ内のパスに従って、次の `tenant id`リンクを取得します。\n    \n        :::image type=\"content\" source=\"./assets/images/calls-and-meetings/teams-link-new.png\" alt-text=\"Teams のリンク。\":::\n    \n    * [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) サイトから取得`DisplayName``UserId`できます。\n        * Teams アカウントを使用してページにログインし、検索ボックスに URl の末尾に追加 `Users` し、[クエリの **実行**] を選択します。\n        * アカウントにリンクされた表示名とユーザー ID が生成されます。\n        * 3 つのアカウントを選択し、appsettings.json に追加`DisplayName``UserId`します。\n\n        :::image type=\"content\" source=\"./assets/images/calls-and-meetings/graph-explorer.png\" alt-text=\"グラフ エクスプローラー。\":::\n\n    > [!NOTE]\n    > `Tenant ID`または `UserId` Teams アカウントは通話を開始する場所を示し`DisplayName``UserId`、ユーザーは通話をリダイレクトまたは転送する相手を示します。\n\n1. 、 `ClientId``AppId` **アプリケーション (クライアント) ID**、および `MicrosoftAppPassword``ClientSecret``AppSecret` **Value** に置き換えます`MicrosoftAppId`。\n1. URL を使用して更新 `BotBaseUrl` します `ngrok` 。\n1. 更新 `Tenant ID` と `UserId`.\n1. 更新 `DisplayName` と `UserId`.\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/appsettings.png\" alt-text=\"Appsettings Json。\":::\n\n1. **[保存]** を選択します。\n\n**マニフェストを更新するには:**\n\n1. **エクスプローラー** で、**Microsoft-Teams-Samples-main** > **サンプル** > **ボット呼び出し会議** > **csharp** > **マニフェスト** フォルダーに移動します。\n1. `manifest.json` ファイルを Visual Studio で開きます。\n1. ファイルで `manifest.json` **{id}、{BotId}** を見つけて、Microsoft アプリ ID を追加します。\n1. https:// を除く **validDomains** に ngrok URL を追加して保存します。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/manifest.png\" alt-text=\"マニフェスト。\":::\n\n1. **作成**`manifest.zip`するマニフェスト フォルダーの内容を zip 化します。\n\n    > [!NOTE]\n    > その `manifest.zip` 中に追加のフォルダーを含めてはなりません。 zip フォルダー内には `manifest json` 、ソース ファイル、 `color` アイコン、アイコン `outline` が含まれている必要があります。\n    > 組織または Teams アカウントのデモ テナントにマニフェストをアップロードし、Visual Studio でソリューションを実行します。\n\n1. Teams に移動します。\n1. アップロード `manifest.zip`するには、 **ストア > [アプリの管理] > [カスタム アプリのアップロード** ] を選択し、エクスプローラーのリポジトリ フォルダーから開 `manifest.zip` きます。\n1. [ **追加]** を選択して、Teams に通話ボットをインストールします。\n\n    :::image type=\"content\" source=\"./assets/images/calls-and-meetings/output.png\" alt-text=\"出力を追加します。\":::\n\n    このボットは、Visual Studio でのデバッグ後に操作できます。\n"
- title: 通話ボットと会議ボットとの対話
  durationInMinutes: 2
  content: >
    ボットを使用すると、チャネル内またはチャット内の専用スペース内のサービスやコンテンツにアクセスできます。


    ボットを使用するには、次の手順に従います。


    1. Teams の左側のウィンドウで省略記号 ●●● を選択し、一覧からアプリを選択します。

    1. ボットは、次に示すように、アダプティブ カードを含むウェルカム テキストを送信します。

        :::image type="content" source="./assets/images/calls-and-meetings/bot-with-adaptive-card.png" alt-text="ボットのアダプティブ カード。":::

    1. ボットに呼び出しの作成を依頼できます。

        :::image type="content" source="./assets/images/calls-and-meetings/placed-call.png" alt-text="発信された呼び出し。":::

    1. ボットに通話の転送を依頼できます。

        :::image type="content" source="./assets/images/calls-and-meetings/transfer-call.png" alt-text="通話を転送します。":::

    1. 会議をスケジュールし、参加者を招待するようにボットに依頼できます。

        :::image type="content" source="./assets/images/calls-and-meetings/meeting.png" alt-text="会議ボット。":::
- title: チャレンジを完了する
  durationInMinutes: 1
  content: >
    このようなことを思い付いたのですか?


    ![最終的な出力](~/assets/images/calls-and-meetings/final-output.png)
- content: Microsoft Teams のボット通話と会議アプリの使用を開始するためのチュートリアルを完了しました。
