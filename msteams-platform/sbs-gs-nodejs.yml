### YamlMime:Tutorial
title: Node.js を使用して初めてのアプリを構築する
metadata:
  title: Hello World with Node.js
  description: このチュートリアルでは、このチュートリアルで Hello World アプリをビルドする方法についてNode.js。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: '[概要] に戻る'
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 38f93f7da8dd2218edbeacc711b7eb592ff5fca3
  ms.sourcegitcommit: 9e448dcdfd78f4278e9600808228e8158d830ef7
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/17/2022
  ms.locfileid: "62059638"
items:
- durationInMinutes: 1
  content: >
    タブMicrosoft Teamsボット、およびメッセージ拡張機能機能を使用して最初のアプリを構築することで、アプリ開発の開始を開始します。


    >このアプリにはすべての機能が含まれるので、それぞれ独自の UI と UX があります。


    :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png" alt-text="このアプリを示す図には、3 つの機能があります。" border="false":::


    このチュートリアルでは、次の情報を学習します。


    - コマンド ライン ツールを使用して新しいプロジェクトをセットアップする方法。

    - タブ、ボット、メッセージ拡張機能など、それぞれ異なる機能を持つ 3 つのアプリを構築する方法。

    - 開発者ポータルからアプリを展開する方法
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリを構築および展開するためにインストールする必要があるツールの一覧をTeamsします。\n\n| &nbsp; | インストール | using... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Node.js NPM](https://nodejs.org/) | バック エンド JavaScript ランタイム環境。 最新の v14 LTS リリースを使用します。|\n| &nbsp; | [ngrok](https://ngrok.com/download) | Teams機能 (会話型ボット、メッセージング拡張機能、受信 Webhook) では、受信接続が必要です。 トンネルは、開発システムをネットワークに接続Teams。 タブのみを含むアプリには必要ありません。 このパッケージは、(npm を使用して) プロジェクト ディレクトリ内にインストールされます `devDependencies` 。 |\n| &nbsp; | [Microsoft Edge](https://www.microsoft.com/edge) (推奨) または[Google Chrome](https://www.google.com/chrome/) | 開発者ツールを含むブラウザー。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript、または SharePoint Framework (SPFx) ビルド環境。 バージョン 1.55 以降を使用します。 |\n| &nbsp; | [Git](https://git-scm.com/downloads) | Git を使用して、サンプル Node.jsアプリリポジトリを使用GitHub。 |\n| &nbsp; |  [gulp](https://gulpjs.com/docs/en/getting-started/quick-start) | オープンソースの JavaScript ツールキット。 バージョン 4.0.0 以降をインストールします。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/en-us/microsoft-teams/download-app) | Microsoft Teamsチャット、会議、通話のアプリを通じて、作業しているすべてのユーザーと共同作業を 1 か所で行います。 | \n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) Visual Studio Code[および Azure CLI](/cli/azure/install-azure-cli) | Azure ツールを使用して、保存されたデータにアクセスしたり、Azure でアプリのクラウド ベースのバックエンドTeams展開したりします。 |\n| &nbsp; | [React Chrome 用開発者ツールまたはエッジ](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)[React開発者向けツール](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | JavaScript を使用したタブ開発用のブラウザー ツール。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graphエクスプローラーは、Microsoft のデータからクエリを実行できるブラウザー ベースのGraphです。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | Web ベースのポータルを使用して、組織や組織Teamsストアにアプリを構成、管理、配布Teamsします。 |\n| &nbsp; | **Visual Studio Code拡張機能** | &nbsp; |\n| &nbsp; | [Azure Functions コア ツール](/azure/azure-functions/functions-run-local) | ローカル デバッグの実行中にローカルでバックエンド コンポーネント (Azure でサービスを実行するときに必要な認証ヘルパーを含む)。 プロジェクト ディレクトリ内にインストールされます (npm を使用 `devDependencies` )。 |\n| &nbsp; | [.NET SDK](/dotnet/core/install/) | ローカル デバッグと Azure Functions アプリの展開用にカスタマイズされたバインド。 .NET 3.1 (以降) SDK をグローバルにインストールしていない場合は、ポータブル バージョンをインストールできます。 |\n\n## <a name=\"verify-version-numbers-for-installed-tools\"></a>インストールされているツールのバージョン番号を確認する\n\n次のコマンドを使用して、ツールにインストールされているバージョンが必要な場合に確認します。\n\n> [!NOTE]\n> プラットフォームで最も快適なターミナル ウィンドウを使用します。 これらの例では、Git Bash (Git インストールに含まれる) を使用しますが、これらのスクリプトはほとんどのプラットフォームで実行されます。\n\nインストールされているツールのバージョン番号を確認するには、次の手順を実行します。\n\n1. ターミナル ウィンドウを開きます。 \n2. 次のコマンドを実行して、コンピューターに `git` インストールされているバージョンを確認します。\n\n    ```bash\n    $ git --version\n    ```\n\n    出力例: `git version 2.19.0.windows.1`\n    \n3. 次のコマンドを実行して、バージョンを `node.js` 確認します。\n    \n    ```bash\n    $ node -v\n    ```\n\n    出力例: `v8.9.3`\n\n4. 次のバージョン番号を確認します `npm` 。\n\n    ```bash\n    $ npm -v\n    ```\n\n    出力例: `5.5.1`\n\n5. 次のバージョン番号を確認します `gulp` 。\n    \n    ```bash\n    $ gulp -v\n    ```\n\n    出力例:  `CLI version 2.3.0`\n    \n    `Local version 4.0.2`\n\n6. 次のコマンドを実行して、バージョン番号を確認Visual Studio Code。\n\n    ```bash\n    code --version\n    ```\n\n    出力例:  `1.28.2`\n    \n    `929bacba01ef658b873545e26034d1a8067445e9`\n\nこれらのアプリケーションの別のバージョンを問題なく使用できます。\n\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>開発テナントTeams設定する\n\nテナント **は**、チャット、ファイルの共有、会議の実行を行う、Teamsのスペース、または組織のコンテナーに似たものになります。\nこの領域は、アプリのサイドロードとテストも行う場所です。 \n\nテナントを使用して開発する準備ができていることを確認します。\n\n### <a name=\"enable-sideloading-option\"></a>サイドローディング オプションを有効にする\n\nアプリを作成した後、アプリを配布せずにアプリTeams読み込む必要があります。 このプロセスはサイドローディングと呼ばれる。 このオプションを表示するには、Microsoft 365アカウントにサインインします。\n  \nテナントが既に存在し、管理者アクセス権を持っていますか? 本当に行うのか確認しましょう!\n\n次の手順でアプリをサイドロードTeams。\n\n1. クライアントで、[Teams] アイコン **を選択** します。\n1. [アプリ **の管理] を選択します**。\n1. カスタム アプリを作成する **アップロード探します**。 オプションが表示された場合は、サイドローディング アプリが有効になります。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、カスタム アプリをアプリにアップロードするTeams。\":::\n\n    > [!NOTE]\n    > カスタム Teamsをアップロードするオプションが表示されていない場合は、管理者にTeamsしてください。\n\n### <a name=\"create-a-free-teams-developer-tenant\"></a>無料の開発者テナントTeams作成する\n\n開発者アカウントを持Teams場合は、無料で利用できます。 開発者プログラムMicrosoft 365参加してください。\n\n1. 開発者プログラムの[Microsoft 365に移動します](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. [今 **すぐ参加] を** 選択し、画面の指示に従います。\n1. ようこそ画面で **、[E5 サブスクリプションの設定] を選択します**。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"開発者プログラムにサインアップした後に表示されるMicrosoft 365例。\":::\n\n1. セットアップしTeams管理者アカウントを使用してサインインします。 カスタム アプリ オプションがアップロード **が設定** Teams。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得する\n\nアプリをホストするか、Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。 [開始する前に無料アカウント](https://azure.microsoft.com/free/) を作成します。\n\nこれで、すべてのツールが手に入り、アカウントを設定できます。 次に、開発環境をセットアップし、構築を開始しましょう。\n\nこのターミナル ウィンドウを引き続き使用して、このチュートリアルに従うコマンドを実行できます。\n\n<a name=\"DownloadSample\"></a>\n\n## <a name=\"download-the-sample\"></a>サンプルをダウンロードする\n\nこのチュートリアルでは、Hello、 [World を使用します。](https://github.com/OfficeDev/Microsoft-Teams-Samples/tree/main/samples/app-hello-world/nodejs) サンプルを使用して開始します。 このファイルは、ファイルからダウンロードして複製GitHub。\n\n**Git Bash を使用してサンプル リポジトリを複製するには、次の操作を行います**。\n\n1. ターミナル ウィンドウを開きます。\n1. 次のコマンドを実行して、サンプル リポジトリをコンピューターに複製します。\n\n    ```bash\n    git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git\n    ```\n\n> [!TIP]\n> このレ[ポを](https://help.github.com/articles/fork-a-repo/)フォーク[すると](https://github.com/OfficeDev/Microsoft-Teams-Samples)、将来の参照のために変更を加え、GitHubを確認できます。\n"
- title: 最初のアプリをNode.jsする
  durationInMinutes: 1
  content: "\nサンプル アプリのリポジトリを複製Node.js、ローカル環境でアプリをビルドしてテストできます。\n\nこのページでは、次の方法について学習します。\n1. [最初のアプリをビルドして実行する](#build-and-run-the-sample)\n1. [サンプル アプリをテストする](#test-your-sample-app-in-local-environment)\n\n\n## <a name=\"build-and-run-the-sample\"></a>サンプルの構築と実行\n\nリポジトリが複製された後、サンプル アプリをビルドできます。\n\n1. ターミナル ウィンドウを開きます。\n1. ターミナルでディレクトリの変更コマンドを実行して、サンプル アプリ ディレクトリに変更します。\n\n    ```bash\n    cd Microsoft-Teams-Samples/samples/app-hello-world/nodejs/\n    ```\n\n1. 次のコマンドを使用して、すべての依存関係をインストールします。\n\n    ```bash\n    npm install\n    ```\n\n    多くの依存関係がインストールされているのが表示されます。\n\n1. インストールが完了したら、次のコマンドを使用してアプリを実行します。\n\n    ```bash\n    npm start\n    ```\n\n    Hello World アプリが起動すると、ターミナル `App started listening on port 3333` ウィンドウに表示されます。\n\n    > [!NOTE]\n    > 上記のメッセージに別のポート番号が表示される場合は、PORT 環境変数が設定されているためです。 引き続きそのポートを使用するか、環境変数を 3333 に変更できます。\n\n1. ブラウザー ウィンドウを開き、次の URL を使用して、すべての Hello World アプリ URL が読み込み中か確認します。\n\n    - `http://localhost:3333`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host.png\" alt-text=\"ローカル ホストNode.jsを示す画像\" border=\"false\":::\n\n    - `http://localhost:3333/hello`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-hello-nodejs.png\" alt-text=\"ローカル ホストのNode.jsを示す画像\" border=\"false\":::\n\n    - `http://localhost:3333/first`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-first-nodejs.png\" alt-text=\"[ローカル ホストNode.js] タブを示すイメージ\" border=\"false\":::\n\n    - `http://localhost:3333/second`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-second-nodejs.png\" alt-text=\"[ローカル ホストNode.js 2 番目のタブを示すイメージ\" border=\"false\":::\n\n## <a name=\"test-your-sample-app-in-local-environment\"></a>ローカル環境でサンプル アプリをテストする\n\nアプリケーション内のアプリMicrosoft Teams 1 つ以上の機能を公開する Web アプリケーションです。 アプリをインターネット上で使用して、Teamsを読み込む。 インターネットからアプリにアクセスするには、アプリを *ホストする* 必要があります。\n\nローカル テストでは、ローカル コンピューターでアプリを実行し、Web エンドポイントを使用してトンネルを作成できます。 [ngrok](https://ngrok.com) は無料のツールで、それを実行できます。 *ngrok を使用* すると、次のような Web アドレスを取得できます `https://d0ac14a5.ngrok.io` (この URL は単なる例です)。 環境に [合った](https://ngrok.com/download) *ngrok をダウンロード* してインストールできます。 必ず、 の場所に追加してください `PATH` 。\n\n### <a name=\"create-ngrok-tunnel\"></a>ngrok トンネルの作成\n\nngrok をインストールした後、アプリをローカルに展開するトンネルを作成できます。\n\n1. 新しいターミナル ウィンドウを開きます。\n1. トンネルを作成するには、次のコマンドを実行します。 サンプル アプリでは、ポート 3333 を使用します。\n\n    ```bash\n    ngrok http 3333 -host-header=localhost:3333\n    ```\n    ngrok トンネルが作成されます。 ngrok トンネルの例を次に示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel.png\" alt-text=\"ngrok トンネルを示す画像\" border=\"false\":::\n\n    *Ngrok は* インターネットからの要求をリッスンし、ポート 3333 で実行されているアプリにルーティングします。\n\nアプリのローカル展開を確認するには、次の手順を実行します。\n\n1. ブラウザーを開きます。\n1. 次の URL を使用してアプリを読み込む。\n\n    `https://<forwarding address in ngrok console session>/`\n\n    URL の例を次に示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel-verify.png\" alt-text=\"ngrok トンネルnode.jsローカルで実行されているアプリを示す画像\" border=\"false\":::\n\n    アプリの別のタブ ページを表示するには、ngrok トンネル URL に 、追加、、 `hello` `first` `second` または追加できます。\n\n    Ngrok はインターネットからの要求をリッスンし、ポート 3333 で実行されているアプリにルーティングします。        \n\n1. ngrok コンソールで転送アドレスをメモします。 アプリをアプリに展開するには、この URL がTeams。\n\n    > [!NOTE]\n    > ビルドと実行時に別のポート [](#build-and-run-the-sample)を使用した場合は、同じポート番号を使用して *ngrok トンネルをセットアップ* してください。\n    > [!TIP]\n    > 別のターミナル ウィンドウで *ngrok* を実行して、ノード アプリを妨げることなく実行し続け、後で停止、再構築、再実行が必要になる場合があります。 *ngrok セッションは*、このウィンドウで有用なデバッグ情報を返します。 有料バージョンの *ngrok では、永続的な* 名前を使用できます。\n\n    >[!IMPORTANT] \n    > 無料バージョンの ngrok を使用する場合、アプリは開発マシン上の現在のセッション中にのみ利用できます。 コンピューターがシャットダウンまたはスリープ状態に切り込む場合は、使用できません。 サービスを再起動すると、新しいアドレスが返されます。 次に、古いアドレスを使用する場所を更新する必要があります。 テスト用にアプリを共有する場合は、この手順に注意してください。\n\n<a name=\"DeployToTeams\"></a>\n\n## <a name=\"build-nodejs-app-package\"></a>アプリ パッケージNode.jsビルドする\n\nアプリ パッケージを `gulp CLI` ビルドして、アプリ パッケージを作成Node.js。\n\n1. ターミナル ウィンドウを開きます。\n1. 複製先のディレクトリに存在 `node.js` する必要があります。 これは、配置される `gulpfile.js` フォルダーです。 \n1. 次のコマンドを実行して、アプリ パッケージNode.jsします。\n\n    ```$ gulp```\n\n    コマンド出力の例を次に示します。\n\n    `[13:39:27] Using gulpfile ~\\documents\\github\\msteams-samples-hello-world-nodejs\\gulpfile.js`\n\n    `[13:39:27] Starting 'clean'...`\n\n    `[13:39:27] Starting generate-manifest'...`\n\n    `[13:39:27] Finished 'generate-manifest' after 11 ms`\n\n    `[13:39:27] Finished 'clean after 21 ms`\n\n    `[13:39:27] Starting 'default'...\n    Build completed. Output in manifest folder`\n\n    `[13:39:27] Finished 'default' after 62 μs`\n\n    アプリ パッケージがhelloworldapp.zipされます。 パッケージ ファイルは、次のパスで確認できます。\n\n    `<path to the cloned repo>/Microsoft-Teams-Samples/samples/app-hello-world/nodejs/manifest`\n\n    > [!NOTE]\n    > 使用しているツールで場所がhelloworldapp.zip場合は、アプリ パッケージ ファイルを検索します。\n"
- title: 開発者ポータルを使用Node.jsアプリを構成する
  durationInMinutes: 1
  content: "\n開発者ポータルを[使用して](https://dev.teams.microsoft.com/)、アプリ パッケージをアップロードして、アプリTeams構成できます。 開発者ポータルは、Teamsの作成と登録を簡略化するアプリです。 ストアからインストールTeams!\n\nアプリをビルドしてテストTeams、開発者ポータルを使用してアプリを構成およびプレビューできます。\n\nアプリ パッケージの更新には、次の内容が含まれます。\n\n1. [アプリ パッケージを開発者ポータルにインポートする](#import-the-app-package-to-developer-portal)\n1. [アプリ機能の構成](#configure-your-apps-capabilities)\n\n### <a name=\"import-the-app-package-to-developer-portal\"></a>アプリ パッケージを開発者ポータルにインポートする\n\nアプリ パッケージをインポートするには、次の方法を実行します。\n\n1. Microsoft Teams を開きます。\n\n1. 左側の **バーから** :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-store-icon.png\"::: [ストア] アイコンを選択します。\n\n1. 検索バー **で開発者ポータル** を検索し、[**Developer Portal***] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-dev-portal-app.png\" alt-text=\"[開発者ポータル アプリ] の選択\" border=\"false\":::\n\n1. [**開く**]を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/open-dev-portal.png\" alt-text=\"開いている開発者ポータル アプリを示す画像\" border=\"false\":::\n\n    開発者ポータルが開きます。\n\n1. [アプリ] **タブを選択** します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-app.png\" alt-text=\"開発者ポータル アプリ\" border=\"false\":::\n\n1. [アプリ **のインポート] を選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/import-app-in-dev-portal.png\" alt-text=\"[アプリのインポート] ボタンを示す画像\" border=\"false\":::\n\n1. アプリ パッケージを開 **helloworldapp.zip、** サンプルの repo ディレクトリ構造C#パスから開きます。\n\n    `<path to cloned node.js sample repo>\\Source\\Repos\\Microsoft-Teams-Samples\\samples\\app-hello-world\\nodejs\\manifest`\n\n    **Hello World アプリ** は開発者ポータルにインポートされます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/app-imported-dev-portal.png\" alt-text=\"アプリがアプリにインポートされた状態を示Teams\" border=\"false\":::\n\n    アプリを開発者ポータルにインポートした後、開発者ポータルで詳細を表示できます。\n\n### <a name=\"take-a-tour-of-your-app-in-developer-portal\"></a>開発者ポータルでアプリのツアーを行う\n\nアプリを開発者ポータルにインポートした後、マニフェスト ファイルなどの詳細を表示できます。\n\n#### <a name=\"view-app-information\"></a>アプリ情報の表示\n\n1. 開発者ポータル **の左側の** ウィンドウから [基本情報] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-left-pane-basic.png\" alt-text=\"イメージは、開発者ポータルの左側のウィンドウを示しています\" border=\"false\":::\n\n1. 基本情報から次の情報に注意してください。\n    - アプリ ID\n    - 開発者情報\n    - アプリの URL\n\n1. 左側 **のウィンドウから** [ブランド化] を選択して、ブランド化情報を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-app-branding.png\" alt-text=\"アプリのブランド情報を示す画像\" border=\"false\":::\n\n    これらの詳細は、配布用の新しいアプリを作成する場合に重要です。\n\n#### <a name=\"view-app-features\"></a>アプリの機能を表示する\n\n- 開発者ポータル **の左側の** ウィンドウから [アプリの機能] を選択します。\n\n    アプリの機能が右側のウィンドウに表示されます。 個人用アプリ、ボット、およびメッセージ拡張機能のカードを表示できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-csharp-app-features.png\" alt-text=\"アプリの機能を示す画像\" border=\"false\":::\n\n#### <a name=\"view-the-app-manifest\"></a>アプリ マニフェストの表示\n\nマニフェスト ファイルを使用して、アプリの機能、必要なリソース、その他の重要な属性を構成します。\n\n- 左側 **のパネルから** [発行] を選択してドロップダウン リストを開き、[アプリ パッケージ] **を選択します**。\n\n    アプリ マニフェストが右側のウィンドウに表示されます。\n    \n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-app-manifest.png\" alt-text=\"開発者ポータルでアプリ マニフェスト ファイルを示す画像\" border=\"false\":::\n\n    マニフェスト ファイルが右側のウィンドウに表示されます。\n\n### <a name=\"configure-your-apps-capabilities\"></a>アプリの機能を構成する\n\nアプリを開発者ポータルにインポートした後、次にアプリの機能を構成します。 開発者ポータルには、さまざまなセクションのすべてのアプリ情報が含まれている。 これにより、アプリの機能を簡単に構成できます。\n\n開発者ポータルを使用すると、次のコマンドを実行できます。\n1. [個人用タブ アプリの構成](#configure-personal-tab-app)\n1. [ボットの構成](#configure-bot)\n1. [メッセージ拡張機能の構成](#configure-message-extension)\n\n#### <a name=\"configure-personal-tab-app\"></a>個人用タブ アプリの構成\n\n個人用タブ アプリを構成するには、次の手順を実行します。\n\n1. [アプリ機能 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: ] ウィンドウの **[個人用** アプリ カード] のアイコン **を選択** し、[編集] を **選択します**。\n\n    [Hello] タブの詳細が表示されます。\n\n1. [Hello] :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: タブのアイコンを選択し、[編集] を選択して、更新するアプリの詳細を開きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-edit-tab.png\" alt-text=\"[Hello] タブ メニューを示す画像\" border=\"false\":::\n\n1. [個人用アプリにタブを追加する] の [Hello] タブ **のアプリの詳細を入力します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-add-tab.png\" alt-text=\"Hello タブの詳細を示す画像\" border=\"false\":::\n\n    次の詳細を入力します。\n    - **名前**: [こんにちは] タブ。\n    - **コンテンツ URL** と **Web サイトの URL**: ngrok コンソール セッションの転送アドレス。\n    - **コンテキスト**: [個人] **タブを選択します**。\n\n1. **[更新]** を選択します。\n\n    [Hello] タブの詳細が [個人用アプリ] **ウィンドウに表示** されます。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-save.png\" alt-text=\"保存する Hello タブの詳細を示す画像\" border=\"false\":::\n\n    [ **個人用アプリ] ウィンドウ** に、新しいタブと自動的に作成された [概要] タブが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-saved.png\" alt-text=\"[Hello] タブと [概要] タブの詳細を示す画像\" border=\"false\":::\n\n#### <a name=\"configure-bot\"></a>ボットの構成\n\nボット機能をアプリに簡単に追加できます。 Hello World サンプル アプリには、既にサンプルの一部としてボットが含Teams。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-no-id.png\" alt-text=\"アプリ ID を使用してインポートされたボット アプリを示す画像\" border=\"false\":::\n\nサンプルからインポートされたボットには、関連付けられたアプリ ID が含まれません。 削除し、新しいボットを作成する必要があります。 開発者ポータルは、新しいアプリ ID を作成し、アプリ ID Teams。\n\nボットを追加および構成するには、次の手順を行います。\n\n1. [新しいボットの追加](#to-add-a-new-bot)\n1. [アプリへのボットの追加](#to-add-bot-to-app)\n1. [ボット スコープの構成](#to-configure-bot-scope)\n\n##### <a name=\"to-add-a-new-bot\"></a>新しいボットを追加するには\n\n1. [アプリ機能 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: ] ウィンドウの **ボット** カードのアイコン **を** 選択し、[削除] を **選択します**。\n\n1. [機能 **を追加** するツール] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/tools-option.png\" alt-text=\"[ツール] オプションを示す画像\" border=\"false\":::\n\n1. [ツール **] ウィンドウで [** ボットの **管理] を** 選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-tools-bot-card.png\" alt-text=\"ボット管理ウィンドウを示す画像\" border=\"false\":::\n\n1. [ **ボット管理] ウィンドウで [+** 新 **しいボット] を選択** します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-management-new-bot.png\" alt-text=\"新しいボット オプションを示す画像\" border=\"false\":::\n\n1. ボットに適した名前を入力し、[追加] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot.png\" alt-text=\"ボットを追加する方法を示す画像\" border=\"false\":::\n\n    [ **構成]** ウィンドウが表示され、左側のウィンドウに新しいボットの詳細が表示されます。\n\n1. コンソールから転送 URL を入力し `ngrok` 、[保存] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-endpoint.png\" alt-text=\"ボット エンドポイントを追加する方法を示す画像\" border=\"false\":::\n\n1. [ **クライアント シークレット] を選択** し、[ **ボットに** クライアント シークレットを追加する] を選択して、ボットのパスワードを生成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-client-secrets.png\" alt-text=\"[クライアント シークレット] セクションを示す画像\" border=\"false\":::\n\n    開発者ポータルは、ボットのパスワードを生成します。\n\n    アイコンを使用して :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/copy-icon.png\"::: パスワードをコピーできます。 このチュートリアルでは、コピーする必要があります。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-client-secret-generated.png\" alt-text=\"生成されたクライアント シークレットを示すイメージ\" border=\"false\":::\n\n1. **[OK]** を選択します。\n\n1. [ボット **<を選択して** 、ボット管理 **ウィンドウに戻** ります。\n\n    [ **ボット管理]** ウィンドウには、アプリ ID で追加された新しいボットが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-added.png\" alt-text=\"アプリ ID を持つ新しいボットを示す画像\" border=\"false\":::\n\n1. [クライアント シークレット] セクションのパスワードと共にボット ID **を保存してください** 。\n\n##### <a name=\"to-add-bot-to-app\"></a>ボットをアプリに追加するには\n\n1. [アプリの **機能] ウィンドウを** 開き、ボット カード **を選択** します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-card.png\" alt-text=\"ボット カードを示す画像\" border=\"false\":::\n\n    [ **ボット]** ウィンドウが表示されます。\n\n1. [既存のボットの選択] からボット **アプリを選択し**、[保存] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-select-bot-app.png\" alt-text=\"既存のボット アプリを選択する方法を示す画像\" border=\"false\":::\n\n    新しいボットは、独自のアプリ ID を使用してアプリに追加されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-new-bot-added.png\" alt-text=\"アプリに追加された新しいボットを示す画像\" border=\"false\":::\n\n##### <a name=\"to-configure-bot-scope\"></a>ボット スコープを構成するには\n\n1. 新しい :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: ボット カードのアイコンを **選択し** 、[編集] を **選択します**。\n\n1. [ボット] ウィンドウ **を移動** して [コマンド] **セクションを表示** し **、[+ コマンドの追加] を選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-add-command.png\" alt-text=\"[コマンド] セクションを示す画像\" border=\"false\":::\n\n1. コマンドの適切な名前と説明を **入力します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot-command.png\" alt-text=\"コマンドの詳細を追加する方法を示す画像\" border=\"false\":::\n\n1. コマンドの 3 つのスコープをすべて選択し、[追加] を **選択します**。\n    - **個人用**\n    - **チーム**\n    - **グループ チャット**\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-add.png\" alt-text=\"コマンドの詳細を保存する方法を示す画像\" border=\"false\":::\n\n    新しいコマンドがボット ウィンドウの **[コマンド** ] セクションに **追加** されます。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-save-new-bot-command.png\" alt-text=\"保存するコマンドの詳細を示す画像\" border=\"false\":::\n\n    コマンドの詳細が保存されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-added.png\" alt-text=\"保存されたコマンドの詳細を示す画像\" border=\"false\":::\n\n1. [ **アプリ機能] ウィンドウを** 開き、[ **個人用** アプリ カード] を選択してアプリのタブの詳細を表示します。\n\n    新しいチャット ボットのタブがアプリに追加されているのが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-chat-tab-configured.png\" alt-text=\"構成されたチャット タブを示す画像\" border=\"false\":::\n\n#### <a name=\"configure-message-extension\"></a>メッセージ拡張機能の構成\n\nメッセージング拡張機能を使用すると、ユーザーはサービスから情報を求め、その情報を投稿できます。 情報は、カードの形式でチャネル会話に投稿されます。 メッセージング拡張機能は、作成ボックスの下部に表示されます。\n\n新しいメッセージ拡張機能を追加するには、次の方法を使用します。\n\n1. [アプリ機能 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: ] ウィンドウの **[メッセージ拡張機能** ] カードのアイコン **を** 選択し、[削除] を **選択します**。\n\n1. [アプリ **の機能] ウィンドウ** で **[メッセージ拡張機能] を** 選択します。\n\n1. [メッセージ拡張機能] ウィンドウの [既存のボットの選択] ドロップダウン リストからボット アプリの **名前を選択** します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-select-bot.png\" alt-text=\"ボットを選択するメッセージ拡張ウィンドウを示す画像\" border=\"false\":::\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-select-msgext-bot.png\" alt-text=\"[メッセージ拡張] ウィンドウを示す画像\" border=\"false\":::\n\n    メッセージ拡張機能が保存され、[コマンド] **セクション** が [メッセージ拡張] **ウィンドウに表示** されます。\n\n1. [+ **コマンドの追加] を** 選択して、メッセージ拡張機能アプリで実行できる操作の範囲を定義します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command.png\" alt-text=\"[コマンド] セクションを示す画像\" border=\"false\":::\n\n    [ **コマンドの追加] ダイアログ** ボックス。\n\n1. [コマンド **の追加** ] ダイアログで、追加するコマンドの種類として [検索 **] が選択されている必要** があります。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-new-command.png\" alt-text=\"[コマンドの追加] ダイアログ ボックスを示す画像\" border=\"false\":::\n\n1. 次の詳細に適した情報を入力します。\n    - コマンド ID\n    - コマンド タイトル\n    - コマンドの説明\n\n1. ダイアログを移動して、残りの詳細を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command-b.png\" alt-text=\"[コマンドの追加] ダイアログで残りの詳細を示す画像\" border=\"false\":::\n\n1. [ **既定にする] が** 選択されている必要があります。\n1. メッセージ拡張コマンドで次のコンテキストを選択します。\n    - [コマンド] ボックス\n    - [作成] ボックス\n    - メッセージ\n1. 次の詳細に適した情報を入力します。\n    - パラメーター名\n    - パラメーター のタイトル\n    - パラメータの説明\n\n1. 入力 **の種類として** [テキスト] を選択します。\n1. **[保存]** を選びます。\n1. メッセージ拡張コマンドが保存され、[メッセージ拡張] ウィンドウのコマンドの一覧 **に表示** されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-command-added.png\" alt-text=\"コマンドの追加を示す画像\" border=\"false\":::\n\n1. **[保存]** を選択します。\n1. [アプリ **機能] ウィンドウを開** きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-app-capabilities-configured.png\" alt-text=\"Hello World アプリ用に構成された機能を示す画像\" border=\"false\":::\n\n    Hello World アプリ用に構成された、個人用タブ アプリ、ボット、メッセージ拡張機能の 3 つの機能すべてが表示されます。\n"
- title: アプリのプレビューとテストNode.jsする
  durationInMinutes: 1
  content: "\nアプリをインポートし、開発者ポータルで機能を構成した後、サンプル アプリをプレビューしてテストできます。\n\n## <a name=\"preview-your-app-in-teams\"></a>アプリをプレビュー Teams\n\nアプリの機能を構成したら、ローカル環境でアプリをプレビュー Teamsテストできます。\n\nアプリをプレビューするには、次の方法を実行します。\n\n1. [開発者 **ポータル] ツール バー Teams** [プレビュー] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-in-teams.png\" alt-text=\"[プレビュー] ボタンを表示する画像\" border=\"false\":::\n\n    開発者ポータルは、アプリが正常にサイドロードされたことを通知します。\n\n1. [アプリ **の管理] を選択します**。\n   アプリがサイドロードされたアプリに表示されます。 \n1. 検索ボックスを使用してアプリを検索し、行の 3 ドットを選択します。\n1. [表示] **オプションを** 選択します。\n    アプリ **の [** 追加] ページが表示されます。\n1. [追加 **] を** 選択してアプリを読み込Teams。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/add-nodejs-app-sideload.png\" alt-text=\"[アプリの追加] ダイアログを示す画像\" border=\"false\":::\n\n    アプリがアプリで使用Teams。 すべてのタブを表示し、機能をテストできます。\n\n    - [こんにちは] タブ:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-tab.png\" alt-text=\"ローカル環境の [Hello] タブを示す画像\" border=\"false\":::\n\n    - チャット ボット:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot.png\" alt-text=\"ローカル環境でのアプリのボットを示す画像\" border=\"false\":::\n\n        チャットを使用してメッセージを送信できます。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot-chat.png\" alt-text=\"ローカル環境でのチャットを示す画像\" border=\"false\":::\n\n    - メッセージ拡張機能:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext.png\" alt-text=\"ローカル環境でのメッセージ拡張機能を示す画像\" border=\"false\":::\n\n        メッセージ拡張機能を使用して検索を試みることはできません。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext-query.png\" alt-text=\"ローカル環境でのメッセージ拡張機能を使用した検索を示す画像\" border=\"false\":::\n\n    - [概要] タブ:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-about.png\" alt-text=\"ローカル環境の [概要] タブを示す画像\" border=\"false\":::"
