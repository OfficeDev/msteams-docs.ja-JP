### YamlMime:Tutorial
title: Node.js を使用して初めてのアプリを構築する
metadata:
  title: Node.jsを使用したHello World
  description: このチュートリアルでは、新しいプロジェクトを設定し、タブ、ボット、メッセージ拡張機能アプリをビルドしてデプロイすることで、Node.jsを使用してHello World アプリを構築する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 開始の概要に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 0a57b3e1af0e38a9ff4f2c6b319ccad6700e4a7d
  ms.sourcegitcommit: c7fbb789b9654e9b8238700460b7ae5b2a58f216
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 06/29/2022
  ms.locfileid: "66485182"
items:
- durationInMinutes: 1
  content: >
    タブ、ボット、メッセージ拡張機能のある最初のアプリをビルドして、Microsoft Teams アプリ開発を始めます。


    > このアプリには全ての機能が含まれ、それぞれ独自の UI と UX を提供します。


    :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png" alt-text="このアプリを示すダイアグラムには、3 つの機能があります。" border="true":::


    このチュートリアルでは以下を学習します。


    - コマンド ライン ツールを使用して新しいプロジェクトを設定する方法。

    - それぞれ異なる機能を持つ 3 つのアプリ (タブ、ボット、およびメッセージ拡張機能) をビルドする方法。

    - 開発者ポータルからアプリをデプロイする方法。
- title: 前提条件
  durationInMinutes: 1
  content: "\nTeams アプリをビルドして展開するためにインストールする必要があるツールのリストを次に示します。\n\n| &nbsp; | インストール | 使用するには... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Node.jsと NPM](https://nodejs.org/) | バックエンド JavaScript ランタイム環境。 最新の v16 LTS リリースを使用します。|\n| &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリでは必須ではありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript、または SharePoint Framework (SPFx) ビルド環境。 バージョン 1.55 以降を使用してください。 |\n| &nbsp; | [Git](https://git-scm.com/downloads) | Git を使用して、GitHub からサンプル Node.js アプリ リポジトリを使用します。 |\n| &nbsp; |  [がぶ飲み](https://gulpjs.com/docs/en/getting-started/quick-start) | オープンソースの JavaScript ツールキット。 バージョン 4.0.0 以降をインストールします。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams を使用して、チャット、会議、通話用のアプリを通じて共同作業を行うすべてのユーザーと 1 か所で共同作業を行うことができます。 | \n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) および [Microsoft Azure CLI](/cli/azure/install-azure-cli) | 保存されたデータにアクセスしたり、Azure で Teams アプリ用のクラウドベースのバックエンドをデプロイしたりするための Azure ツール。 |\n| &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) または [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | JavaScript を使用したタブ開発用のブラウザー ツール。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph エクスプローラー。Microsoft Graph データからクエリを実行できるブラウザー ベースのツール。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | Teams アプリを構成、管理、組織や Teams ストアなどに配布するための Web ベースのポータル。 |\n| &nbsp; | **Visual Studio コード拡張機能** | &nbsp; |\n| &nbsp; | [Azure Functions Core Tools](/azure/azure-functions/functions-run-local) | Azure でサービスを実行するときに必要な認証ヘルパーを含む、ローカル デバッグの実行中にバックエンド コンポーネントがローカルに配置されます。 プロジェクト ディレクトリ内にインストールされます (npm `devDependencies`を使用)。 |\n| &nbsp; | [.NET SDK](/dotnet/core/install/) | ローカル デバッグとAzure Functions アプリのデプロイ用にカスタマイズされたバインド。 .NET 3.1 (またはそれ以降) SDK をグローバルにインストールしていない場合は、ポータブル バージョンをインストールできます。 |\n\n## <a name=\"verify-version-numbers-for-installed-tools\"></a>インストールされているツールのバージョン番号を確認する\n\n次のコマンドを使用して、ツールにインストールされているバージョンが必要に応じてであることを確認します。\n\n> [!NOTE]\n> プラットフォームで最も使いやすいターミナル ウィンドウを使用します。 これらの例では Git Bash (Git インストールに含まれています) を使用しますが、これらのスクリプトはほとんどのプラットフォームで実行されます。\n\nインストールされているツールのバージョン番号を確認するには、\n\n1. ターミナル ウィンドウを開きます。 \n2. 次のコマンドを実行して、コンピューターにインストールされている `git` バージョンを確認します。\n\n    ```bash\n    $ git --version\n    ```\n\n    出力例: `git version 2.19.0.windows.1`\n    \n3. 次のコマンドを実行して、バージョンを確認します `node.js` 。\n    \n    ```bash\n    $ node -v\n    ```\n\n    出力例: `v8.9.3`\n\n4. 次のバージョン番号を `npm`確認します。\n\n    ```bash\n    $ npm -v\n    ```\n\n    出力例: `5.5.1`\n\n5. 次のバージョン番号を `gulp`確認します。\n    \n    ```bash\n    $ gulp -v\n    ```\n\n    出力例:  `CLI version 2.3.0`\n    \n    `Local version 4.0.2`\n\n6. 次のコマンドを実行して、Visual Studio Code のバージョン番号を確認します。\n\n    ```bash\n    code --version\n    ```\n\n    出力例:  `1.28.2`\n    \n    `929bacba01ef658b873545e26034d1a8067445e9`\n\nこれらのアプリケーションの別のバージョンを問題なく使用できます。\n\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** とは、チャット、ファイルの共有、会議の実行を行う Teams の組織のスペースまたはコンテナーのようなものです。\nこのスペースは、アプリをサイドロードしてテストする場所でもあります。 \n\nテナントを使って開発する準備ができているかどうかを確認しましょう。\n\n### <a name=\"enable-sideloading-option\"></a>サイドローディングのオプションを有効にする\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 このプロセスはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n  \n> [!NOTE]\n> サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 有効になっていない場合は、Teams でアプリをローカルでプレビューしてテストすることはできません。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にそうかどうかを確認しましょう。\n\nTeams でアプリをサイドロードできるかどうかを確認します。\n\n1. Teams クライアントで、**[Store]** アイコンを選択します。\n1. **[アプリの管理]** を選択します。\n1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n    > [!NOTE]\n    > Teams でカスタム アプリをアップロードするオプションが表示されない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant\"></a>無料の Teams 開発者テナントを作成する\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で、**[E5 サブスクリプションの設定]** を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"Microsoft 365 開発者プログラムにサインアップした後に表示される内容の例\":::\n\n1. 設定した管理者アカウントを使用して Teams にサインインします。 Teams に **[カスタム アプリのアップロード]** オプションがあることを確認します。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得します。\n\nアプリをホストする場合、または Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。開始する前に、[無料アカウントを作成](https://azure.microsoft.com/free/) してください。\n\nこれで、すべてのツールが用意され、アカウントが設定されました。 次に、開発環境を設定し、ビルドを開始しましょう。\n\nこのターミナル ウィンドウを引き続き使用して、このチュートリアルで説明するコマンドを実行できます。\n\n<a name=\"DownloadSample\"></a>\n\n## <a name=\"download-the-sample\"></a>サンプルのダウンロード\n\nこのチュートリアルでは、[Hello, World!](https://github.com/OfficeDev/Microsoft-Teams-Samples/tree/main/samples/app-hello-world/nodejs) を使用します サンプルを使用して作業を開始します。 GitHub からダウンロードして複製できます。\n\n**Git Bash を使用してサンプル リポジトリを複製するには:**\n\n1. ターミナル ウィンドウを開きます。\n1. 次のコマンドを実行して、サンプル リポジトリをコンピューターに複製します。\n\n    ```bash\n    git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git\n    ```\n\n> [!TIP]\n> 今後の参照のために GitHub [リポジトリ](https://github.com/OfficeDev/Microsoft-Teams-Samples)の変更を変更してチェックインする場合は、このリポジトリを[フォーク](https://help.github.com/articles/fork-a-repo/)できます。\n"
- title: 最初のNode.js アプリをビルドする
  durationInMinutes: 1
  content: "\nサンプル アプリのリポジトリを複製した後Node.js、ローカル環境でアプリをビルドしてテストできます。\n\nこのページでは、次の方法について説明します。\n1. [最初のアプリをビルドして実行する](#build-and-run-the-sample)\n1. [サンプル アプリをテストする](#test-your-sample-app-in-local-environment)\n\n\n## <a name=\"build-and-run-the-sample\"></a>サンプルの構築と実行\n\nリポジトリが複製されたら、サンプル アプリをビルドできます。\n\n1. ターミナル ウィンドウを開きます。\n1. ターミナルで change directory コマンドを実行して、サンプル アプリ ディレクトリに変更します。\n\n    ```bash\n    cd Microsoft-Teams-Samples/samples/app-hello-world/nodejs/\n    ```\n\n1. 次のコマンドを使用して、すべての依存関係をインストールします。\n\n    ```bash\n    npm install\n    ```\n\n    多数の依存関係がインストールされていることがわかります。\n\n1. インストールが完了したら、次のコマンドを使用してアプリを実行します。\n\n    ```bash\n    npm start\n    ```\n\n    Hello World アプリが起動すると、ターミナル ウィンドウに表示`App started listening on port 3333`されます。\n\n    > [!NOTE]\n    > 上記のメッセージに別のポート番号が表示されている場合は、PORT 環境変数が設定されているためです。 引き続きそのポートを使用するか、環境変数を 3333 に変更できます。\n\n1. ブラウザー ウィンドウを開き、次の URL を使用して、すべてのHello World アプリ URL が読み込まれていることを確認します。\n\n    - `http://localhost:3333`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host.png\" alt-text=\"ローカル ホストNode.js示す画像\" border=\"false\":::\n\n    - `http://localhost:3333/hello`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-hello-nodejs.png\" alt-text=\"ローカル ホストの hello ページNode.js示す画像\" border=\"false\":::\n\n    - `http://localhost:3333/first`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-first-nodejs.png\" alt-text=\"ローカル ホストの最初のタブNode.js示す画像\" border=\"false\":::\n\n    - `http://localhost:3333/second`\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/local-host-second-nodejs.png\" alt-text=\"ローカル ホストの 2 番目のタブNode.js示す画像\" border=\"false\":::\n\n## <a name=\"test-your-sample-app-in-local-environment\"></a>ローカル環境でサンプル アプリをテストする\n\nMicrosoft Teams のアプリは、1 つ以上の機能を公開する Web アプリケーションであることに注意してください。 Teams プラットフォームがアプリを読み込むことができるように、アプリをインターネット上で使用できるようにします。 インターネットからアプリにアクセスできるようにするには、アプリを *ホスト* する必要があります。\n\nローカル テストでは、ローカル コンピューターでアプリを実行し、Web エンドポイントを使用してそれに対するトンネルを作成できます。 [ngrok](https://ngrok.com) は無料のツールで、これを行うことができます。 *ngrok* を使用すると、(この URL は単なる例です) などの `https://d0ac14a5.ngrok.io` Web アドレスを取得できます。 環境用に *ngrok* を [ダウンロードしてインストール](https://ngrok.com/download)できます。 の場所 `PATH`に必ず追加してください。\n\n### <a name=\"create-ngrok-tunnel\"></a>ngrok トンネルを作成する\n\nngrok をインストールした後、アプリをローカルにデプロイするためのトンネルを作成できます。\n\n1. 新しいターミナル ウィンドウを開きます。\n1. 次のコマンドを実行して、新しいセッションを作成します。 サンプル アプリでは、ポート 3333 を使用します。\n\n    ```bash\n    ngrok http 3333 -host-header=localhost:3333\n    ```\n    ngrok トンネルが作成されます。 ngrok トンネルの例を次に示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel.png\" alt-text=\"ngrok トンネルを示すイメージ\" border=\"false\":::\n\n    *Ngrok* はインターネットからの要求をリッスンし、ポート 3333 で実行されているアプリにルーティングします。\n\nアプリのローカル展開を確認するには:\n\n1. ブラウザーを開きます。\n1. 次の URL を使用してアプリを読み込みます。\n\n    `https://<forwarding address in ngrok console session>/`\n\n    URL の例を次に示します:\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel-verify.png\" alt-text=\"ngrok トンネルでローカルで実行されているアプリnode.js示す画像\" border=\"false\":::\n\n    ngrok トンネル URL に `hello`、`first`、または `second` を追加して、アプリのさまざまなタブ ページを表示できます。\n\n    Ngrok はインターネットからの要求をリッスンし、ポート 3333 で実行されているアプリにルーティングします。        \n\n1. ngrok コンソールで転送先アドレスをメモします。 Teams でアプリを展開するには、この URL が必要です。\n\n    > [!NOTE]\n    > [ビルドと実行中](#build-and-run-the-sample)に別のポートを使用した場合は、同じポート番号を使用して *ngrok* トンネルをセットアップしてください。\n    \n    > [!TIP]\n    > 別のターミナル ウィンドウで *ngrok* を実行し、ノード アプリを妨げることなく実行し続けることをお勧めします。これは、後で停止、再構築、再実行する必要がある場合があります。 *ngrok* セッションは、このウィンドウで有用なデバッグ情報を返します。 有料バージョンの *ngrok* では、永続的な名前が許可されます。\n\n    >[!IMPORTANT] \n    > 無料バージョンの ngrok を使用する場合、アプリは開発用コンピューター上の現在のセッション中でのみ使用できます。 コンピューターがシャットダウンしているか、スリープ状態になった場合は使用できません。 サービスを再起動すると、新しいアドレスが返されます。 次に、古い住所を使用するすべての場所を更新する必要があります。 テスト用にアプリを共有するときは、この手順を忘れないでください。\n\n<a name=\"DeployToTeams\"></a>\n\n## <a name=\"build-nodejs-app-package\"></a>アプリ パッケージNode.jsビルドする\n\nNode.js用のアプリ パッケージをビルドするために使用 `gulp CLI` できます。\n\n1. ターミナル ウィンドウを開きます。\n1. 複製先のディレクトリに存在 `node.js` することを確認します。 これは、配置される `gulpfile.js` フォルダーです。 \n1. 次のコマンドを実行して、Node.js アプリ パッケージをビルドします。\n\n    ```$ gulp```\n\n    コマンド出力の例を次に示します。\n\n    `[13:39:27] Using gulpfile ~\\documents\\github\\msteams-samples-hello-world-nodejs\\gulpfile.js`\n\n    `[13:39:27] Starting 'clean'...`\n\n    `[13:39:27] Starting generate-manifest'...`\n\n    `[13:39:27] Finished 'generate-manifest' after 11 ms`\n\n    `[13:39:27] Finished 'clean after 21 ms`\n\n    `[13:39:27] Starting 'default'...\n    Build completed. Output in manifest folder`\n\n    `[13:39:27] Finished 'default' after 62 μs`\n\n    アプリ パッケージ helloworldapp.zipが作成されます。 パッケージ ファイルは、次のパスにあります。\n\n    `<path to the cloned repo>/Microsoft-Teams-Samples/samples/app-hello-world/nodejs/manifest`\n\n    > [!NOTE]\n    > 使用しているツールで場所が明確でない場合は、アプリ パッケージ ファイル (helloworldapp.zip) を検索します。\n"
- title: 開発者ポータルを使用して最初のNode.js アプリを構成する
  durationInMinutes: 1
  content: "\n[開発者ポータル](https://dev.teams.microsoft.com/)を使用して、アプリ パッケージを Teams にアップロードし、アプリの機能を構成できます。 開発者ポータルは、アプリの作成と登録を簡略化する Teams アプリです。 Teams ストアからインストールします。\n\nTeams アプリをビルドしてテストしたら、開発者ポータルを使用してアプリを構成してプレビューできます。\n\nアプリ パッケージの更新には、次のものが含まれます。\n\n1. [開発者ポータルにアプリ パッケージをインポートする](#import-the-app-package-to-developer-portal)\n1. [アプリ機能の構成](#configure-your-apps-capabilities)\n\n### <a name=\"import-the-app-package-to-developer-portal\"></a>アプリ パッケージを開発者ポータルにインポートする\n\nアプリ パッケージをインポートするには:\n\n1. Microsoft Teams を開きます。\n\n1. 左側のバーから **[Store]** :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-store-icon.png\"::: アイコンを選択します。\n\n1. 検索バーで **開発者ポータル** を検索し、**[開発者ポータル]***を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-dev-portal-app.png\" alt-text=\"開発者ポータル アプリの選択\" border=\"false\":::\n\n1. [**開く**]を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/open-dev-portal.png\" alt-text=\"開発者ポータル アプリを開くところを示した画像\" border=\"false\":::\n\n    開発者ポータルが開きます。\n\n1. **[アプリ]** タブを選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-app.png\" alt-text=\"開発者ポータル アプリ\" border=\"false\":::\n\n1. **[アプリのインポート]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/import-app-in-dev-portal.png\" alt-text=\"[インポート アプリ] ボタンを示す画像\" border=\"false\":::\n\n1. C# サンプル リポジトリ ディレクトリ構造の次のパスからアプリ パッケージ `helloworldapp.zip` を開きます。\n\n    `<path to cloned node.js sample repo>\\Source\\Repos\\Microsoft-Teams-Samples\\samples\\app-hello-world\\nodejs\\manifest`\n\n    **Hello World** アプリは開発者ポータルにインポートされます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/app-imported-dev-portal.png\" alt-text=\"Teams にインポートされたアプリを示す画像\" border=\"false\":::\n\n    アプリを開発者ポータルにインポートしたら、開発者ポータルでその詳細を表示できます。\n\n### <a name=\"take-a-tour-of-your-app-in-developer-portal\"></a>開発者ポータルでアプリのツアーをする\n\nアプリを開発者ポータルにインポートしたら、マニフェスト ファイルなどの詳細を表示できます。\n\n#### <a name=\"view-app-information\"></a>アプリ情報を確認する\n\n1. 開発者ポータルの左側のウィンドウから **[基本情報]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-left-pane-basic.png\" alt-text=\"開発者ポータルの左側のウィンドウを示す画像\" border=\"false\":::\n\n1. 基本情報の次の情報に注意してください:\n    - アプリ ID\n    - 開発者情報\n    - アプリの URL\n\n1. 左側のウィンドウから **[ブランド]** を選択して、ブランド情報を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-app-branding.png\" alt-text=\"アプリのブランド情報を示す画像\" border=\"false\":::\n\n    これらの詳細は、配布用の新しいアプリを作成する場合に重要です。\n\n#### <a name=\"view-app-features\"></a>アプリ機能の表示\n\n- 開発者ポータルの左側のウィンドウから **[アプリ機能]** を選択します。\n\n    アプリの機能が右側のウィンドウに表示されます。 個人用アプリ、ボット、メッセージ拡張機能のカードを表示できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-csharp-app-features.png\" alt-text=\"アプリの機能を示す画像\" border=\"false\":::\n\n#### <a name=\"view-the-app-manifest\"></a>アプリ マニフェストの表示\n\nマニフェスト ファイルを使用して、アプリの機能、必要なリソース、およびその他の重要な属性を構成します。\n\n- 左側のパネルから **[発行]** を選択してドロップダウン リストを開き、**[アプリケーション パッケージ]** を選択します。\n\n    アプリ マニフェストが右側のウィンドウに表示されます。\n    \n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-app-manifest.png\" alt-text=\"開発者ポータルでアプリ マニフェスト ファイルを示す画像\" border=\"false\":::\n\n    マニフェスト ファイルが右側のウィンドウに表示されます。\n\n### <a name=\"configure-your-apps-capabilities\"></a>アプリの機能を構成する\n\nアプリを 開発者ポータルにインポートしたら、次の手順ではアプリの機能を構成します。 開発者ポータルには、さまざまなセクションのすべてのアプリ情報が含まれています。 これにより、アプリの機能の構成が簡単になります。\n\n開発者ポータルを使用すると、次のことができます:\n1. [個人用タブ アプリを構成します](#configure-personal-tab-app)。\n1. [ボットを構成します](#configure-bot)。\n1. [メッセージ拡張機能を構成します](#configure-message-extension)。\n\n#### <a name=\"configure-personal-tab-app\"></a>個人用タブ アプリの構成\n\n個人用タブ アプリを構成するには:\n\n1. **[アプリ機能]** ウィンドウの **[個人用アプリ]** カードで、:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: アイコンを選択し、**[編集]** を選択します。\n\n    [Hello] タブの詳細が表示されます。\n\n1. Hello タブの :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: アイコンを選択し、**[編集]** を選択して、更新用のアプリの詳細を開きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-edit-tab.png\" alt-text=\"Hello タブ メニューを示す画像\" border=\"false\":::\n\n1. **[個人用アプリにタブを追加]** の [Hello] タブのアプリの詳細を入力します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-add-tab.png\" alt-text=\"Hello タブの詳細を示す画像\" border=\"false\":::\n\n    次の詳細を入力します:\n    - **名前**: Hello タブ。\n    - **コンテンツ URL** および **Web サイト URL**: ngrok コンソール セッションの転送先アドレス。\n    - **コンテキスト**: **[個人用タブ]** を選択します。\n\n1. **[更新]** を選択します。\n\n    Hello タブの詳細は、**[個人用アプリ]** ウィンドウに表示されます。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-save.png\" alt-text=\"保存する [Hello] タブの詳細を示す画像\" border=\"false\":::\n\n    **[個人用アプリ]** ウィンドウに、新しいタブと自動的に作成された [バージョン情報] タブが表示されるようになりました。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-saved.png\" alt-text=\"[Hello] タブと [バージョン情報] タブの詳細を示す画像\" border=\"false\":::\n\n#### <a name=\"configure-bot\"></a>ボットの構成\n\nボット機能をアプリに簡単に追加できます。 Hello Worldサンプル アプリには、サンプルの一部としてボットが既にありますが、Teams に登録する必要があります。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-no-id.png\" alt-text=\"アプリ ID なしでインポートされたボット アプリを示す画像\" border=\"false\":::\n\nサンプルからインポートされたボットには、関連付けられたアプリ ID がありません。 これを削除し、新しいボットを作成する必要があります。 開発者ポータルによって新しいアプリ ID が作成され、Teams に登録されます。\n\nボットの追加と構成には、次の処理が含まれます:\n\n1. [新しいボットを追加します](#to-add-a-new-bot)。\n1. [アプリにボットを追加する](#to-add-bot-to-app)。\n1. [ボット スコープの構成](#to-configure-bot-scope)。\n\n##### <a name=\"to-add-a-new-bot\"></a>新しいボットを追加するには\n\n1. **[アプリ機能]** ウィンドウの **[ボット]** カードの :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: アイコンを選択します。**[削除]** を選択します。\n\n1. **[ツール]** を選択して機能を追加します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/tools-option.png\" alt-text=\"[ツール] オプションを示す画像\" border=\"false\":::\n\n1. **[ツール]** ウィンドウで **[ボット管理]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-tools-bot-card.png\" alt-text=\"[ボット管理] ウィンドウを示す画像\" border=\"false\":::\n\n1. **[ボット管理]** ウィンドウで **[+ 新規のボット]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-management-new-bot.png\" alt-text=\"[新規のボット] オプションを示す画像\" border=\"false\":::\n\n1. ボットに適した名前を入力し、**[追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot.png\" alt-text=\"ボットの追加方法を示す画像\" border=\"false\":::\n\n    **[構成]** ウィンドウが表示され、左側のウィンドウに新しいボットの詳細が表示されます。\n\n1. `ngrok` コンソールから転送 URL を入力し、**[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-endpoint.png\" alt-text=\"ボットのエンドポイントを追加する方法を示す画像\" border=\"false\":::\n\n1. [ **クライアント シークレット**] を選択し、[ **クライアント シークレットをボットに追加** する] を選択して、ボットのパスワードを生成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-client-secrets.png\" alt-text=\"クライアント シークレット セクションを示す画像\" border=\"false\":::\n\n    開発者ポータルによりボットのパスワードが生成されます。\n\n    :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/copy-icon.png\"::: アイコンを使用して、パスワードをコピーできます。 このチュートリアルでは、コピーする必要はありません。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-client-secret-generated.png\" alt-text=\"クライアント シークレットが生成されたのを示す画像\" border=\"false\":::\n\n1. **[OK]** を選択します。\n\n1. **より多くのボット** を選択して、**[ボット管理]** ウィンドウに戻ります。\n\n    **[ボット管理]** ウィンドウには、アプリ ID で追加された新しいボットが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-added.png\" alt-text=\"アプリ ID のある新しいボットを示す画像\" border=\"false\":::\n\n1. **[クライアント シークレット]** セクションのパスワードと共にボット ID を保存していることを確認します。\n\n##### <a name=\"to-add-bot-to-app\"></a>ボットをアプリに追加するには\n\n1. **[アプリ機能]** ウィンドウを開き、**[ボット]** カードを選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-card.png\" alt-text=\"ボット カードを示す画像\" border=\"false\":::\n\n    **[ボット]** ウィンドウが表示されます。\n\n1. [既存のボットの **選択] からボット アプリを選択** し、[保存] を選択 **します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-select-bot-app.png\" alt-text=\"既存のボット アプリを選択する方法を示す画像\" border=\"false\":::\n\n    新しいボットは、独自のアプリ ID を使用してアプリに追加されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-new-bot-added.png\" alt-text=\"新しいボットがアプリに追加されたことを示す画像\" border=\"false\":::\n\n##### <a name=\"to-configure-bot-scope\"></a>ボット スコープを構成するには\n\n1. 新しい **[ボット]** カードの :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: アイコンを選択し、**[編集]** を選択します。\n\n1. **[ボット]** ウィンドウ内を移動して、**\"コマンド\"** セクションを表示し、**[+ コマンドの追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-add-command.png\" alt-text=\"&quot;コマンド&quot; セクションを示す画像\" border=\"false\":::\n\n1. **コマンド** の適切な名前と説明を入力します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot-command.png\" alt-text=\"コマンドの追加方法詳細を示す画像\" border=\"false\":::\n\n1. コマンドの 3 つの範囲をすべて選択し、**[追加]** を選択します。\n    - **個人用**\n    - **チーム**\n    - **グループ チャット**\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-add.png\" alt-text=\"コマンドの保存方法の詳細を示す画像\" border=\"false\":::\n\n    新しいコマンドは、**[ボット]** ウィンドウの **\"コマンド\"** セクションに追加されます。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-save-new-bot-command.png\" alt-text=\"保存されるコマンド詳細を示す画像\" border=\"false\":::\n\n    コマンドの詳細が保存されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-added.png\" alt-text=\"保存されたコマンド詳細を示す画像\" border=\"false\":::\n\n1. **[アプリ機能]** ウィンドウを開き、**[個人用アプリ]** カードを選択して、アプリのタブの詳細を表示します。\n\n    新しいチャット ボットのタブがアプリに追加されていることがわかります。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-chat-tab-configured.png\" alt-text=\"チャット タブが構成されていることを示す画像\" border=\"false\":::\n\n#### <a name=\"configure-message-extension\"></a>メッセージ拡張機能の構成\n\nメッセージ拡張機能を使用すると、ユーザーはサービスから情報を要求し、その情報を投稿できます。 情報は、カードの形式でチャネルの会話に投稿されます。 メッセージ拡張機能は、作成ボックスの下部に表示されます。\n\n新しいメッセージ拡張機能を追加するには:\n\n1. **[アプリ機能]** ウィンドウの **[メッセージ拡張機能]** カードで :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png\"::: アイコンを選択し、**[削除]** を選択します。\n\n1. **[アプリ機能]** ウィンドウから **[メッセージ拡張機能]** を選択します。\n\n1. **からボット アプリの名前を選択し、**[メッセージ拡張機能]** ウィンドウで既存のボット** ドロップダウン リストを選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-select-bot.png\" alt-text=\"ボットを選択する [メッセージ拡張機能] ウィンドウを示す画像\" border=\"false\":::\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-select-msgext-bot.png\" alt-text=\"[メッセージ拡張機能] ウィンドウを示す画像\" border=\"false\":::\n\n    メッセージ拡張機能が保存され、**\"コマンド\"** セクションが **[メッセージ拡張機能]** ウィンドウに表示されます。\n\n1. **[+ コマンドの追加]** を選択して、メッセージ拡張機能アプリで実行できる処理の範囲を定義します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command.png\" alt-text=\"コマンド セクションを示す画像\" border=\"false\":::\n\n    **[コマンドの追加]** ダイアログ。\n\n1. **[検索]** が、**\"コマンドの追加\"** ダイアログで追加するコマンドの種類として選択されていることを確認します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-new-command.png\" alt-text=\"&quot;コマンドの追加&quot; ダイアログを示す画像\" border=\"false\":::\n\n1. 次の詳細に適した情報を入力してください:\n    - コマンド ID\n    - コマンドのタイトル\n    - コマンドの説明\n\n1. ダイアログ内を移動して、残りの詳細を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command-b.png\" alt-text=\"&quot;コマンドの追加&quot; ダイアログで、残りの詳細を示す画像\" border=\"false\":::\n\n1. **[既定値にする]** が選択されていることを確認します。\n1. メッセージ拡張コマンドに対して次のコンテキストを選択します。\n    - コマンド ボックス\n    - 作成ボックス\n    - メッセージ\n1. 次の詳細に適した情報を入力してください:\n    - パラメーター名\n    - パラメーターのタイトル\n    - パラメータの説明\n\n1. 入力の種類として **[テキスト]** を選択します。\n1. **[保存]** を選択します。\n1. メッセージ拡張機能コマンドが保存され、**[メッセージ拡張機能]** ウィンドウのコマンド リストに表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-command-added.png\" alt-text=\"追加されたコマンドを示す画像\" border=\"false\":::\n\n1. **[保存]** を選択します。\n1. **[アプリ機能]** ウィンドウを開きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/nj-app-capabilities-configured.png\" alt-text=\"Hello World アプリ用に機能が構成されたのを示す画像\" border=\"false\":::\n\n    Hello World アプリ用に構成された 3 つの機能 (個人用タブ アプリ、ボット、メッセージ拡張機能) がすべて表示されます。\n"
- title: Node.js アプリのプレビューとテスト
  durationInMinutes: 1
  content: "\nアプリをインポートし、開発者ポータルで機能を構成したら、サンプル アプリをプレビューしてテストできます。\n\n## <a name=\"preview-your-app-in-teams\"></a>Teams でアプリをプレビューする\n\nアプリの機能を構成したら、ローカル環境の Teams でアプリをプレビューしてテストできます。\n\nアプリをプレビューするには:\n\n1. 開発者ポータル ツール バーから **[Teams でプレビューする]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-in-teams.png\" alt-text=\"[プレビュー] ボタンを示す画像\" border=\"false\":::\n\n    開発者ポータルは、アプリが正常にサイドロードされたことを通知します。\n\n1. **[アプリの管理]** を選択します。\n   アプリはサイドロードされたアプリに一覧リスト表示されます。 \n1. 検索ボックスを使用してアプリを検索し、その行の 3 つのドットを選択します。\n1. **[表示]** オプションを選択します。\n    アプリの **[追加]** ページが表示されます。\n1. **[追加]** を選択して、Teams にアプリを読み込みます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/add-nodejs-app-sideload.png\" alt-text=\"&quot;アプリの追加&quot; ダイアログを示す画像\" border=\"false\":::\n\n    アプリが Teams で利用できるようになりました。 すべてのタブを表示し、機能をテストできます。\n\n    - [Hello] タブ:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-tab.png\" alt-text=\"ローカル環境の [Hello] タブを示す画像\" border=\"false\":::\n\n    - チャット ボット:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot.png\" alt-text=\"ローカル環境のアプリのボットを示す画像\" border=\"false\":::\n\n        チャットを使用してメッセージを送信できます。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot-chat.png\" alt-text=\"ローカル環境でチャットを示す画像\" border=\"false\":::\n\n    - メッセージ拡張機能:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext.png\" alt-text=\"ローカル環境のメッセージ拡張機能を示す画像\" border=\"false\":::\n\n        メッセージ拡張機能を使用して検索を試すことができます。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext-query.png\" alt-text=\"ローカル環境のメッセージ拡張機能を使った検索を示す画像\" border=\"false\":::\n\n    - [バージョン情報] タブ:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/helloworld-about.png\" alt-text=\"ローカル環境の [バージョン情報] タブを示す画像\" border=\"false\":::"
