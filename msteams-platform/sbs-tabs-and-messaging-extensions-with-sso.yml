### YamlMime:Tutorial
title: タブとメッセージ拡張機能の AAD SSO
metadata:
  title: タブとメッセージ拡張機能の AAD SSO
  description: このラーニング モジュールでは、タブの Azure Active Directory シングル サインオン (AAD SSO) を設定する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 12/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/tab-sso-overview.md
  nextTutorialTitle: 詳細については、タブの SSO 認証に関するページを参照してください。
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 2d887939b106e4b345a13efa9aa7dfc82f25684d
  ms.sourcegitcommit: 4eeede81a0ae8ec985c6a1ad4f608df58371402f
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 07/14/2022
  ms.locfileid: "66793097"
items:
- durationInMinutes: 1
  content: "Azure Active Directory シングル サインオン (AAD SSO) は、Teams でユーザーを認証するのに役立ちます。 \n\n**タブとメッセージ拡張機能の AAD SSO のステップ バイ ステップ ガイドの主な側面**:\n\n * 最初のサインイン後、AAD SSO を使用すると、ユーザーは自動的にサインインできます。\n * ユーザーがサインイン資格情報を再入力せずに他のデバイスにサインインできるようにします。\n * ログインしているユーザーのトークンを取得します。   \n\nこのステップ バイ ステップ ガイドは、AAD SSO 認証を有効にするタブとメッセージ拡張機能を作成するのに役立ちます。 次の出力が表示されます。\n\n  ![おめでとうございます画像](~/assets/images/Tab-ME-SSO/hello-megan-profile245.png)   \n"
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境を設定してください。  \n\n* 有効なアカウントを持つ [Microsoft Teams](https://teams.microsoft.com/)\n* [.NET Core SDK](https://dotnet.microsoft.com/download) バージョン 3.1\n* [Visual Studio の最新バージョン](https://visualstudio.microsoft.com/downloads/)\n* [ngrok](https://ngrok.com/download) の最新バージョン (devbox テスト用のみ) または同等のトンネリング ソリューション\n* [Microsoft 365 開発者アカウント](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) またはアプリをインストールするための適切なアクセス許可を持つ Teams アカウントへのアクセス\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken](https://ngrok.com/download) をインストールします。\n"
- title: ローカル環境を設定する
  durationInMinutes: 1
  content: "リポジトリをローカル GitHub に複製 `Microsoft-Teams-Samples` します。  \n\n 1. [Microsoft Teams のサンプルを](https://github.com/OfficeDev/Microsoft-Teams-Samples)開きます。\n 1. [ **コード**] を選択します。\n 1. ドロップダウン メニューから[ **Open with GitHub Desktop]\\(GitHub Desktop で開く\\**) を選択します。\n\n    ![リポジトリを複製する](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository.png)\n\n 1. [ **複製**] を選択します。 \n"
- title: Azure AD portal でボットを作成して登録する
  durationInMinutes: 5
  content: "次の手順に従います。\n\n* Azure bot リソースを作成して、Azure Bot Serviceにボットを登録します。\n* ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n* Microsoft Teams チャネルを追加して、ボットを Teams チャネルにデプロイします。\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Microsoft Azure portal](https://portal.azure.com/)に移動します。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに「 **Azure Bot**」と入力します。\n1. **Enter** キーを押します。\n1. **Azure Bot** を選択します。\n\n     :::image type=\"content\" source=\"./assets/images/azure-bot.png\" alt-text=\"Azure ボット。\":::\n     \n1. **[作成]** を選択します。\n1. ボット ハンドルに必要な **ボット ハンドル** 名を入力します。\n1. ドロップダウン リストから **[サブスクリプション]** を選択します。\n1. **[リソース グループ**] ドロップダウン リストから、既存のリソース グループを選択します。 新しいリソース グループを作成することもできます ([新しいリソースの **作成** ] を選択>、リソース名を入力> **[OK**] を選択します)。\n\n    ![ボットを登録する](~/assets/images/Tab-ME-SSO/register-bot.png)\n\n1. **[Microsoft アプリ ID**] セクションでは、既定で [**新しい Microsoft アプリ ID の作成]** が選択されています。 \n\n   [ **既存のアプリの登録を使用** する] を選択し、 **既存のアプリケーションの既存のアプリ ID** と **既存のアプリ パスワード** を入力します。 **新しいアプリケーションの [新しい Microsoft アプリ ID の作成] を** 選択します。\n\n   > [!NOTE]\n   > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n1. **[アプリの種類**] を選択します`Multi Tenant`。\n1. **[確認 + 作成]** を選びます。\n\n   ![ボットを登録する](~/assets/images/Tab-ME-SSO/register-bot-2.png)\n\n1. 検証に合格した場合は、**[作成]** を選択します。\n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n1. [**リソースに移動**] を選びます。 \n\n    ![アプリをデプロイする](~/assets/images/Tab-ME-SSO/go-to-resource.png)\n\n    Azure ボットが作成されます。\n\n    ![アプリをデプロイする](~/assets/images/Tab-ME-SSO/app-overview.png)\n\n**クライアント シークレットを作成するには**\n\n  新しい **Microsoft アプリ ID** を作成した場合は、次の手順を実行します。\n\n1. 左側のパネルで、[構成] を選択 **します**。 \n\n   > [!TIP]\n   > 今後参照できるように **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **Microsoft アプリ ID** の横にある [**管理**] を選択します。\n\n    ![Microsoft アプリ ID](~/assets/images/Tab-ME-SSO/manage.png)\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 \n\n    ![新しいクライアント シークレット](~/assets/images/meeting-token-generator/meeting-token-generator-newclientsecret.png)\n\n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n    ![クライアント シークレットをアプリに追加する](~/assets/images/Tab-ME-SSO/add-client-id.png)\n\n1. [ **値** ] 列で、[ **クリップボードにコピー**] を選択します。\n\n     ![クライアント シークレットの値](~/assets/images/Tab-ME-SSO/client-ids.png)\n   \n   > [!TIP]\n   > 今後参照できるように **、クライアント シークレットの** 値またはアプリ パスワードを保存します。\n\n**Microsoft Teams チャネルを追加するには**\n\n1. [**ホーム**] を選択します。\n\n    ![ホーム ページ](~/assets/images/Tab-ME-SSO/home.png)\n\n1. **最近使用したリソース** からボットを選択します。\n\n1. 左側のウィンドウで **[チャネル** ] を選択します。 \n\n1. **Microsoft Teams を選択する** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n1. [ **利用規約**] に同意するには、チェック ボックスをオンにします。\n\n1. **[同意する**] を選択します。\n\n      ![利用規約](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)\n\n1. **[保存]** を選択します。\n\n      ![[Teams] を選択します](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   \n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n ```bash\n ngrok http -host-header=localhost 3978\n ```\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から HTTPS URL (https から io) をコピーします。\n\n    ![ngrok HTTPS URL](~/assets/images/Tab-ME-SSO/ngrok-image.png)\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n    > は `WebAppDomain` 、完全修飾ドメイン名であり、ドメイン名には含 `https://` まれません。\n\n1. 作成した Azure ボットの **設定** で、[構成] を選択 **します**。\n\n1. **メッセージング エンドポイント** で、ngrok から入手できる HTTPS URL を使用し、URL の最後に **/api/messages** を追加します。\n\n    ![メッセージング エンドポイント](~/assets/images/Tab-ME-SSO/messaging-endpoint.png)\n\n1. **[適用]** を選択します。\n\n    Azure Bot Serviceでボットが正常に設定されました。\n"
- title: タブの SSO を構成する
  durationInMinutes: 1
  content: "1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **Azure Active Directory** を選択します。\n\n1. 左側のウィンドウを形成し、[ **アプリの登録**] を選択します。\n\n1. ボットを選択します。\n\n1. [ **API の公開] を選択します**。\n\n1. [ **設定**] を選択します。\n\n   ![API を公開する](~/assets/images/Tab-ME-SSO/application-id-set.png)\n\n1. **アプリケーション ID URI を** 次の`api://your ngrok/botid-{your AppID}`形式で設定します。\n\n   ![リンクを設定する](~/assets/images/Tab-ME-SSO/appid-uri1.png)\n    \n1. **[スコープの追加]** を選択します。 \n\n1. 表示されるパネルで、**スコープ名** として入力`access_as_user`します。\n\n1. **[同意できるユーザー] を** `Admins and users`[ .\n\n1. スコープの適切な値を使用して管理者とユーザーの同意プロンプトを `access_as_user` 構成するには、フィールドに次の情報を入力します。</br>\n\n   * **同意表示名管理** 入力`Teams can access the user’s profile`します。\n\n   * **同意の説明管理** 入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n   * **ユーザー同意表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n   * **ユーザーの同意の説明** として入力`Enable Teams to call this app’s APIs with the same rights as the user`します。\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n1. [保存 **するスコープの追加]** を選択します。\n\n   ![Scopes](~/assets/images/Tab-ME-SSO/add-a-scope.png)\n\n    > [!NOTE]\n    > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。</br>\n       `api://your ngrok/botid-00000000-0000-0000-0000-000000000000/access_as_user`\n\n      ![Scopes](~/assets/images/Tab-ME-SSO/add-a-scope-final1.png) \n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。 \n\n1. **[クライアント アプリケーションの追加]** を選択します。 \n\n1. 次の各クライアント ID を入力し、承認されたスコープを選択します。</br>\n\n     * `1fec8e78-bce4-4aaf-ab1b-5451cc387264` (Teams モバイルまたはデスクトップ アプリケーション)\n\n       ![クライアント アプリケーションを追加する](~/assets/images/Tab-ME-SSO/add-client-application.png) \n\n     * `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` (Teams Web アプリケーション)\n\n       ![クライアント アプリケーションを追加する](~/assets/images/Tab-ME-SSO/add-client-application21.png) \n    \n\n   次の図は **、クライアント ID を** 表示します。\n\n     ![クライアント アプリケーション](~/assets/images/Tab-ME-SSO/client-id-2.png) \n\n1. 左側のパネルで、[ **API アクセス許可**] を選択します。 \n\n   > [!NOTE]\n   > ユーザーは、Azure AD アプリが別のテナントに登録されている場合にのみ、これらのアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n1. **[Microsoft Graph]** を選択します。\n\n   ![Microsoft Graph](~/assets/images/Tab-ME-SSO/microsoft-graph.png)\n\n1. [**委任されたアクセス許可**] を選択します。\n\n1. 以下のアクセス許可を追加します。</br>\n    * **email**\n    * **offline_access**\n    * **Openid**\n    * **profile**\n    * **User.Read**\n\n1. **[アクセス許可の追加]** を選択します。\n\n1. 左側のパネルで [ **認証** ] を選択してリダイレクト URI を設定します。 \n\n   > [!NOTE]\n   > アプリに IT 管理者の同意が付与されていない場合、ユーザーはアプリを初めて使用する際に同意を提供する必要があります。\n           \n     1. **[プラットフォームの追加]** を選択します。\n     1. **[Web]** を選びます。\n\n        ![Web](~/assets/images/Tab-ME-SSO/configure-platform1.png)\n\n     1. **リダイレクト URI を** 次のように`https://token.botframework.com/.auth/web/redirect`入力します。\n\n     1. 次のチェック ボックスをオンにして **、暗黙的な許可フローとハイブリッド フロー** を有効にします。\n         * **ID トークン**\n         * **アクセス トークン**\n\n     1. **[構成]** を選択します。\n\n        ![Web を構成する](~/assets/images/Tab-ME-SSO/configure-web.png)\n\n**マニフェストを更新するには**\n\n1. 左側のウィンドウで **[マニフェスト]** を選択します。\n\n1. 構成項目が次に設定されていることを確認します **\"accessTokenAcceptedVersion\": 2**。 そうでない場合は、その値を **2** に変更し、[ **保存]** を選択します。 \n\n   > [!Tip]\n   > Teams でボットを既にテストしている場合は、ボットからサインアウトし、Teams からサインアウトする必要があります。 その後、もう一度サインインして、この変更を確認します。\n\n   ![マニフェストを更新する](~/assets/images/bots/update-manifest.png)</br>\n\n**Bot Service接続を設定するには**\n\n1. **[構成] ページ** > の **[OAuth 接続設定の追加]** に移動します。\n\n1. **[OAuth 接続設定の追加]** を選択します。\n\n1. **[新しい接続設定]** で、次の詳細を入力します。\n\n    | フィールド | 値または説明 |\n    | ----- | ----- |\n    | **名前** | 新しい接続設定の名前を入力します。 この名前は、ボット サービス コードの設定で使用できます。 |\n    | **サービス プロバイダー** | **Azure Active Directory V2 を選択します**。 |\n    | **クライアント ID** | 以前に **Microsoft アプリ ID** として保存しました。 |\n    | **クライアント シークレット** | 以前にクライアント シークレット ID の **値** として保存しました。 |\n    | **トークン交換 URL** | API エンドポイントの公開中に以前に取得した **アプリケーション ID URI を** 使用します。 |\n    | **テナント ID** | common と入力 **します**。 |\n    | **Scope** | **User.Read** と入力し、選択したすべてのスコープを追加し **、** ダウンストリーム API へのアクセス許可を指定します。 |\n\n1. **[保存]** を選択します。\n\n    <img src=\"~/assets/images/Tab-ME-SSO/new-connection-setting.png\" alt=\"Bot Service connection\" width=\"300\"/>\n"
- title: アプリの設定を設定する
  durationInMinutes: 1
  content: "1. 複製されたリポジトリで **appsettings.json** に移動します。\n\n    ![アプリ設定の場所](~/assets/images/Tab-ME-SSO/app-setting-folder.png)\n\n1. **Visual Studio Code** で **appsettings.json を** 開き、次の情報を更新します。  \n\n     * ボットの **Microsoft アプリ ID に** 設定`\"MicrosoftAppId\"`します。\n     * ボットのクライアント シークレット ID 値に設定 `\"MicrosoftAppPassword\"` します。\n     * ngrok URL に設定 `\"DOMAIN-NAME\"` します。\n     * OAuth 接続設定の名前に設定 `\"ConnectionName\"` します。\n     * ボットの **Microsoft アプリ ID に** 設定`\"ClientId\"`します。\n     * ボットのクライアント シークレット ID 値に設定 `\"AppSecret\"` します。\n     * の形式`api://584f****.ngrok.io/botid-{AppID}`で設定`\"ApplicationIdURI\"`します。\n\n    ![アプリの設定](~/assets/images/Tab-ME-SSO/app-setting1.png)\n"
- title: マニフェスト ファイルを設定する
  durationInMinutes: 1
  content: "1. 複製されたリポジトリ内に `manifest.json` 移動します。\n\n    ![マニフェスト ファイルの場所](~/assets/images/Tab-ME-SSO/folder-manifest.png)\n\n1. **Visual Studio Code** で開`manifest.json`き、次の変更を加えます。\n\n     * すべての出現箇所を `[DOMAIN-NAME]` ngrok ドメイン名に置き換えます。 \n     * すべての出現箇所をボットの `[YOUR-MICROSOFT-APP-ID]` **Microsoft アプリ ID に** 置き換えます。\n\n         > [!NOTE]\n         > シナリオ `[YOUR-MICROSOFT-APP-ID]` に応じて、 `[DOMAIN-NAME]` 複数回発生する可能性があります。\n\n     * として設定 `\"resource\"` します `api://584f****.ngrok.io/botid-{AppID}`。</br>\n    \n    ![マニフェスト イメージ 2](~/assets/images/Tab-ME-SSO/vs-manifest.png)\n"
- title: サービスをビルドして実行する
  durationInMinutes: 1
  content: "**Visual Studio 2019 またはコマンド ラインを使用してサービスをビルドして実行するには**\n\n# <a name=\"visual-studio-2019\"></a>[Visual Studio 2019](#tab/vs2019)\n\n   1. **Visual Studio 2019 を起動します**。\n   1. **ファイル** > **を開く** > **プロジェクト/ソリューション** に移動します。\n\n      ![ファイルを開く](~/assets/images/Tab-ME-SSO/open-project1.png)\n\n   1. **csharp** フォルダーから **App SSO Sample.csproj** ファイルを選択します。\n\n      ![Project フォルダー](~/assets/images/Tab-ME-SSO/project-folder1.png)\n\n   1. 次の出力が表示されます。\n\n      ![トークン ファイル](~/assets/images/Tab-ME-SSO/output1.png)\n\n   1. **F5** キーを押してプロジェクトを実行します。\n\n   1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n      ![証明書を信頼する](~/assets/images/sbs-outgoing-webhooks/outgoing-webhook-certificate.png)\n\n      Web ページが開き、 **ボットの準備が完了しました。**\n\n      ![アプリの準備完了](~/assets/images/Tab-ME-SSO/bot-completion-explorer.png) \n\n    \n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nコマンド プロンプト ウィンドウで **csharp** フォルダーに移動し、次のコマンドを入力します。\n\n```bash\ndotnet run\n```\n\n![Dotnet](~/assets/images/Tab-ME-SSO/dotnet-run1.png)\n  \n"
- title: TEAMS に SSO アプリをアップロードする
  durationInMinutes: 1
  content: "1. 複製されたリポジトリで、 **csharp > App SSO サンプル > TeamsAppManifest** に移動します。\n\n1. **マニフェスト** フォルダーに存在する次のファイルを含む.zipを作成します。 \n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n   ![zip ファイルを選択する](~/assets/images/Tab-ME-SSO/upload-tab-me-sso.png)\n\n1. **Microsoft Teams** に移動します。\n\n1. [ **ストア**] を選択します。\n1. **[アプリの管理]** を選択します。\n1. [**アプリ の発行**] を選択します。\n\n   ![Dotnet](~/assets/images/Tab-ME-SSO/publish-an-app.png)\n\n1. **[カスタム アプリをアップロードする]** を選択します。 \n\n   ![カスタム アプリをアップロードする](~/assets/images/Tab-ME-SSO/upload-custom-app.png)\n\n1. **[開く]** を選択して、**マニフェスト** フォルダーに作成した.zip ファイルをアップロードします。\n\n   ![zip ファイルを選択する](~/assets/images/Tab-ME-SSO/upload-tab-me-sso-open.png)\n\n1. **[追加]** を選択します。\n\n   ![アプリを追加する](~/assets/images/Tab-ME-SSO/add-sso-app.png)\n\n1. ボットにメッセージを送信します。 \n1. ボットはシングル サインオンを実行し、トークンを表示するオプション プロンプトと共にプロファイル カードを表示します。\n\n   ![プロファイル カード](~/assets/images/Tab-ME-SSO/Congratulation-image.png)\n\n1. [ **はい** ] を選択してトークンを表示するか **、[いいえ] を** 選択してチャットを続行します。\n  \n   ![トークン ビュー](~/assets/images/Tab-ME-SSO/token-view1.png)\n\n  1. SSO が実行されていない場合、ボットはタブの既定の認証方法を実行します。\n\n      ![SSO なし](~/assets/images/Tab-ME-SSO/not-login11.png)\n\n  1. 省略記号 **...** を選択して、メッセージ拡張子を開きます。\n\n      ![メッセージ拡張機能](~/assets/images/Tab-ME-SSO/message-extension.png)\n  \n  1. 新しい SSO アプリケーションを選択します。\n\n      ![SSO アプリ](~/assets/images/Tab-ME-SSO/recent-app-sso.png)\n\n  1. [ **サインイン**] を選択します。\n\n      ![サインイン](~/assets/images/Tab-ME-SSO/sign-in-sso1.png)\n\n  1. [サインイン] ボックスに資格情報を入力し、[ **次へ**] を選択します。\n\n      ![[サインイン] ボックス](~/assets/images/Tab-ME-SSO/sign-in-box.png)\n  \n  1. **[同意する]** を選択します。\n\n      ![同意ボックス](~/assets/images/Tab-ME-SSO/concent-box.png)\n\n  1. メッセージ拡張機能を開き、アプリケーションを選択します。\n\n  1. 検索ボックスでプロファイルを選択します。 次のような内容が表示されます。\n\n      ![プロファイル](~/assets/images/Tab-ME-SSO/hello-megan-profile.png)\n\n  1. アプリケーションに送信 `https://profile.botframework.com` して、プロファイル カードを取得します。\n   \n      ![プロファイル カード](~/assets/images/Tab-ME-SSO/profile-card.png)\n"
- title: チャレンジを完了する
  durationInMinutes: 1
  content: >
    このようなことを思い付いたのですか?

       ![SSO プロファイル](~/assets/images/Tab-ME-SSO/hello-megan-profile245.png)
- content: タブとメッセージ拡張機能アプリの SSO の使用を開始するためのチュートリアルを完了しました。
