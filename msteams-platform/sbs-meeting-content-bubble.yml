### YamlMime:Tutorial
title: 会議内通知を生成する
metadata:
  title: 会議内通知を生成する
  description: この学習モジュールでは、出席者と共に Teams のボットを使用して会議内通知に返信を送信する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 12/03/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/build-tabs-for-meeting.md
  nextTutorialTitle: 詳細については、会議のアプリを有効にして構成する
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 5af5c91b30f6af922ae0880d723f2310adedb75b
  ms.sourcegitcommit: 10debe0f01574a21aab54bfac692a4c8373263a8
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 10/31/2022
  ms.locfileid: "68790011"
items:
- durationInMinutes: 1
  content: "Microsoft Teams は、ボットを使用して会議内通知を生成して操作するのに役立ちます。\n\n**会議内通知の主な機能**:\n\n* アダプティブ カードに一覧表示されている議題項目を表示します。\n* 指定された議題の任意のオプションを選択します。\n* 会議中の通知またはチャットで送信されたアダプティブ カードに関するフィードバックを送信します。\n\n> [!NOTE]\n> 会議内通知は Azure AD ユーザーにのみ使用でき、匿名ユーザーには使用できません。\n\nこのステップ バイ ステップ ガイドは、出席者との Teams 会議でボットを使用して会議内通知を生成するのに役立ちます。 次の出力が表示されます。\n\n  :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/desktop-and-mobile-image-final.png\" alt-text=\"会議内通知の概要\":::\n\n \n"
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境をセットアップしてください。  \n\n | &nbsp; | インストール | 使用するには... |\n | --- | --- | --- |\n | **必須** | &nbsp; | &nbsp; |\n | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべてのアプリを通じて作業するすべてのユーザーと 1 か所で共同作業を行います。|\n | &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.microsoft.com)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • **ASP.NET と Web 開発** <br> • **.NET Core クロスプラットフォーム開発** | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |\n | &nbsp; | [.NET Core SDK バージョン 3.1](https://dotnet.microsoft.com/en-us/download) | ローカル デバッグとAzure Functionsアプリのデプロイ用にカスタマイズされたバインド。 .NET 3.1 (以降) SDK をグローバルにインストールしていない場合は、移植可能なバージョンをインストールできます。 |\n | &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話型ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリには必要ありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken を](https://ngrok.com/download)インストールします。\n\n[C#](/dotnet/csharp/fundamentals/tutorials/how-to-display-command-line-arguments) に関する実用的な知識があることを確認します。\n"
- title: ローカル環境を設定する
  durationInMinutes: 1
  content: "\n1. [Microsoft Teams サンプル](https://github.com/OfficeDev/Microsoft-Teams-Samples)を開きます。\n1. [ **コード] を選択します**。\n1. ドロップダウン メニューから、[ **GitHub Desktop で開く**] を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-clonerepository_1.png\" alt-text=\"リポジトリを複製する\":::\n\n1. [ **複製] を選択します**。 \n\n   > [!NOTE]\n   > エラー **Filename が長すぎる** 場合は、任意の管理者ターミナルで git コマンド `git config --system core.longpaths true` を適用します。\n"
- title: ボットを作成して登録する
  durationInMinutes: 5
  content: "次の手順は、Azure portalでボットを作成して登録するのに役立ちます。\n\n* Azure Bot リソースを作成して、ボットを Azure Bot Serviceに登録します。\n* クライアント シークレットを作成して、ボットの SSO 認証を有効にします。\n* Teams チャネルを追加してボットをデプロイします。\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Azure portal](https://portal.azure.com/) にアクセスします。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに「 **Azure Bot**」と入力します。\n1. **Enter** キーを押します。\n1. [ **Azure Bot**] を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/azure-bot_1.png\" alt-text=\"Azure ボット。\":::\n\n1. **[作成]** を選択します。\n1. [Bot handle]\\(ボット ハンドル\\) に必要な **ボット ハンドル** 名を入力します。\n1. ドロップダウン リストから **[サブスクリプション]** を選択します。\n1. ドロップダウン リストから **[リソース グループ]** を選択します。\n \n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-review-plus-create_1.png\" alt-text=\"リソース Azure ボットを作成する\":::\n\n   新しいリソース グループを作成するには、[ **新規作成** ] を選択>リソース名を入力> **[OK] を選択します**。 [ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n   \n     :::image type=\"content\" source=\"~/assets/images/bots/newresource.png\" alt-text=\"リソース Azure ボットを作成する\":::\n\n1. [ **Microsoft アプリ ID** ] セクションで、既定で [ **新しい Microsoft アプリ ID の作成** ] が選択されています。 \n\n   [ **既存のアプリの登録を使用する** ] を選択し、既存 **のアプリ ID**、 **アプリ テナント ID**、 **MSI リソース ID を** 入力することもできます。\n\n   > [!NOTE]\n   > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n1. [**マルチテナント**] として [**アプリの種類]** を選択します。\n\n1. **[確認 + 作成]** を選びます。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/Review-create_1.png\" alt-text=\"作成の確認\":::\n\n1. 検証に合格した場合は、**[作成]** を選択します。\n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n1. [**リソースに移動**] を選びます。 \n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-botdeployment_1.png\" alt-text=\"アプリのデプロイ\":::\n    \n    Azure ボットが作成されます。\n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-creating-resource-group_1.png\" alt-text=\"Azure ボット リソースが作成されました\":::\n\n**クライアント シークレットを作成するには**\n\n  新しい **Microsoft アプリ ID** を作成した場合は、次の手順を実行します。\n\n1. 左側のパネルで、[構成] を選択 **します**。 \n\n   > [!TIP]\n   > 今後参照するために **、Microsoft アプリ ID** または **クライアント ID を** 保存します。      \n\n1. **[Microsoft アプリ ID] の** 横にある [管理] を選択 **します**。\n\n   :::image type=\"content\" source=\"~/assets/images/manage-bot-label_1.png\" alt-text=\"管理\":::\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 \n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-newclientsecret_1.png\" alt-text=\"新しいクライアント シークレット\":::\n    \n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-clientsecret_1.png\" alt-text=\"アプリにクライアント シークレットを追加する\":::\n\n1. [ **値** ] 列で、[ **クリップボードにコピー**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-client-secret_1.png\" alt-text=\"クライアント シークレットの値\":::\n   \n   > [!TIP]\n   > 後で参照するために、 **クライアント シークレットの** 値またはアプリ パスワードを保存します。\n\n**Teams チャネルを追加するには**\n\n1. [**ホーム**] を選択します。\n\n1. [ **最近使ったリソース**] からボットを選択します。\n\n1. 左側のウィンドウで [**チャネル**] を選択し、[**Microsoft Teams**] を選択します <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n    :::image type=\"content\" source=\"~/assets/images/adaptive-cards/channel-teams.png\" alt-text=\"チャネルで Teams を選択する\":::\n\n1. **Microsoft Teams を選択する** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n1. チェックボックスをオンにして **、利用規約** に同意します。\n\n1. [ **同意する] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-terms_1.png\" alt-text=\"サービス利用規約\":::\n\n1. **[適用]** を選択します。\n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok またはコマンド プロンプトを使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n ```bash\n ngrok http --host-header=localhost 3978\n ```\n\n > [!NOTE]\n > ngrok トンネルの作成時に、コマンド **ライン** を選択してアプリを実行する場合は、 ではなく `3978` を使用`localhost 5000`します。\n \n > [!TIP]\n > **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに記載されている手順に従ってサインアップし、ngrok を認証します。 `ngrok http --host-header=localhost 3978` コマンドを実行します。\n\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から HTTPS URL をコピーします。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/ngrok-url_2.png\" alt-text=\"ngrok HTTPS URL\":::\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n    > `WebAppDomain`は、それに含`https://`まれていない完全修飾ドメイン名です。\n\n1. 作成した Azure ボットの **[設定]** で、[構成] を選択 **します**。\n\n1. **メッセージング エンドポイント** で、ngrok から使用できる HTTPS URL を使用し、URL の末尾に **/api/messages** を追加します。\n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-config-messaging-end-point_1.png\" alt-text=\"メッセージング エンドポイント\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot Serviceでボットが正常に設定されました。\n"
- title: Azure AD アプリの登録を更新する
  durationInMinutes: 1
  content: "\n1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **Azure Active Directory** を選択します。\n\n1. 左側のパネルで、[ **アプリの登録**] を選択します。\n\n1. ボットを選択します。\n\n1. [**管理**] で [**API の公開**] を選択します。\n\n1. [ **設定] を選択します**。\n\n1. **アプリケーション ID URI を** の形式`api://your ngrok/botid-{AppID}`で設定します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-set-api_1.png\" alt-text=\"リンクの設定\":::\n\n   次の図は、ドメイン名を示しています。\n    \n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-exposeapi_1.png\" alt-text=\"アプリ ID URI\":::\n\n    > [!NOTE]\n    > ngrok などのトンネリング サービスを使用している場合は、ngrok サブドメインが変更されるたびに値を更新してください。\n    > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`は `f631****.ngrok.io` 新しい ngrok サブドメイン名です。\n\n1. **[スコープの追加]** を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/selectscope_1.png\" alt-text=\"スコープの追加\":::\n        \n1. 表示されるパネルで、**スコープ名** として「」と入力`access_as_user`します。\n\n1. [ **同意できるユーザー]** を に `Admins and users`設定します。\n\n1. スコープの適切な値 `access_as_user` を使用して管理者とユーザーの同意プロンプトを構成するには、フィールドに次の情報を指定します。\n\n     * **同意の表示名管理** 入力`Teams can access the user’s profile`します。\n\n     * **同意の説明として「管理**」と入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n     * **[ユーザーの同意] 表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n     * **[ユーザーの同意の説明]** として入力`Enable Teams to call this app’s APIs with the same rights as the user`します。\n\n   次の図は、フィールドと値を示しています。\n\n      :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-access-as-user_1.png\" alt-text=\"スコープを追加する\":::\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n1. [ **スコープの追加]** を選択して保存します。\n\n\n   > [!NOTE]\n   > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。\n       `api://****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-add-scope_1.png\" alt-text=\"スコープ\":::\n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。 \n\n1. **[クライアント アプリケーションの追加]** を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-selectclientapp_1.png\" alt-text=\"クライアント アプリを追加する\":::\n\n1. 「 **クライアント ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application」と入力します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-addclientapp1.png\" alt-text=\"クライアント アプリケーションの追加 1\":::\n\n   「 **クライアント ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams Web アプリケーション」と入力できます。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-addclientapp2.png\" alt-text=\"クライアント アプリケーションの追加 2\":::\n\n1. [ **承認されたスコープ] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-add-client-app_1.png\" alt-text=\"クライアント アプリケーションを追加する\":::\n\n   次の図は、クライアント ID を表示します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-client-applications.png\" alt-text=\"クライアント アプリケーション\":::\n\n1. 左側のパネルで、[ **API アクセス許可**] を選択します。 \n\n   > [!NOTE]\n   > ユーザーは、Azure AD アプリが別のテナントに登録されている場合にのみ、これらのアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/add-permission_1.png\" alt-text=\"アクセス許可の追加\":::\n\n1. **[Microsoft Graph]** を選択します。\n\n1. [**委任されたアクセス許可**] を選択します。\n\n1. 以下のアクセス許可を追加します。\n     * **email**\n     * **offline_access**\n     * **Openid**\n     * **profile**\n     * **User.Read**\n\n1. **[アクセス許可の追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-otherpermissions.png\" alt-text=\"その他のアクセス許可\":::\n\n1. 左側のパネルで、[ **認証** ] を選択してリダイレクト URI を設定します。 \n\n   > [!NOTE]\n   > アプリに IT 管理者の同意が付与されていない場合、ユーザーは初めてアプリを使用する際に同意を提供する必要があります。\n           \n     1. **[プラットフォームの追加]** を選択します。\n     1. **[Web]** を選びます。\n\n         :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-platform-web_1.png\" alt-text=\"Web\":::\n\n     1. 完全修飾ドメイン名 に を`auth-end`追加して、アプリのリダイレクト URI を入力します。 `https://your ngrok/auth-end`\n\n     1. 次のチェック ボックスをオンにして、 **暗黙的な許可フローとハイブリッド フロー** を有効にします。\n         * **ID トークン**\n         * **アクセス トークン**\n\n     1. **[構成]** を選択します。\n\n         :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-content-bubble-config-web_1.png\" alt-text=\"Auth-end\":::\n"
- title: アプリ設定を設定する
  durationInMinutes: 1
  content: "1. 複製されたリポジトリの **appsettings.json** に移動します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/navigate-to-meeting-content-bubble-repo_1.png\" alt-text=\"アプリ設定の場所\":::\n\n1. Visual Studio で **appsettings.json** を開き、次の情報を更新します。  \n\n     * ボットの **Microsoft アプリ ID に** 設定`\"MicrosoftAppId\"`します。\n     * ボットのクライアント シークレット ID 値に設定 `\"MicrosoftAppPassword\"` します。\n     * を に設定 `\"BaseURL\"` します `webAppDomain`。\n\n      :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/appsettings-json1_1.png\" alt-text=\"アプリの設定\":::\n"
- title: マニフェスト ファイルを設定する
  durationInMinutes: 1
  content: >
    1. 複製されたリポジトリの **manifest.json** に移動します。


    1. Visual Studio で **manifest.json** を開き、次の変更を行います。

         * **[Microsoft アプリ ID]** に設定`ID`します。
         * **[Microsoft アプリ ID]** に設定`botId`します。
         * **[Web アプリ ドメイン名]** に設定`validDomains`します。

          > [!NOTE]
          > `WebAppDomain` は ngrok ドメインです。

         :::image type="content" source="~/assets/images/meeting-content-bubble/manifest-set_1.png" alt-text="マニフェスト イメージ1":::
- title: サービスをビルドして実行する
  durationInMinutes: 1
  content: "**Visual Studio を使用してサービスをビルドして実行するには**\n\n   1. **Visual Studio を** 開きます。\n   1. **[ファイル** > を **開く****] [プロジェクト/ソリューション**]  >  に移動します。\n\n       :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/meeting-token-generator-VSopenfile_1.png\" alt-text=\"ファイルを開く\":::\n\n   1. **ContentBubbleBot.sln ファイルを** 開きます。\n\n       :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/proj-sln_1.png\" alt-text=\"ファイルを開く\":::\n\n   1. **F5** キーを押してプロジェクトを実行します。\n\n      Web ページが開き、 **ボットの準備ができました!** というメッセージが表示されます。\n\n       :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/your-bot-is-ready.png\" alt-text=\"アプリの準備完了\"::: \n"
- title: 会議内通知アプリを Teams に追加する
  durationInMinutes: 1
  content: "\n1. 複製したリポジトリで、 **csharp > Resources > Manifest** に移動します。\n\n1. **Manifest** フォルダーに存在する次のファイルを含む.zipを作成します。 \n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/create-manifest-zip_1.png\" alt-text=\"Zip ファイル\"::: \n\n1. 少数の発表者と出席者との会議を作成します。\n\n1. 会議が作成されたら、[**アプリの追加]** を選択 **+** します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/add-an-app.png\" alt-text=\"アプリの追加\"::: \n\n1. ポップアップ ウィンドウで、[ **アプリの管理**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/manage-apps_1.png\" alt-text=\"アプリを管理する\"::: \n\n1. **[カスタム アプリをアップロードする]** を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/upload-custom-app_1.png\" alt-text=\"カスタム アプリをアップロードする\"::: \n\n1. [ **開く** ] を選択して、 **Manifest** フォルダーに作成した.zip ファイルをアップロードします。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/Zip-file_1.png\" alt-text=\"zip アプリをアップロードする\":::\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/content-bubble-demo_1.png\" alt-text=\"アプリを追加する\"::: \n\n1. [ **アプリの管理** ] セクションには、アプリケーションの一覧が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/Manage.png\" alt-text=\"アプリを管理する\"::: \n\n1. Teams 会議チャットに移動します。\n\n1. **会議内通知 デモ アプリは** 、会議チャットに自動応答を送信します。\n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/content-bubble-demo-first-reply.png\" alt-text=\"会議中の通知 デモの返信\"::: \n\n1. **hello** メッセージをボットに送信します。\n\n     :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/content-bubble-demo-second-reply.png\" alt-text=\"ボットにメンションする\"::: \n\n1. ボットは、アダプティブ カードに一覧表示されている議題項目を送信します。\n\n1. 任意のオプションを選択し、[ **プッシュ 議題** ] を選択して返信を送信します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/push-agenda.png\" alt-text=\"ボットからアダプティブ カードが送信される\"::: \n\n1. ボットから **フィードバック** アダプティブ カードが送信されます。\n\n1. [ **はい**] または [ **いいえ**] を選択します。\n\n1. **[送信]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/meeting-content-bubble/content-bubble-feedback.png\" alt-text=\"ボットからフィードバック カードが送信される\"::: \n\n    ボットからフィードバック メッセージが送信されます。\n  \n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    このようなものを思いついたのですか?

     :::image type="content" source="~/assets/images/meeting-content-bubble/desktop-and-mobile-image-final.png" alt-text="会議内通知 デモ デスクトップとモバイル":::
- content: チュートリアルを完了して、会議内通知アプリの生成を開始しました。
