### YamlMime:Tutorial
title: プロアクティブ メッセージを送信する
metadata:
  title: プロアクティブ メッセージを送信する
  description: このモジュールでは、ウェルカム メッセージ、スケジュールされたメッセージ、ボットからの通知など、プロアクティブ なメッセージを送信する方法について説明します
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: プロアクティブ メッセージの詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 7420c852b6a7d7880d865fb41cbcd4610bd844e4
  ms.sourcegitcommit: 61003a14e8a179e1268bbdbd9cf5e904c5259566
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/09/2022
  ms.locfileid: "64736983"
items:
- durationInMinutes: 1
  content: "プロアクティブ メッセージとは、ユーザーからの要求に応答していないボットから送信されたメッセージのことです。 これには、次のようなメッセージを含めることができます。\n - ウェルカム メッセージ\n - 通知\n - 予定されたメッセージ\n \nこのステップ バイ ステップ ガイドは、ボットからプロアクティブなメッセージを送信するのに役立ちます。 次の出力が表示されます。\n\n* チャット内のプロアクティブな hello メッセージ        \n![チャットでのプロアクティブな hello](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* アダプティブ カードとしてのプロアクティブな hello メッセージ    \n![アダプティブ カードのプロアクティブ hello](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: 前提条件
  durationInMinutes: 2
  content: "次をインストールしてください。    \n\n* [2019 Visual Studio](https://visualstudio.microsoft.com/downloads/)。\n* [ASP.NET と Web 開発](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer)、または [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) クロスプラットフォーム開発ワークロード。\n* [ngrok](https://ngrok.com/download): 最小限の労力でローカル開発サーバーをインターネットに公開できるクロスプラットフォーム アプリケーション。\n* [無料のTeams開発者テナントを取得します](https://developer.microsoft.com/microsoft-365/dev-program)。\n"
- title: ローカル環境を設定する
  durationInMinutes: 3
  content: "1.  [サンプル コード](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (Zip ファイル) をダウンロードし、ファイルを抽出します。\n1.  抽出されたファイルに移動し、 **ProactiveBot.csproj** をダブルクリックします。 ソリューションがVisual Studioで開きます。\n1.  Visual Studioで、プロジェクト (**ProactiveBot**) を右クリックし、[**ビルド**] を選択してソリューションをビルドします。\n\n    ![プロアクティブボット プロジェクト](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>トラブルシューティング</b></summary>\n\n    **パッケージが見つからない** というエラーが発生した場合は、次の手順に従います。\n\n    1.  **ツール** > **NuGet パッケージ マネージャーパッケージ マネージャー 設定** > に移動します。\n    1.  表示される **[オプション]** ウィンドウで、[**NuGet パッケージ マネージャー** >  **Package ソース**] を選択します。\n    1.  **[追加]** を選択します。\n    1.  **[名前]** フィールドと `https://api.nuget.org/v3/index.json` [**ソース]** フィールドに入力`nuget.org`します。\n    1.  [ **更新]** と **[OK] を選択します**。\n    1.  プロジェクトをリビルドします。\n    <br>\n\n    </details>\n    \n1. 解凍して ngrok をインストールします。\n   * Windows: ダブルクリックします`ngrok.zip`。\n   * Linux または OS X: ターミナルから ngrok を解凍し、コマンドを `unzip /path/to/ngrok.zip` 実行します。\n1. コマンド ラインから次の引数を指定して ngrok を実行します。\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. 次の手順で ngrok ベース URL として参照するには、ngrok URL (画像で強調表示されているように) をコピーします。 \n\n    ![ngrok ベース URL](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: アプリTeams作成してインストールする
  durationInMinutes: 5
  content: "1. **App Studio** Teams >に移動し、ダウンロードした`AppManifest.zip`サンプル コード (Zip ファイル) で使用できるファイルをインポートします。\n\n    ![App Studio インポート アプリ](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. **BotsSet up を** > 選択 **します**。\n\n    ![ボットのセットアップ](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. 表示される **[ボットのセットアップ** ] ウィンドウで、「 **名前** ( **プロアクティブ メッセージ デモ** など)」と入力し、[ **個人用**] を選択し、[ **ボットの作成** ] を選択してボットを作成します。\n\n    ![ボット ID を作成する](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. (コピーした) ngrok ベース URL に **/api/messages** を追加し、 **ボット エンドポイント アドレス** として設定します。 URL は次のようになります `https://yourngrokdomain.ngrok.io/api/messages`。\n\n    ![ボット エンドポイント アドレス](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. 変更が有効になるまで数秒待ちます。     \n\n    > 時間がかかる場合は、[ **タブ]** を選択し、[ **Bots** ] セクションを選択して強制的に更新します。\n    \n1. **[新しいパスワードの生成**] を選択して新しいアプリ パスワードを生成し、それをコピーします。 \n\n    ![アプリパスワードを生成する](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Visual Studioに移動し、**appsettings.json ファイルを** 開きます。  の値 `MicrosoftAppPassword`としてパスワードを貼り付けます。    \n1. **App Studio** に移動し、アプリ ID をコピーします。 \n\n    ![アプリ ID を生成する](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Visual Studioに移動し、**appsettings.json ファイルを** 開きます。  アプリ ID を値 `MicrosoftAppId`として貼り付けます。 `appsettings.json`次の設定値があります。    \n\n    ![Appsetting 値](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. **F5** キーを押すか、**IIS Express** を選択してコードを実行します。\n\n    ![コードを実行する](~/assets/images/proactive-scenario/run-code.png)\n\n    対応するプロアクティブ なメッセージ サンプルが表示されます。  \n\n    ![プロアクティブ メッセージのサンプル](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. **Test and distributeInstall** >  に移動して、同じアプリをもう一度インストールします。\n\n    ![アプリのインストール](~/assets/images/proactive-scenario/install-app.png)   \n\n1. チャットで `http://localhost:3978/api/notify` プロアクティブな Hello メッセージを取得する URL を選択します。\n\n    ![プロアクティブ メッセージの送信](~/assets/images/proactive-scenario/result.png)\n\n1. Teamsに移動します。 インストールが成功すると、ボットからプロアクティブな hello メッセージが表示されます。          \n\n    ![チャットでのプロアクティブな hello](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: アダプティブ カードをプロアクティブ メッセージに追加する
  durationInMinutes: 10
  content: "1. Visual Studioで、デバッグ プロセスを停止します。\n\n    ![デバッグを停止する](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. [**依存関係**] を右クリックし、[**NuGet パッケージの管理**] を選択します。\n\n    ![アダプティブ カード パッケージの追加 1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. **NuGet ProactiveBot** で、[**参照**] を選択し、[**AdaptiveCards**] を検索します。 [**インストール**] を選択します。 \n\n    ![アダプティブ カード パッケージを追加する2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. **NotifyController.cs** ファイルを開き、既存`BotCallback`のコードを次のコードに置き換えてアダプティブ カード メッセージを送信します。     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. 波線の赤い線にマウス ポインターを合わせ、 **AdaptiveCards を使用して** エラーを解決します。 \n\n    ![エラーを解決する](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. **F5** キーを押してコードを実行します。 \n1. Teamsに移動し、アプリをアンインストールします。 \n    \n    ![アプリをアンインストールする](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. 同じアプリを再インストールしてイベントを取得します `conversationUpdate` 。   \n\n1. アダプティブ カードで [http://localhost:3978/api/notify](http://localhost:3978/api/notify) プロアクティブな hello メッセージを取得する URL を選択します。     \n"
- title: チャレンジを完了する
  durationInMinutes: 3
  content: >
    このようなことを思い付いたのですか? アダプティブ カードでのプロアクティブな hello メッセージの表示方法は次のとおりです。


    ![アダプティブ カードのプロアクティブ hello](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    シナリオを完了しました。

    * 毎日通知を送信したり、定期的にユーザーからのフィードバックを要求したりできます。

    * 調整の制限を処理して、複数の通知を回避します。
