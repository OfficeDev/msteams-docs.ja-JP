### YamlMime:Tutorial
title: ボットを使用して Teams でファイルをアップロードする
metadata:
  title: ボットを使用して Teams でファイルをアップロードする
  description: ボットから Teams にファイルをアップロードする方法と、ボットに送信されたファイルを添付ファイルとして受信する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 28/12/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/bots-filesv4.md
  nextTutorialTitle: 詳細については、ボットを介したファイルの送受信に関するページを参照してください
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 8ea4bb70c0acb8eb646b214e19adb134e54b420c
  ms.sourcegitcommit: 6926cf5eee55d5047c11ca13afc7f6f23e270396
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 10/27/2022
  ms.locfileid: "68740550"
items:
- durationInMinutes: 1
  content: "ボットは Teams API を使用して、個人用チャットでユーザーとファイルを送受信します。 Teams で共有されているファイルはカードとして表示され、豊富なアプリ内表示を可能にすることができます。 また、このボットは、ファイル コンテンツの編集を伴う経費報告、画像認識、ファイル アーカイブ、電子署名などの機能の実装にも役立ちます。 \n\n**ボットを使用して Teams にファイルをアップロードする主な機能:** \n\n  * ボットを使用して Teams にファイルをアップロードします。\n  * ボットに送信されたファイルを添付ファイルとして受信します。\n  * メッセージで送信されたインライン イメージをフェッチします。\n\nこのステップ バイ ステップ ガイドは、ボットを使用して Teams でファイルをアップロードするのに役立ちます。 次の出力が表示されます。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png\" alt-text=\"最終的な出力を示すスクリーンショット\":::\n"
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境をセットアップしてください。 \n\n | &nbsp; | インストール | 使用するには... |\n | --- | --- | --- |\n | **必須** | &nbsp; | &nbsp; |\n | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべてのアプリを通じて作業するすべてのユーザーと 1 か所で共同作業を行います。|\n | &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.microsoft.com)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • ASP.NET と Web 開発 <br> • .NET Core クロスプラットフォーム開発 | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |\n | &nbsp; | [.NET Core SDK バージョン 3.1](https://dotnet.microsoft.com/en-us/download) | ローカル デバッグとAzure Functionsアプリのデプロイ用にカスタマイズされたバインド。 .NET 3.1 (以降) SDK をグローバルにインストールしていない場合は、移植可能なバージョンをインストールできます。 |\n | &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話型ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリには必要ありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken を](https://ngrok.com/download)インストールします。\n"
- title: ローカル環境を設定する
  durationInMinutes: 1
  content: "\n1. [BotBuilder-Samples を](https://github.com/Microsoft/BotBuilder-Samples)開きます。\n1. [ **コード] を選択します**。\n1. ドロップダウン メニューから、[ **GitHub Desktop で開く**] を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/botbuilder-sample_1.png\" alt-text=\"リポジトリの複製を示すスクリーンショット\":::\n\n1. [ **複製] を選択します**。 \n"
- title: ボットを作成して登録する
  durationInMinutes: 5
  content: "次の手順は、Azure portalでボットを作成して登録するのに役立ちます。\n\n* Azure Bot リソースを作成して、ボットを Azure Bot Serviceに登録します。\n* クライアント シークレットを作成して、ボットの SSO 認証を有効にします。\n* Teams チャネルを追加してボットをデプロイします。\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Azure portal](https://portal.azure.com/) にアクセスします。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに「 **Azure bot**」と入力します。\n1. **Enter** キーを押します。\n1. [ **Azure Bot**] を選択します。\n\n   :::image type=\"content\" source=\"./assets/images/azure-bot_1.png\" alt-text=\"Azure ボット。\":::\n\n1. **[作成]** を選択します。\n1. [Bot handle]\\(ボット ハンドル\\) に必要な **ボット ハンドル** 名を入力します。\n1. [ **サブスクリプション** ] ドロップダウン リストから、サブスクリプションを選択します。\n1. [ **リソース グループ** ] ドロップダウン リストから、既存のリソース グループを選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/selection-of-resource_1.png\" alt-text=\"azure リソースの選択\":::\n   \n   新しいリソース グループを作成するには、[ **新規作成** ] を選択>リソース名を入力> **[OK] を選択します**。 [ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n   \n    :::image type=\"content\" source=\"../msteams-platform/assets/images/bots/newresource.png\" alt-text=\"新しいリソースの場所の選択\":::\n\n1. [ **Microsoft アプリ ID** ] セクションで、既定で [ **新しい Microsoft アプリ ID の作成** ] が選択されています。 \n\n    [ **既存のアプリの登録を使用する** ] を選択し、既存 **のアプリ ID**、 **アプリ テナント ID**、 **MSI リソース ID を** 入力することもできます。\n\n    > [!NOTE]\n    > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n1. [**マルチテナント**] として [**アプリの種類]** を選択します。\n\n1. **[確認 + 作成]** を選びます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/review-create_1.png\" alt-text=\"新しいボットの作成\":::   \n\n1. 検証に合格した場合は、**[作成]** を選択します。 \n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n1. [**リソースに移動**] を選びます。 \n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/deployment_1.png\" alt-text=\"リソースの選択\":::\n    \n    Azure ボットが作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/azure-bot-created_1.png\" alt-text=\"ボットの作成\":::\n\n **クライアント シークレットを作成するには**\n\n   新しい **Microsoft アプリ ID** を作成した場合は、次の手順を実行します。\n\n1. 左側のパネルで、[構成] を選択 **します**。 \n\n   > [!TIP]\n   > 今後参照するために **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **[Microsoft アプリ ID] の** 横にある [管理] を選択 **します**。\n\n   :::image type=\"content\" source=\"~/assets/images/manage-bot-label_1.png\" alt-text=\"ボットを管理する\":::\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 \n\n   :::image type=\"content\" source=\"~/assets/images/meetings-side-panel/newclientsecret_2.png\" alt-text=\"クライアント シークレットの追加\" border=\"true\":::\n\n        \n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。\n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-client-secret_1.png\" alt-text=\"クライアント シークレットと説明の追加\"::: \n\n   \n1. [ **値** ] 列で、[ **クリップボードにコピー**] を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/copy-value_1.png\" alt-text=\"値をクリップボードにコピーする\":::\n\n         \n   > [!TIP]\n   > 後で参照するために、 **クライアント シークレットの** 値またはアプリ パスワードを保存します。\n\n**Teams チャネルを追加するには**\n\n1. [**ホーム**] を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/go-to-home_1.png\" alt-text=\"ホームを選択する\":::    \n\n   \n1. [ **最近使ったリソース**] からボットを選択します。\n\n1. 左側のウィンドウで [**チャネル**] を選択し、[**Microsoft Teams**] を選択します <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n\n   :::image type=\"content\" source=\"~/assets/images/adaptive-cards/channel-teams_1.png\" alt-text=\"チャネルで Teams を選択する\":::\n  \n1. チェックボックスをオンにして **、利用規約** に同意します。\n\n1. [ **同意する] を選択します**。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/terms_1.png\" alt-text=\"用語を選択する\":::\n\n  \n1. **[適用]** を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/apply-teams_1.png\" alt-text=\"microsoft teams\":::\n\n  \n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok またはコマンド プロンプトを使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n ```bash\n ngrok http --host-header=localhost 3978\n ```\n\n> [!TIP]\n> **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに記載されている手順に従ってサインアップし、ngrok を認証します。 `ngrok http --host-header=localhost 3978` コマンドを実行します。\n\n**メッセージング エンドポイントを追加するには**\n\n   1. ngrok から HTTPS URL をコピーします。\n   \n      :::image type=\"content\" source=\"../msteams-platform/assets/images/ngrok-url_3.png\" alt-text=\"ngrok HTTPS URL\":::\n      \n      > [!NOTE]\n      > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n      > `WebAppDomain`は、それに含`https://`まれていない完全修飾ドメイン名です。\n\n   1.  作成した Azure ボットの **[設定]** で、[構成] を選択 **します**。\n\n   1.  **メッセージング エンドポイント** で、ngrok から使用できる HTTPS URL を使用し、URL の末尾に **/api/messages** を追加します。\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-api-teams-bot_1.png\" alt-text=\"api の追加\":::\n    \n   1. **[適用]** を選択します。\n\n      Azure Bot Serviceでボットが正常に設定されました。\n"
- title: Azure AD アプリの登録を更新する
  durationInMinutes: 5
  content: "1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **Azure Active Directory** を選択します。\n\n1. 左側のウィンドウで、[ **アプリの登録**] を選択します。\n\n1. ボットを選択します。\n   \n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/select-your-bot_1.png\" alt-text=\"ボットの選択\":::\n\n1. [ **API の公開] を選択します**。\n\n1. [ **設定] を選択します**。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/set-api_1.png\" alt-text=\"api の設定\":::\n\n1. **アプリケーション ID URI を** の形式`api://your ngrok/botid-{your AppID}`で設定します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/app-id-uri1_1.png\" alt-text=\"リダイレクト URI\":::\n\n   次の図は、ドメイン名を示しています。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/expose-api_1.png\" alt-text=\"api\":::\n\n    > [!NOTE]\n    > ngrok などのトンネリング サービスを使用している場合は、ngrok サブドメインが変更されるたびに値を更新してください。\n    > たとえば、 `api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2``f631****.ngrok.io` は新しい ngrok サブドメイン名です。\n\n1. **[スコープの追加]** を選択します。 \n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/meetings-side-panel/selectscope_2.png\" alt-text=\"スコープの選択\":::\n\n1. 表示されるパネルで、**スコープ名** として「」と入力`access_as_user`します。\n\n1. [ **同意できるユーザー]** を に `Admins and users`設定します。\n\n1. スコープの適切な値 `access_as_user` を使用して管理者とユーザーの同意プロンプトを構成するには、フィールドに次の情報を指定します。</br>\n\n     * **同意の表示名管理** 入力`Teams can access the user’s profile`します。\n\n     * **同意の説明として「管理**」と入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n     * **[ユーザーの同意] 表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n     * **[ユーザーの同意の説明]** として入力`Enable Teams to call this app’s APIs with the same rights as the user`します。\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n1. [ **スコープの追加]** を選択して保存します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-a-scope_1.png\" alt-text=\"スコープの追加\":::\n\n    > [!NOTE]\n    > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。</br>\n       `api://9179****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/access-as-user_1.png\" alt-text=\"アクセスをユーザーとして表示する\":::\n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。\n\n1. **[クライアント アプリケーションの追加]** を選択します。 \n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/selectclientapp_1.png\" alt-text=\"クライアント アプリ\":::\n\n1. 「 **クライアント ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application」と入力します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/client-id-mobile_1.png\" alt-text=\"クライアント モバイル\":::  \n\n   「 **クライアント ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams Web アプリケーション」と入力できます。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/client-web_1.png\" alt-text=\"クライアント ID Web\":::\n\n   次の図は、 **クライアント ID を** 表示します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/client-id-teams-bot.png\" alt-text=\"ids を表示する\":::   \n\n1. 左側のパネルで、[ **API アクセス許可**] を選択します。 \n\n   > [!NOTE]\n   > ユーザーは、Azure Active Directory アプリが別のテナントに登録されている場合にのみ、API のアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-permission_1.png\" alt-text=\"アクセス許可の追加\":::\n\n1. **[Microsoft Graph]** を選択します。\n\n1. [**委任されたアクセス許可**] を選択します。\n\n1. **User.Read** in アクセス許可を追加します。\n\n1. **[アクセス許可の追加]** を選択します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-permissions_1.png\" alt-text=\"委任されたアクセス許可が追加されました\":::\n\n1. 左側のパネルで、[ **認証** ] を選択してリダイレクト URI を設定します。\n\n   > [!NOTE]\n   > アプリに IT 管理者の同意が付与されていない場合、ユーザーは初めてアプリを使用する際に同意を提供する必要があります。\n\n     1. **[プラットフォームの追加]** を選択します。\n    \n     1. **[Web]** を選びます。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/configure-web_1.png\" alt-text=\"Web 構成\"::: \n\n     1. 完全修飾ドメイン名に追加して、アプリの `auth-end` リダイレクト URI を入力します。</br> \n       `https://your ngrok/auth-end`. </br>\n\n     1. 次のチェック ボックスをオンにして、 **暗黙的な許可フローとハイブリッド フロー** を有効にします。\n         * **ID トークン**\n         * **アクセス トークン**\n\n     1. **[構成]** を選択します。  \n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/configuration-web_1.png\" alt-text=\"構成\":::\n\n  **マニフェストを更新するには**\n\n  1. 左側のウィンドウで **[マニフェスト]** を選択します。\n\n  1. 構成項目 **\"accessTokenAcceptedVersion\":2 を** 設定します。 設定されていない場合は、その値を に `2` 変更し、[保存] を選択 **します**。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/manifest-value.png\" alt-text=\"マニフェスト ファイルを開く\":::\n    \n     > [!NOTE]\n     > Teams でボットを既にテストしている場合は、このアプリからサインアウトして Teams からサインアウトします。 この変更を確認するには、もう一度サインインします。\n\n  **Bot Service接続を設定するには**\n\n  1. **[構成] ページ** >  [**OAuth 接続設定の追加]** に移動します。\n\n  1. **[OAuth 接続設定の追加]** を選択します。\n\n  1. [ **新しい接続設定]** に、次の詳細を入力します。\n\n      * **名前に「** 」と入力します `name for your new connection setting. You can use the name in the settings of your bot service code`。\n      * **[サービス プロバイダー]** を選択します `Azure Active Directory V2`。\n      * **クライアント ID** は です `Microsoft App ID`。\n      * **クライアント シークレット** `Value of the client secret ID`。\n      * **トークン交換 URL** は、API エンドポイントの `Application ID URI` 公開中に以前に取得した を使用します。\n      * **テナント ID に** 「」と入力します `common`。\n      * **スコープは と入力します**`User.Read`。\n \n  1. **[保存]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/new-connection-setting_1.png\" alt-text=\"新しい接続の設定\":::\n"
- title: アプリ設定とマニフェスト ファイルを設定する
  durationInMinutes: 2
  content: "1. 複製されたリポジトリの **appsettings.json** に移動します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/appsettings-file_1.png\" alt-text=\"アプリ設定マニフェスト\":::\n                  \n1. Visual Studio で **appsettings.json** を開きます。\n\n1. 次の情報を更新します。\n\n     * **MultiTenant** に設定`\"MicrosoftAppType\"`します。\n     * ボットの **Microsoft アプリ ID に** 設定`\"MicrosoftAppId\"`します。\n     * ボットのクライアント シークレット ID 値に設定 `\"MicrosoftAppPassword\"` します。\n     * MultiTenant ボットの場合は空白に設定 `\"MicrosoftAppTenantId\"` します。\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/appsettings-json1_1.png\" alt-text=\"visual Studio の appsettings ファイル\":::\n       \n1. 複製されたリポジトリの **manifest.json** に移動します。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/teams-app-manifest_1.png\" alt-text=\"マニフェスト ファイルを開く\":::\n     \n1. Visual Studio で **manifest.json** を開き、次の変更を行います。\n\n   のすべての出現箇所を `<<YOUR-MICROSOFT-APP-ID>>` ボットの **Microsoft アプリ ID に** 置き換えます。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/bot-id_1.png\" alt-text=\"ボット ID を置き換えます。\"lightbox=\"../msteams-platform/assets/images/teams-file-upload-bot/bot-id_1.png\"::: \n"
- title: サービスをビルドして実行する
  durationInMinutes: 2
  content: "**Visual Studio またはコマンド ラインを使用してサービスをビルドして実行するには**\n\n# <a name=\"visual-studio\"></a>[Visual Studio](#tab/visualstudio)\n\n  1. Visual Studio を起動します。\n  \n  1. **[ファイル** > を **開く****] [プロジェクト/ソリューション**]  >  に移動します。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/VS-open-file_1.png\" alt-text=\"visual Studio\":::      \n   \n  1. **56.teams-file-upload** フォルダーから **TeamsFileUpload.csproj** ファイルを選択します。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/csproj-folder_1.png\" alt-text=\"フォルダー\":::        \n\n  1. **ビュー** から **ソリューション エクスプローラー** を開きます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/Teams-task-module/solutionexplorer_1.png\" alt-text=\"view\":::\n\n  1. **TeamsFileUpload** を右クリックします。\n\n  1. [ **スタートアップ プロジェクトとして設定] を選択します**。\n     \n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/teams-file-upload_1.png\" alt-text=\"プロジェクトを起動する\":::\n     \n  1. **F5** キーを押してプロジェクトを実行します。\n\n  1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/certificate_1.png\" alt-text=\"ca\":::\n\n     \n     Web ページが開き、 **ボットの準備ができました!** というメッセージが表示されます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/file-bot.png\" alt-text=\"ボットの準備が整いました\":::\n\n  \n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nコマンド プロンプト ウィンドウで **50.teams-messaging-extensions-search > csharp_dotnetcore > BotBuilder-Samples > サンプル** に移動し、次のコマンドを入力します。\n\n```bash\ndotnet run\n```\n\n![Dotnet](~/assets/images/Teams-Messaging-Extensions-Search/dotnetruncmd.png)\n"
- title: Teams でファイル アップロード ボットを追加する
  durationInMinutes: 2
  content: "1. 複製したリポジトリで、[ **csharp_dotnetcore** > **56.teams-file-upload** > **TeamsAppManifest**] に移動します。\n\n1. **TeamsAppManifest** フォルダーに存在する次のファイルを含む.zipを作成します。 \n  * manifest.json\n  * icon-outline.png\n  * icon-color.png \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/teams-upload-manifest_1.png\" alt-text=\"manifest フォルダー\":::\n\n 1. **Microsoft Teams** に移動します。\n\n 1. 左側のパネルで、[ **アプリ] [アプリ** > **の管理] の順に選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/AppStore1_1.png\" alt-text=\"アプリの追加\":::\n\n 1. **[カスタム アプリをアップロードする]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/upload-custom-app_1.png\" alt-text=\"カスタム アプリ\":::\n\n 1. [ **開く** ] を選択して、 **TeamsAppManifest** フォルダーに作成した.zip ファイルをアップロードします。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/teams-manifest_1.png\" alt-text=\"マニフェストを開く\"::: \n\n 1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/add-file-bot_1.png\" alt-text=\"追加\"::: \n\n  1. 新規作成メッセージ領域に **「hi」** と入力し、カードで応答するまで数秒待ちます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/respond-bot.png\" alt-text=\"ボットによるカード送信\":::\n"
- title: Teams でのボットの操作
  durationInMinutes: 2
  content: "1. ボットにメッセージを送信します。 ファイルをアップロードするためのアクセス許可のカードで応答します。\n   \n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/sbs-1.png\" alt-text=\"ボット送信カード\":::\n\n1. [ **許可] を選択します**。 `teams-logo.png`ファイルがファイル ディレクトリにアップロードされ、ダウンロードの準備が整います。\n     \n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/sbs-2.png\" alt-text=\"teams ロゴ\":::\n\n1. Teams で添付ファイルとしてボットにファイルを送信します。 メッセージ `Received and Saved`で応答します。 [ファイル] タブから添付 **ファイル** を表示できます。\n    \n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/sbs-3.png\" alt-text=\"ファイルの送信\":::\n\n1. 画像を添付ファイルとして送信します。 メッセージ `Received and saved`で応答します。 画像は、チャット ウィンドウと [ **ファイル** ] タブで表示できます。\n   \n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/sbs-4.png\" alt-text=\"received\":::\n  \n    > [!NOTE]\n    >  ボットが個人用スコープにインストールされると、ユーザーはボットとの 1 対 1 のチャット会話に入ります。\n  \n"
- title: 課題の完了
  durationInMinutes: 1
  content: "このようなものを思いついたのですか?\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png\" alt-text=\"最終的な画像\"::: \n"
- content: チュートリアルを完了しました。 これで、ボットを使用して Teams でファイルをアップロードできるようになりました。
