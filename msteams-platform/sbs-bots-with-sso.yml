### YamlMime:Tutorial
title: SSO 認証を使用してボットを構築する
metadata:
  title: SSO 認証を使用してボットを構築する
  description: このチュートリアルでは、SSO 認証を使用してボットを構築する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: ボット認証の詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 66667e29f763dbdbe8c0f7b0e1a1ae063f1dc577
  ms.sourcegitcommit: 4eeede81a0ae8ec985c6a1ad4f608df58371402f
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 07/14/2022
  ms.locfileid: "66793055"
items:
- durationInMinutes: 1
  content: >
    Teams ボットは、カスタマー サービスなど、ユーザーが繰り返し行う自動化されたタスクを実行する会話型ボットです。 ユーザーは、シングル サインオン (SSO) 認証なしで複数回サインインする必要があります。 SSO 認証方法を使用すると、ユーザーはボットに複数回サインインする必要はありません。


    ボットの動作は、ボットが関係する会話によって異なります。


    * チャネルとグループチャットの会話のボットでは、ユーザーがボットを@mentionする必要があります。

    * 1 対 1 の会話の場合、ボットを @メンションする必要はありません。 ユーザーによって送信されたすべてのメッセージは、ボットにルーティングされます。


    このステップ バイ ステップ ガイドは、SSO 認証を使用してボットを構築するのに役立ちます。 次の出力が表示されます。

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="ボットにサインインしているモバイル":::
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境を設定してください。  \n\n* [最新バージョンの ngrok](https://ngrok.com/download) または同等のトンネリング ソリューション\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken](https://ngrok.com/download) をインストールします。\n\n* [Visual Studio の最新バージョン](https://visualstudio.microsoft.com/downloads/)\n\n次のアカウントがあることを確認し、開発環境を設定します。 \n\n* [Microsoft](https://teams.microsoft.com/) アカウント\n\n  > [!TIP]\n  > Microsoft Teams アカウントがゲスト アカウントではないことを確認します。\n\n* [Microsoft 365 開発者アカウント](https://developer.microsoft.com/en-us/microsoft-365/dev-program) またはアプリをインストールするための適切なアクセス許可を持つ Teams アカウントへのアクセス  \n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n   **テナント** は、Teams でチャット、ファイルの共有、組織の会議の実行を行うスペースやコンテナーのようなものです。 アプリをサイドロードしてテストすることもできます。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\n   アプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 これはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n   > [!NOTE]\n   > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 サイドローディングを有効にして、Teams でアプリをローカルでプレビューしてテストします。\n\n   既にテナントがあり、管理者アクセス権がありますか? 実際にあるかどうかを確認しましょう。\n\nTeams でサイドロード アプリを確認するには:\n\n1. Teams クライアントで、[ストア] を選択 **します**。\n1. **[アプリの管理]** を選択します。\n1. [**アプリ の発行**] を選択します。\n1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/upload-custom-app1.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n    > [!NOTE]\n    > カスタム アプリをアップロードするオプションがない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で **[E5 サブスクリプションのセットアップ** ] を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 新しい管理者アカウントを使用して Teams にサインインします。 これで、[ **カスタム アプリのアップロード] オプションが表示** されます。\n"
- title: ボットを作成して登録する
  durationInMinutes: 5
  content: "次の手順は、ボットを作成してAzure portalに登録するのに役立ちます。\n\n1. Azure bot リソースを作成して、Azure Bot Serviceにボットを登録します。\n1. ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n1. ボットをデプロイする Teams チャネルを追加します。\n1. ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n1. 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Azure portal](https://portal.azure.com/) にアクセスします。 Microsoft アカウントの資格情報を使用してサインインするように求める場合があります。\n\n1. **[リソースの作成]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/bots/Createaresource.png\" alt-text=\"リソースの作成\":::\n\n1. 検索ボックスに「 **Azure bot**」と入力します。\n\n   :::image type=\"content\" source=\"~/assets/images/bots/searchazurebot.png\" alt-text=\"リソースの作成\":::\n\n1. **Enter** キーを押します。\n\n1. **Azure Bot** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectazurebot.png\" alt-text=\"Azure Bot を選択する\":::\n\n1. **[作成]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/azure-bot.png\" alt-text=\"Azure ボット。\":::\n\n   [Azure Bot の作成] ページが表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/azurebotpage.png\" alt-text=\"Azure ボット ページ\":::\n\n1. Azure ボットを作成するには、次の詳細を入力します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Azurebotcreate.png\" alt-text=\"リソース Azure ボットを作成する\":::\n\n    1. **ボット** ハンドルに必要なボット ハンドル名を入力します。ボットの一意の識別子です。\n\n    1. ドロップダウン リストから **[サブスクリプション]** を選択します。\n\n    1. ボット アプリ用にプロビジョニングする **リソース グループ** をドロップダウン リストから選択します。\n    \n     \n       次の手順で新しいリソース グループを作成することもできます。\n\n          1. 新しいリソース グループを作成するには、[ **新しい** リソース グループの作成] を選択>リソース名を入力> **[OK] を選択します**。\n\n               :::image type=\"content\" source=\"~/assets/images/bots/newresourcecreation.png\" alt-text=\"新しいリソースの作成\":::\n\n          1. 新しいリソース グループを作成した場合は、[新しいリソース グループの場所] ドロップダウン リストから必要な **場所を** 選択します。\n    \n               :::image type=\"content\" source=\"~/assets/images/bots/newresource.png\" alt-text=\"新しいリソース\":::\n\n    1. [**マルチテナント** としての **アプリの種類**] を選択します。\n\n        :::image type=\"content\" source=\"~/assets/images/bots/Review-Create.png\" alt-text=\"作成を確認する\":::\n\n    1. **[Microsoft アプリ ID**] セクションでは、既定で [**新しい Microsoft アプリ ID の作成]** が選択されています。\n\n       [ **既存のアプリの登録を使用** する] を選択し、 **既存のアプリ ID** と **既存のアプリ パスワード** を入力するか、[ **新しい Microsoft アプリ ID の作成**] を選択します。\n\n       > [!NOTE]\n       > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n    1. **[確認 + 作成]** を選びます。\n\n1. 検証が渡されたら、[作成] を選択 **します**。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/validationpass.png\" alt-text=\"検証パス\":::\n\n   ボット サービスがプロビジョニングされるまでしばらく時間がかかり、次のページが表示されます。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/provisionpage.png\" alt-text=\"[プロビジョニング] ページ\":::\n\n1. [**リソースに移動**] を選びます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/gotoresource.png\" alt-text=\"リソース\":::\n\n   Azure ボットが作成され、Azure ボットで **リソース グループ** と **サブスクリプション ID を** 確認できます。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/Azurebotresource.png\" alt-text=\"Azure ボット リソースが作成されました\":::\n\n**クライアント シークレットを作成するには**\n\n クライアント シークレットを作成するには、次の手順を実行します。\n\n1. 左側のパネルで、[構成] を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectconfigure.png\" alt-text=\"[構成] を選択する\":::\n\n   > [!Important]\n   > 今後参照できるように **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **Microsoft アプリ ID** の横にある [**管理**] を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/manage-bot-label.png\" alt-text=\"ボットを管理する\":::\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/newclientsecret.png\" alt-text=\"新しいクライアント シークレット\":::\n\n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。\n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/addclientsecret.png\" alt-text=\"クライアント シークレットをアプリに追加する\":::\n\n1. [ **値** ] 列で、[ **クリップボードにコピー**] を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/bots/valueclientsecret.png\" alt-text=\"クライアント シークレットの値\":::\n\n   > [!Important]\n   > 今後参照できるように **、クライアント シークレットの** 値またはアプリ パスワードを保存します。\n   \n**Teams チャネルにボットを追加する**\n\n1. [**ホーム**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selecthome.png\" alt-text=\"ホーム ページ\":::\n\n1. **最近使用したリソース** からボットを選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectrecentresources.png\" alt-text=\"最近使用したリソースを選択する\":::\n\n1. 左側のウィンドウで **[チャネル**] を選択し、[Teams] を選択 **します**。 <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>. \n\n    :::image type=\"content\" source=\"/assets/images/adaptive-cards/channel-teams.png\" alt-text=\"チャネルで Teams を選択する\":::\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectchannel.png\" alt-text=\"最近使ったユーザーを選択する\":::\n\n1. **Microsoft Teams を選択する** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>. \n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectmicrosoftteams.png\" alt-text=\"Microsoft Teams を選択する\":::\n\n1. [ **利用規約**] に同意するには、チェック ボックスをオンにします。\n\n1. **[同意する**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Terms-of-service.png\" alt-text=\"用語\":::\n\n1. **[適用]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/apply.png\" alt-text=\"Apply\":::\n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n   ```bash\n   ngrok http -host-header=localhost 3978\n   ```\n   > [!TIP]\n   > **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに表示されている手順に従って、サインアップして ngrok を認証します。 `ngrok http -host-header=localhost 3978` コマンドを実行します。\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から HTTPS URL をコピーします。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/ngrok-url.png\" alt-text=\"ngrok HTTPS URL\":::\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n    > は `WebAppDomain` 、完全修飾ドメイン名であり、ドメイン名には含 `https://` まれません。\n\n1. Azure portalに戻るします。\n\n1. 作成した Azure ボットの **設定** で、[構成] を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectconfiguration.png\" alt-text=\"構成の選択\":::\n\n1. **メッセージング エンドポイント** で、ngrok から入手できる HTTPS URL を使用し、URL の最後に **/api/messages** を追加します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/messagingURL.png\" alt-text=\"メッセージング エンドポイント\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot Serviceでボットが正常に設定されました。\n"
- title: ボットの SSO を構成する
  durationInMinutes: 5
  content: "**Azure ボット リソースにリダイレクト URI を追加するには**\n\n1. **[管理]** を選択します。\n\n   :::image type=\"content\" source=\"~/assets/images/manage-bot-label.png\" alt-text=\"ボットを管理する\":::\n\n1. 左側のウィンドウで、[ **認証**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/selectauthentication.png\" alt-text=\"認証を選択する\":::\n\n1. **プラットフォーム構成** で、[**プラットフォームの追加]** を選択して、ボット アプリをホストするプラットフォームを選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/bots/addaplatform.png\" alt-text=\"プラットフォームを追加する\":::\n\n1. このチュートリアルでは、Web を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectweb.png\" alt-text=\"Web を選択する\":::\n    \n1. **リダイレクト URI を**`https://token.botframework.com/.auth/web/redirect`入力します。これは、Azure AD がユーザー認証の応答を送信する URI です。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/redirectURI1.png\" alt-text=\"リダイレクト URI 1\":::\n\n1. 次のチェック ボックスをオンにして **、暗黙的な許可フローとハイブリッド フロー** を有効にします。\n\n    * **ID トークン**\n    * **アクセス トークン**\n\n1. **[構成]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectimplictgrant.png\" alt-text=\"Implict Grant を選択する\":::\n\n    リダイレクト URI が Azure ボット リソースに追加されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/redirectURIadded.png\" alt-text=\"ボット リソースに追加されたリダイレクト URI\":::\n\n**API エンドポイントを公開するには**\n\n1. 左側のウィンドウで、[ **API の公開**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/exposeanapi.png\" alt-text=\"API を公開する\":::\n\n1. [ **設定**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/appidURI.png\" alt-text=\"アプリケーション ID\":::\n\n1. URI の先頭に表示されているアプリケーション ID URI を使用し **、api://botid 追加** します。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/exposeAPI.png\" alt-text=\"API を公開する\":::\n\n   > [!Important]\n   > 今後の参照用に **アプリケーション ID URI を** 保存します。\n\n1. **[スコープの追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Addascope.png\" alt-text=\"API を公開する\":::\n\n   [スコープの追加] パネルが表示されます。\n\n1. スコープを構成するための詳細を入力します。    \n\n     :::image type=\"content\" source=\"~/assets/images/bots/addscope.png\" alt-text=\"アプリにスコープを追加する\":::\n\n      1. **スコープ名** として入力`access_as_user`します。\n\n         > [!NOTE]\n         > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。\n\n      1. **[同意できるユーザー] を** `Admins and users`[ .\n\n      1. スコープの適切な値を使用して管理者とユーザーの同意プロンプトを `access_as_user` 構成するには、フィールドに次の情報を入力します。</br>\n\n          * **同意表示名管理** 入力`Teams can access the user’s profile`します。\n\n          * **同意の説明管理** 入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n          * **ユーザー同意表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n          * **ユーザーの同意の説明** として入力`Enable Teams to call this app’s APIs with the same rights as you have`します。\n\n      1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n1. [保存 **するスコープの追加]** を選択します。\n\n   アプリケーション ID URI は **、スコープ名** を使用して作成されます。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/ExposeAPIandaddscope.png\" alt-text=\"公開された API とスコープが追加されました\":::\n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。\n\n1. **[クライアント アプリケーションの追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/addaclientapplication.png\" alt-text=\"クライアント アプリケーションを追加する\":::\n\n   [クライアント アプリケーションの追加] パネルが表示されます。\n\n1. 承認するデスクトップ アプリケーションと Web アプリケーションのクライアント ID を個別に入力します。 承認するクライアント アプリケーションのアプリケーション ID です。\n   \n   |**クライアント ID**|**承認する場合**|\n   |--------|-------------|\n   | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams デスクトップまたはモバイル アプリケーション |\n   | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams Web アプリケーション |\n\n1. [ **承認されたスコープ** ] を選択して、サービスによって返されるトークンの種類を決定します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/add-desktop-app.png\" alt-text=\"クライアント アプリケーションをアプリに追加する\":::\n   \n1. **[アプリケーションの追加]** を選択します。\n\n    次の図は、クライアント ID を表示します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/clientapps.png\" alt-text=\"クライアント アプリ\":::\n\n**Graph のアクセス許可を構成する**\n\n1. 左側のパネルで、[ **API アクセス許可**] を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/selectapipermissions.png\" alt-text=\"API アクセス許可を選択する\":::\n\n   > [!NOTE]\n   > ユーザーは、ボット アプリが別のテナントに登録されている場合にのみ、API アクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/configure-permission.png\" alt-text=\"API ユーザーのアクセス許可\":::\n\n   [要求 API のアクセス許可] ページが表示されます。\n\n1. **[Microsoft Graph]** を選択します。\n    \n    :::image type=\"content\" source=\"~/assets/images/bots/selectmicrosoftgraph.png\" alt-text=\"Microsoft Graph を選択する\":::\n\n1. [**委任されたアクセス許可**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-graph-permissions.png\" alt-text=\"グラフのアクセス許可を選択する\":::\n\n1. **[ユーザー] ドロップダウンから [ユーザー.読み取り** アクセス許可 **] を** 選択します。\n\n1. **[アクセス許可の追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/userread.png\" alt-text=\"ユーザーの読み取り\":::\n\n**マニフェストを更新するには**\n\n1. 左側のウィンドウで、[ **マニフェスト**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/selectmanifest.png\" alt-text=\"[マニフェスト] を選択します\":::\n\n1. 構成項目が次に設定されていることを確認します **\"accessTokenAcceptedVersion\": 2**。 そうでない場合は、その値を **2** に変更し、[ **保存]** を選択します。\n\n   > [!NOTE]\n   > Teams でボットを既にテストしている場合は、このアプリと Teams からサインアウトする必要があります。 その後、もう一度サインインして、この変更を確認します。</br>\n    \n      :::image type=\"content\" source=\"~/assets/images/bots/update-manifest.png\" alt-text=\"マニフェストを更新する\":::\n\n**Bot サービス接続を設定するには**\n\n1. [ **構成] ページ** で、[ **OAuth 接続設定の追加**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectconfiguration1.png\" alt-text=\"configuration1 を選択する\":::\n\n    :::image type=\"content\" source=\"~/assets/images/bots/botserviceconnection.png\" alt-text=\"Bot Service接続\":::\n\n1. [ **新しい接続設定]** ページで、次の詳細を入力します。\n\n    | フィールド | 値または説明 |\n    | ----- | ----- |\n    | 名前 | 新しい接続設定の名前を入力します。 この名前は、ボット サービス コードの設定で使用できます。 |\n    | Service Provider | **Azure Active Directory V2 を選択します**。 |\n    | クライアント ID | 以前に **Microsoft アプリ ID** として保存しました。 |\n    | クライアント シークレット | 以前にクライアント シークレット ID の **値** として保存しました。 |\n    | トークン交換 URL | API エンドポイントを公開するときに、以前に取得した **アプリケーション ID URL を** 使用します。 |\n    | テナント ID | common と入力 **します**。 |\n    | Scopes | **User.Read** と入力し、ダウンストリーム API へのアクセス許可を指定するときに必要なすべての **スコープ** を追加します。 |\n\n1. **[保存]** を選択します。\n\n1. **[適用]** を選択します。\n\n   これで、ボットの SSO が構成されました。\n"
- title: ボット サンプルを構成して実行する
  durationInMinutes: 1
  content: "1. **Visual Studio を開きます**。\n\n1. **[リポジトリの複製]** を選択します。\n\n1. リポジトリの **場所に**「.」と入力します `https://github.com/OfficeDev/Microsoft-Teams-Samples.git`。 リポジトリが複製される **パス** に注意してください。\n\n1. **ファイル** > **を開く** > **プロジェクト/ソリューション** に移動します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/project-solution.png\" alt-text=\"Bot Service接続\":::\n\n1. フォルダーから **BotSSOCSharp.csproj** ファイル **csharp_dotnetcore** 選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/filepath.png\" alt-text=\"ファイル パス\":::\n\n1. **appsettings.json ファイルを** 開きます。\n\n1. とを使用するように、ボットの **appsettings.json** 構成を`MicrosoftAppId``MicrosoftAppPassword`更新します。 OAuth 接続名を **接続名** として使用します。\n\n    > [!NOTE]\n    > ボットの `MicrosoftAppId` [構成] ページから取得できます。 これは `MicrosoftAppPassword` 、以前に Azure に保存したクライアント シークレット ID の値です。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/appsettingsjson.png\" alt-text=\"Appsettings json\":::\n\n1. **F5** を選択してプロジェクトを実行します。\n\n1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n    :::image type=\"content\" source=\"~/assets/images/bots/certificate.png\" alt-text=\"Ca\":::\n\n   Web ページが開き、 **Bot が準備完了というメッセージが** 表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/yourbot.png\" alt-text=\"Ca\":::\n    \n    <br>\n\n    <details>\n\n    <summary><b>トラブルシューティング</b></summary>\n\n    **パッケージが見つからない** というエラーが発生した場合は、次の手順に従います。\n\n    1.  **ツール** > **NuGet パッケージ マネージャー パッケージ マネージャー** > **の設定** に移動します。\n    1.  表示される **[オプション]** ウィンドウで、[ **NuGet パッケージ マネージャー** > **パッケージ ソース**] を選択します。\n    1.  **[追加]** を選択します。\n    1.  **[名前]** に「**ソース」** と入力`nuget.org`し、次のように入力します`https://api.nuget.org/v3/index.json`。\n    1.  [ **更新]** と **[OK] を選択します**。\n    1.  プロジェクトをリビルドします。\n    <br>\n\n    </details>\n"
- title: Teams アプリを構成して実行する
  durationInMinutes: 2
  content: "1. Visual Studio で **appPackage フォルダーを** 開きます。\n\n1. **manifest.json** ファイルを開きます。\n\n1. **{TODO: MicrosoftAppId}** のすべての発生をボットの **Microsoft アプリ ID に** 置き換えます。\n\n1. 複製されたリポジトリで、 **bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** フォルダーに移動します。\n\n1. **マニフェスト** フォルダーに存在する次のファイルを含む.zipを作成します。 \n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n    :::image type=\"content\" source=\"~/assets/images/bots/manifest.png\" alt-text=\"マニフェスト\":::\n\n1. Teams クライアントに移動します。\n1. [ **ストア**] を選択します。\n1. **[アプリの管理]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/manage-your-app.png\" alt-text=\"アプリを管理する\":::\n\n1. **[カスタム アプリをアップロードする]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/upload-custom-app.png\" alt-text=\"カスタム アプリをアップロードする\":::\n\n1. [ **開く]** を選択して、 **マニフェスト** フォルダーに作成した.zip ファイルをアップロードします。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/open-app.png\" alt-text=\"アプリを開く\":::\n\n1. [ **追加]** を選択して、会話ボットをチャットに追加します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/add-conversation-bot.png\" alt-text=\"会話ボットを追加する\":::\n\n    ボットを操作するには、メッセージを送信します。 ボットは SSO トークンを交換し、ユーザーに代わってGraph APIを呼び出します。 **サインアウト** するメッセージを送信しない限り、サインインは維持されます。\n\n1. ボットにメッセージを送信します。 会話ボットは初めて同意を求めます。\n\n1. [ **続行]** を選択して、ボットにアクセスするためのアクセス許可を Teams クライアントに付与します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/sbsdesktop-mobile-consent-request1.png\" alt-text=\"ボットへのアクセス許可\":::\n    \n    > [!NOTE]\n    > これで、ボット アプリで SSO を構成し、同意を得る必要がある唯一の時間です。\n\n1. モバイル デバイスの場合は、[**要求されたアクセス許可****に同意** する] を選択します。\n\n    > [!NOTE]\n    > これで、モバイルでボット アプリで SSO を構成し、同意を得る必要がある唯一の時間です。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/sbsdesktop-mobile-consent-request.png\" alt-text=\"ボットにサインインしているモバイル\":::\n"
- title: チャレンジを完了する
  durationInMinutes: 1
  content: >
    このようなことを思い付いたのですか?

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="ボットにサインインしているモバイル":::
- content: SSO 認証を使用したボットの構築を開始するためのチュートリアルを完了しました。
