### YamlMime:Tutorial
title: SSO 認証を使用してボットを構築する
metadata:
  title: SSO 認証を使用してボットを構築する
  description: このチュートリアルでは、SSO 認証を使用してボットを構築する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: ボット認証の詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: fcfff8a5fc1f38c4afdb7b6b64e752dc2234512f
  ms.sourcegitcommit: 6926cf5eee55d5047c11ca13afc7f6f23e270396
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 10/27/2022
  ms.locfileid: "68740745"
items:
- durationInMinutes: 1
  content: >
    Teams ボットは、顧客サービスなど、ユーザーが繰り返し自動化したタスクを実行する会話型ボットです。 ユーザーは、シングル サインオン (SSO) 認証なしで複数回サインインする必要があります。 SSO 認証方法では、ユーザーはボットに複数回サインインする必要はありません。


    ボットは、関係する会話に応じて動作が異なります。


    * チャネルおよびグループ チャットの会話内のボットでは、ユーザーがボットを@mentionする必要があります。

    * 1 対 1 の会話の場合、ボットを @メンションする必要はありません。 ユーザーによって送信されたすべてのメッセージは、ボットにルーティングされます。


    このステップ バイ ステップ ガイドは、SSO 認証を使用してボットを構築するのに役立ちます。 次の出力が表示されます。

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="ボットにサインインしたモバイル":::
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境をセットアップしてください。  \n\n | &nbsp; | インストール | 使用するには... |\n | --- | --- | --- |\n | **必須** | &nbsp; | &nbsp; |\n | &nbsp; | [アカウントを持つ Microsoft Teams (ゲスト アカウントではない)](https://www.microsoft.com/microsoft-teams/download-app) |  Microsoft Teams は、チャット、会議、通話、すべてのアプリを通じて作業するすべてのユーザーと 1 か所で共同作業を行います。 |\n | &nbsp; | [Visual Studio 2022 バージョン 17.3](https://visualstudio.microsoft.com)<br> 次の 2 つのワークロードのいずれかをインストールします。<br> • ASP.NET と Web 開発 <br> • .NET Core クロスプラットフォーム開発 | Visual Studio 2022 でエンタープライズ バージョンをインストールし、ワークロードをインストールできます。 |\n | &nbsp; | [Microsoft 365 開発者アカウント](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | アプリをインストールするための適切なアクセス許可を持つ Teams アカウントにアクセスします。 |\n | &nbsp; | [ngrok](https://ngrok.com/download) | Teams アプリの機能 (会話型ボット、メッセージ拡張機能、受信 Webhook) には、受信接続が必要です。 トンネルは、開発システムを Teams に接続します。 タブのみを含むアプリには必要ありません。 このパッケージはプロジェクト ディレクトリ内にインストールされます (npm `devDependencies` を使用)。 |\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken を](https://ngrok.com/download)インストールします。\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** は、Teams でチャット、ファイルの共有、組織の会議の実行を行うスペースやコンテナーのようなものです。 アプリをサイドロードしてテストすることもできます。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 この読み込みはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 サイドローディングを有効にして、Teams でアプリをローカルでプレビューしてテストします。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にあるかどうかを確認しましょう。\n\nTeams でアプリのサイドロードを確認するには:\n\n1. Teams クライアントで、[アプリ] を選択 **します**。\n1. [ **アプリの管理] [アプリ** > **のアップロード] の順に選択します**。\n1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/upload-custom-app1_1.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n    > [!NOTE]\n    > カスタム アプリをアップロードするオプションがない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面から [ **セットアップ E5 サブスクリプション** ] を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n      :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 新しい管理者アカウントを使用して Teams にサインインします。 これで、[ **カスタム アプリのアップロード** ] オプションが表示されます。\n"
- title: ボットを作成して登録する
  durationInMinutes: 5
  content: "次の手順は、Azure portalでボットを作成して登録するのに役立ちます。\n\n1. Azure Bot リソースを作成して、ボットを Azure Bot Serviceに登録します。\n1. クライアント シークレットを作成して、ボットの SSO 認証を有効にします。\n1. Teams チャネルを追加してボットをデプロイします。\n1. ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n1. 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\n**Azure Bot リソースを作成するには**\n\n1. [Azure portal](https://portal.azure.com/) にアクセスします。\n\n1. **[リソースの作成]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Createaresource_1.png\" alt-text=\"リソースの作成\":::\n\n1. 検索ボックスに「 **Azure bot**」と入力します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/searchazurebot_1.png\" alt-text=\"リソースの作成\":::\n\n1. **Enter** キーを押します。\n\n1. [ **Azure Bot**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectazurebot_1.png\" alt-text=\"[Azure Bot] を選択する\":::\n\n1. **[作成]** を選択します。\n\n    :::image type=\"content\" source=\"./assets/images/bots/azure-bot_1.png\" alt-text=\"Azure ボット。\":::\n\n   [ **Azure Bot の作成** ] ウィンドウが表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/azurebotpage.png\" alt-text=\"Azure ボット ページを示すスクリーンショット。\":::\n\n1. Azure ボットを作成するには、次の詳細を入力します。\n\n    1. [Bot handle]\\(ボット ハンドル\\) に必要な **ボット ハンドル** 名を入力します。\n\n    1. ドロップダウン リストから **サブスクリプション** と **リソース グループ** を選択します。\n\n         :::image type=\"content\" source=\"~/assets/images/bots/Azurebotcreate.png\" alt-text=\"リソース Azure ボットの作成中の詳細を示すスクリーンショット。\":::\n  \n    1. 新しいリソース グループを作成するには、[ **新規作成** ] を選択>、[ **OK]** >リソース名を入力します。 次に、[ **新しいリソース グループ** の場所] ドロップダウン リストから必要な場所を選択します。\n    \n         :::image type=\"content\" source=\"~/assets/images/bots/newresource.png\" alt-text=\"新しいリソース グループの場所を示すスクリーンショット\":::\n    \n    1. [**マルチテナント**] として [**アプリの種類]** を選択します。 \n\n    1. [ **Microsoft アプリ ID** ] セクションで、既定で [ **新しい Microsoft アプリ ID の作成** ] が選択されています。\n\n       [ **既存のアプリの登録を使用する** ] を選択し、既存 **のアプリ ID**、 **アプリ テナント ID**、 **MSI リソース ID を** 入力することもできます。\n\n         :::image type=\"content\" source=\"~/assets/images/bots/Review-Create_1.png\" alt-text=\"マルチテナント オプションの選択を示すスクリーンショット。 \":::\n\n       > [!NOTE]\n       > 同じ **Microsoft アプリ ID** を持つ複数のボットを作成することはできません。\n\n    1. **[確認 + 作成]** を選びます。\n\n1. 検証に合格したら、[ **作成**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/validationpass_1.png\" alt-text=\"検証 Pass を示すスクリーンショット。\":::\n\n   ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n1. [**リソースに移動**] を選びます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/gotoresource_1.png\" alt-text=\"Resource\":::\n\n   Azure ボットが作成されます。 **リソース グループ** と **サブスクリプション ID** の詳細は、Azure ボットで確認できます。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/Azurebotresource_1.png\" alt-text=\"Azure ボット リソースが作成されました\":::\n\n**クライアント シークレットを作成するには**\n\n クライアント シークレットを作成するには、次の手順を実行します。\n\n1. 左側のウィンドウで、[構成] を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectconfigure_1.png\" alt-text=\"[構成] を選択します\":::\n\n   > [!Tip]\n   > 今後参照するために **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **[Microsoft アプリ ID] の** 横にある [管理] を選択 **します**。\n\n   :::image type=\"content\" source=\"~/assets/images/manage-bot-label_1.png\" alt-text=\"ボットを管理する\":::\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/newclientsecret_2.png\" alt-text=\"新しいクライアント シークレットの選択を示すスクリーンショット。\":::\n\n   [ **クライアント シークレットの追加]** ウィンドウが表示されます。\n\n1. **「説明」と入力します**。\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/addclientsecret_1.png\" alt-text=\"アプリへのクライアント シークレットの追加を示すスクリーンショット。\":::\n\n1. [ **値** ] 列で、[クリップボードにコピー] アイコンを選択して値の詳細をコピーします。 \n\n    :::image type=\"content\" source=\"~/assets/images/bots/valueclientsecret.png\" alt-text=\"クリップボードにコピーされたクライアント シークレットの値を示すスクリーンショット。\":::\n\n   > [!Tip]\n   > 後で参照するために、 **クライアント シークレットの** 値またはアプリ パスワードを保存します。\n   \n**Teams チャネルにボットを追加する**\n\n1. [**ホーム**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/selecthome_1.png\" alt-text=\"ホーム ページ\":::\n\n1. [ **最近使ったリソース**] からボットを選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-recent-resources_1.png\" alt-text=\"最近使用したリソースを選択する\":::\n\n1. 左側のウィンドウで [ **チャネル** ] を選択します。 \n\n    :::image type=\"content\" source=\"~/assets/images/bots/selectchannel_1.png\" alt-text=\"最近使用したファイルを選択する\":::\n\n1. **Microsoft Teams を選択する** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>. \n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-microsoft-teams_1.png\" alt-text=\"Microsoft Teams を選択する\":::\n\n1. チェックボックスをオンにして **、利用規約** に同意します。\n\n1. [ **同意する] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Terms-of-service_1.png\" alt-text=\"用語\":::\n\n1. **[適用]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/apply_1.png\" alt-text=\"オプションの適用を示すスクリーンショット\":::\n\n**ローカル Web サーバーのトンネルを作成するには**\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n   ```bash\n   ngrok http --host-header=localhost 3978\n   ```\n   > [!TIP]\n   > **ERR_NGROK_4018** が発生した場合は、コマンド プロンプトに表示されている手順に従ってサインアップし、ngrok を認証します。 `ngrok http --host-header=localhost 3978` コマンドを実行します。\n\n**メッセージング エンドポイントを追加するには**\n\n1. ngrok から HTTPS URL をコピーします。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/ngrok-url1_1.png\" alt-text=\"ngrok HTTPS URL\":::\n\n    > [!NOTE]\n    > ngrok の HTTPS URL は、完全修飾ドメイン名です。\n    > `WebAppDomain`は、それに含`https://`まれていない完全修飾ドメイン名です。\n\n1. Azure portalに戻るします。\n\n1. 作成した Azure ボットの **[設定]** で、[構成] を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-configuration_1.png\" alt-text=\"[構成] を選択します\":::\n\n1. **メッセージング エンドポイント** で、ngrok から使用できる HTTPS URL を使用し、URL の末尾に **/api/messages** を追加します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/messagingURL_2.png\" alt-text=\"メッセージング エンドポイント\":::\n\n1. **[適用]** を選択します。\n\n    Azure Bot Serviceでボットが正常に設定されました。\n"
- title: ボットの SSO を構成する
  durationInMinutes: 5
  content: "**Azure ボット リソースにリダイレクト URI を追加するには**\n\n1. [ **ホーム** > **Azure Active Directory] を選択します**。\n\n1. 左側のウィンドウで、[**アプリの登録**] を選択します。\n\n1. ボットを選択します。\n\n1. 左側のウィンドウで、[ **認証** ] を選択してリダイレクト URI を設定します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/select-authentication_1.png\" alt-text=\"[認証] を選択します\":::\n\n1. [ **プラットフォーム構成**] で、[ **プラットフォームの追加]** を選択して、ボット アプリをホストするプラットフォームを選択します。 \n\n1. このチュートリアルでは、[Web] を選択 **します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-web_1.png\" alt-text=\"Web の選択を示すスクリーンショット。\":::\n    \n1. として`https://token.botframework.com/.auth/web/redirect`**「リダイレクト URI」と** 入力し、Azure AD がユーザー認証の応答を送信するこの URI を入力します。\n\n1. 次のチェック ボックスをオンにして、 **暗黙的な許可フローとハイブリッド フロー** を有効にします。\n\n    * **ID トークン**\n    * **アクセス トークン**\n\n1. **[構成]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-implict-grant_1.png\" alt-text=\"構成の選択を示すスクリーンショット。\":::\n\n    リダイレクト URI が Azure ボット リソースに追加されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/redirectURIadded.png\" alt-text=\"ボット リソースに追加されたリダイレクト URI を示すスクリーンショット。\":::\n\n**API エンドポイントを公開するには**\n\n1. 左側のウィンドウで、[ **API の公開**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/expose-an-api_1.png\" alt-text=\"API を公開する\":::\n\n1. [ **設定] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/appidURI.png\" alt-text=\"set オプションを示すスクリーンショット。\":::\n\n1. アプリケーション ID URI を の形式 `api://botid-{your AppID}`で設定します。\n\n1. **[保存]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/exposeAPI_1.png\" alt-text=\"保存オプションを示すスクリーンショット。\":::\n\n   > [!NOTE]\n   > ngrok などのトンネリング サービスを使用している場合は、ngrok サブドメインが変更されるたびに値を更新してください。\n   > たとえば、 `api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2``f631****.ngrok.io` は新しい ngrok サブドメイン名です。\n\n1. **[スコープの追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/Addascope_1.png\" alt-text=\"スコープの追加を示すスクリーンショット。\":::\n\n   [ **スコープの追加]** ウィンドウが表示されます。\n\n1. スコープを構成する詳細を入力します。    \n\n      1. **スコープ名** として「」と入力`access_as_user`します。\n\n         > [!NOTE]\n         > **スコープ名** は、最後に追加された **アプリケーション ID** URI と`/access_as_user`一致する必要があります。\n\n      1. [ **同意できるユーザー]** を に `Admins and users`設定します。\n\n      1. スコープの適切な値 `access_as_user` を使用して管理者とユーザーの同意プロンプトを構成するには、フィールドに次の情報を指定します。</br>\n\n          * **同意の表示名管理** 入力`Teams can access the user’s profile`します。\n\n          * **同意の説明として「管理**」と入力`Allows Teams to call the app’s web APIs as the current user`します。\n\n          * **[ユーザーの同意] 表示名** として入力`Teams can access the user profile and make requests on the user’s behalf`します。\n\n          * **[ユーザーの同意の説明]** として入力`Enable Teams to call this app’s APIs with the same rights as you have`します。\n\n      1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n      1. [ **スコープの追加]** を選択して保存します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/addscope.png\" alt-text=\"スコープの構成を示すスクリーンショット。\":::\n\n   アプリケーション ID URI は **スコープ名** で作成されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/ExposeAPI_2.png\" alt-text=\"API が公開され、スコープが追加されたことを示すスクリーンショット。\":::\n\n1. **[承認済みのクライアント アプリケーション]** セクションで、アプリの Web アプリケーションに対して承認するアプリケーションを特定します。\n\n1. **[クライアント アプリケーションの追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/addaclientapplication.png\" alt-text=\"クライアント アプリケーションの追加を示すスクリーンショット。\":::\n\n   [ **クライアント アプリケーションの追加]** ウィンドウが表示されます。\n\n1. 承認するデスクトップ アプリケーションと Web アプリケーションのクライアント ID を個別に入力します。 これは、承認するクライアント アプリケーションのアプリケーション ID です。\n   \n   |**クライアント ID**|**承認の場合**|\n   |--------|-------------|\n   | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams デスクトップまたはモバイル アプリケーション |\n   | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams Web アプリケーション |\n\n1. [ **承認されたスコープ]** を選択して、サービスによって返されるトークンの種類を決定します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/add-desktop-app.png\" alt-text=\"承認されたスコープの選択を示すスクリーンショット。\":::\n   \n1. **[アプリケーションの追加]** を選択します。\n\n    次の図は、クライアント ID を表示します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/clientapps.png\" alt-text=\"クライアント ID の追加を示すスクリーンショット。\":::\n\n**Graph のアクセス許可を構成する**\n\n1. 左側のウィンドウで、[ **API アクセス許可**] を選択します。\n\n      :::image type=\"content\" source=\"~/assets/images/bots/select-api-permissions_1.png\" alt-text=\"[API のアクセス許可] を選択します\":::\n\n   > [!NOTE]\n   > ユーザーは、ボット アプリが別のテナントに登録されている場合にのみ、API のアクセス許可に同意する必要があります。\n\n1. [**アクセス許可を追加**] を選択します。\n\n   [ **API のアクセス許可の要求** ] ウィンドウが表示されます。\n\n1. **[Microsoft Graph]** を選択します。\n    \n    :::image type=\"content\" source=\"~/assets/images/bots/select-microsoft-graph_2.png\" alt-text=\"Microsoft Graph の選択を示すスクリーンショット。\":::\n\n1. [**委任されたアクセス許可**] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-graph-permissions.png\" alt-text=\"委任されたアクセス許可の選択を示すスクリーンショット。\":::\n\n1. [ユーザー] ドロップダウンから [ **User.Read** アクセス許可] **を選択** します。\n\n1. **[アクセス許可の追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/userread.png\" alt-text=\"[ユーザー読み取り] の選択を示すスクリーンショット。\":::\n\n**マニフェストを更新するには**\n\n1. 左側のウィンドウで、[マニフェスト] を選択 **します**。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/select-manifest_1.png\" alt-text=\"[マニフェスト] を選択します\":::\n\n1. 構成項目が次に設定されていることを確認します **\"accessTokenAcceptedVersion\": 2**。 それ以外の場合は、値を **2** に変更し、[保存] を選択 **します**。\n\n   > [!NOTE]\n   > 既に Teams でボットをテストしている場合は、このアプリと Teams からサインアウトする必要があります。 その後、もう一度サインインして、この変更を確認します。</br>\n    \n      :::image type=\"content\" source=\"~/assets/images/bots/update-manifest.png\" alt-text=\"マニフェストの更新を示すスクリーンショット。\":::\n\n**Bot Service 接続を設定するには**\n\n1. [ **構成] ページ** で、[ **OAuth 接続設定の追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/select-configuration_2.png\" alt-text=\"構成の選択1\":::\n\n   [ **新しい接続設定]** ウィンドウが表示されます。\n\n     \n\n1. [ **新しい接続設定]** に、次の詳細を入力します。\n\n    | フィールド | 値または説明 |\n    | ----- | ----- |\n    | 名前 | 新しい接続設定の名前を入力します。 名前は、ボット サービス コードの設定で使用できます。 |\n    | Service Provider | [ **Azure Active Directory V2**] を選択します。 |\n    | クライアント ID | 以前に **Microsoft アプリ ID** として保存されています。 |\n    | クライアント シークレット | クライアント シークレット ID の **値** として以前に保存されています。 |\n    | トークン交換 URL | API エンドポイントの公開中に前に取得した **アプリケーション ID URL を** 使用します。 |\n    | テナント ID | **「common」と入力します**。 |\n    | Scopes | **User.Read** と入力し、ダウンストリーム API へのアクセス許可を指定するときに必要なすべての **スコープ** も追加します。 |\n\n    :::image type=\"content\" source=\"~/assets/images/bots/botserviceconnection.png\" alt-text=\"ボットのサービス接続を示すスクリーンショット。\":::\n\n1. **[保存]** を選択します。\n\n   これで、ボットの SSO が構成されました。\n"
- title: ボットサンプルを構成して実行する
  durationInMinutes: 1
  content: "1. **Visual Studio を** 開きます。\n\n1. **[リポジトリの複製]** を選択します。\n\n1. **[リポジトリ] の場所に**「」と入力します`https://github.com/OfficeDev/Microsoft-Teams-Samples.git`。 リポジトリが複製される **パス** に注意してください。\n\n1. **[ファイル** > を **開く****] [プロジェクト/ソリューション**]  >  に移動します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/project-solution_1.png\" alt-text=\"プロジェクト/ソリューションへのナビゲーションを示すスクリーンショット。\":::\n\n1. フォルダーから **BotSSOCSharp.csproj** ファイル **csharp_dotnetcore** 選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/filepath_1.png\" alt-text=\"フォルダー パスを示すスクリーンショット。\":::\n\n1. **appsettings.json ファイルを** 開きます。\n\n1. と `MicrosoftAppPassword`を使用するようにボットの **appsettings.json** 構成を`MicrosoftAppId`更新します。 接続名として OAuth **接続名** を使用します。\n\n    > [!NOTE]\n    > は、ボットの [構成] ページから取得 `MicrosoftAppId` できます。 `MicrosoftAppPassword`は、以前に Azure に保存したクライアント シークレット ID の値です。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/appsettingsjson.png\" alt-text=\"appsettings json オプションを示す Sceenshot。\"lightbox=\"~/assets/images/bots/appsettingsjson.png\":::\n\n1. **F5 キー** を押してプロジェクトを実行します。\n\n1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n    :::image type=\"content\" source=\"~/assets/images/bots/certificate.png\" alt-text=\"ダイアログが表示されたときにオプション [はい] を選択することを示すスクリーンショット。\":::\n\n   Web ページが開き、 **ボットが準備完了です** というメッセージが表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/yourbot.png\" alt-text=\"ボットの準備ができていることを示す Web ページを示すスクリーンショット。\":::\n    \n    <br>\n\n    <details>\n\n    <summary><b>トラブルシューティング</b></summary>\n\n    **パッケージを見つけられない** エラーが発生した場合は、次の手順に従います。\n\n    1.  **[ツール]** > **[NuGet パッケージ マネージャー パッケージ マネージャー** > **の設定]** の順に移動します。\n    1.  表示される **[オプション]** ウィンドウで、[ **NuGet パッケージ マネージャー** > **パッケージ ソース**] を選択します。\n    1.  **[追加]** を選択します。\n    1.  [ **名前]** に「」と入力 `nuget.org` し、[ **ソース]** に「」と入力します `https://api.nuget.org/v3/index.json`。\n    1.  [ **更新]** を選択し **、[OK] を選択します**。\n    1.  プロジェクトをリビルドします。\n    <br>\n\n    </details>\n"
- title: Teams アプリを構成して実行する
  durationInMinutes: 2
  content: "1. Visual Studio で、 **appPackage フォルダーを** 開きます。\n\n1. **manifest.json** ファイルを開きます。\n\n1. **{TODO: MicrosoftAppId}** のすべての出現箇所をボットの **Microsoft アプリ ID に** 置き換えます。\n\n1. 複製したリポジトリで、 **bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** フォルダーに移動します。\n\n1. **Manifest** フォルダーに存在する次のファイルを含む.zipを作成します。 \n   * manifest.json\n   * icon-outline.png\n   * icon-color.png\n\n    :::image type=\"content\" source=\"~/assets/images/bots/manifest_1.png\" alt-text=\"マニフェスト フォルダーを圧縮する方法を示すスクリーンショット\":::\n\n1. Teams クライアントに移動します。\n1. [ **ストア**] を選択します。\n1. **[アプリの管理]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/manage-apps_3.png\" alt-text=\"アプリの管理の選択を示すスクリーンショット。\":::\n\n1. **[カスタム アプリをアップロードする]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/upload-custom-app.png\" alt-text=\"カスタム アプリのアップロードを示すスクリーンショット。\":::\n\n1. [ **開く** ] を選択して、 **マニフェスト** フォルダーに作成した.zip ファイルをアップロードします。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/open-app.png\" alt-text=\"アプリを開く\":::\n\n1. [ **追加]** を選択して、会話ボットをチャットに追加します。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/add-conversation-bot_1.png\" alt-text=\"[会話ボットの追加] オプションを示すスクリーンショット。\":::\n\n    ボットを操作する場合は、メッセージを送信します。 ボットは SSO トークンを交換し、代わりにGraph APIを呼び出します。 **サインアウト** するメッセージを送信しない限り、サインインしたままになります。\n\n1. ボットにメッセージを送信します。 会話ボットは初めて同意を求めます。\n\n1. [ **続行]** を選択して、ボットにアクセスするための Teams クライアントへのアクセス許可を付与します。\n\n     :::image type=\"content\" source=\"~/assets/images/bots/sbsdesktop-mobile-consent-request1.png\" alt-text=\"ボットへのアクセス許可の付与の選択を示すスクリーンショット\":::\n    \n    > [!NOTE]\n    > これで、ボット アプリで SSO を構成し、同意を与える必要があるのは唯一の時間です。\n\n1. モバイル デバイスの場合は、[**要求されたアクセス許可**] で **[同意** する] を選択します。\n\n    > [!NOTE]\n    > これで、モバイルでボット アプリに対する SSO を構成しました。同意する必要があるのは今回だけです。\n\n    :::image type=\"content\" source=\"~/assets/images/bots/sbsdesktop-mobile-consent-request.png\" alt-text=\"ボットにサインインしているモバイルを示すスクリーンショット。\":::\n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    このようなものを思いついたのですか?

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="最終的な出力を示すスクリーンショット。":::
- content: SSO 認証を使用したボットの構築を開始するためのチュートリアルを完了しました。
