### YamlMime:Tutorial
title: シングル サインオンと Teams ボット
metadata:
  title: Teamsボットと SSO
  description: このチュートリアルでは、ボットで SSO を設定する方法について説明します。Teams。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: ボット認証の詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: be182190e04a57e9b581be3367ce4926eaf023f1
  ms.sourcegitcommit: 7209e5af27e1ebe34f7e26ca1e6b17cb7290bc06
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/25/2022
  ms.locfileid: "62212532"
items:
- durationInMinutes: 1
  content: "Teamsボットは、顧客サービスなど、ユーザーが繰り返し自動化されたタスクを実行する会話型ボットです。 ユーザーは、繰り返しタスクを実行するために資格情報を複数回使用してサインインする必要があります。 シングル サインオン (SSO) 認証メソッドは、Azure Active Directoryトークンを更新します。 これにより、ユーザーがサインイン資格情報を入力する必要がある回数が削減されます。 \n\nボットの動作は、関連する会話に応じて異なります。\n\n* チャネルチャットとグループ チャット会話のボットでは、ユーザーがボット@mention必要があります。\n* 1 対 1 の会話の場合、ボットを @メンションする必要はありません。 ユーザーが送信したメッセージはすべてボットにルーティングされます。\n\nこのステップ バイ ステップ ガイドは、SSO 認証を有効にしたボットを作成するのに役立ちます。 次の出力が表示されます。\n\n![ボットにサインインしたモバイル](~/assets/images/bots/sbs-desktop-mobile.png)\n"
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境をセットアップしてください。  \n\n* プロファイルMicrosoft Teams付きアクティブなアカウント\n\n  > [!TIP]\n  > ユーザー アカウントMicrosoft Teamsゲスト アカウントできなさい。\n\n* [ngrok](https://ngrok.com/) または同等のトンネリング ソリューション\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken をインストールします](https://ngrok.com/download)。\n\n* Visual Studio 2019 または最新バージョン\n* [Microsoft 365をインストールするための](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant)適切なアクセス許可Teams開発者アカウントまたはユーザー アカウントへのアクセスを許可する\n"
- title: Azure Bot Service でボットをセットアップする
  durationInMinutes: 5
  content: "SSO を使用してボットを認証するには、Azure Bot Service でボットを設定できます。 Azure でボットを開発してホストするときに、ボットを Azure Bot Service に登録します。 次の手順を実行します。\n\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* Azure Bot Service にボットを登録する Azure Bot リソースを作成します。\n* ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n* ボットMicrosoft Teamsチャネルを追加して、ボットを展開Teamsします。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\nngrok を使用して、ローカルで実行中の Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Azure Bot リソースを作成するには**\n\n1. [Azure portal](https://portal.azure.com/) にアクセスします。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに **「Azure bot」と入力し** 、Enter キーを選択します。\n1. [Azure **Bot] を選択します**。\n\n    ![Azure ボット カードの作成](~/assets/images/bots/createazurebot.png)\n\n1. **[作成]** を選択します。\n1. ボット ハンドルに必要なボット ハンドル名 **を入力します**。\n1. [サブスクリプション **] ドロップダウン リスト** から、サブスクリプションを選択します。\n1. [リソース **グループ] ドロップダウン リスト** から、リソース グループを選択します。\n    \n    新しいリソースを作成するには、[新しいリソースの作成] を選択し、リソース名を入力し **、[OK]** を選択し、[新しいリソース グループの場所] ドロップダウン リストから必要な場所 **を** 選択します。\n\n    > [!NOTE]\n    > [Microsoft App ID] セクションで、[ **新しい Microsoft アプリ ID** の作成] が既に選択されています。 [既存のアプリ登録 **を使用する] を** 選択し、[既存のアプリ **ID] を** 入力し、[既存のアプリ パスワード **] を入力します**。\n\n1. **[確認 + 作成]** を選びます。\n\n    <img src=\"~/assets/images/bots/Azurebotcreate.png\" alt=\"Create resource Azure bot\" width=\"700\"/>\n\n1. 検証に合格した場合は、[作成] を **選択します**。\n\n    ボット サービスをプロビジョニングするには、少し時間が必要です。\n\n1. [**リソースに移動**] を選びます。 ボットと関連リソースがリソース グループに一覧表示されます。\n\n    これで、Azure ボットが作成されました。\n\n    ![Azure ボット リソースの作成](~/assets/images/bots/Azurebotresource.png)\n\n**クライアント シークレットを作成するには**\n\n1. [構成 **設定** 構成] を **選択します**。 将来の **参照のために Microsoft App ID** (クライアント ID) を保存します。\n\n1. [Microsoft App **ID] の隣にある [** 管理] を **選択します**。\n\n     ![Microsoft アプリ ID](~/assets/images/bots/MicrosoftAppID.png)\n\n1. [クライアント シークレット **] セクションで** 、[新しいクライアント シークレット **] を選択します**。 [ **クライアント シークレットの追加] ウィンドウ** が表示されます。  \n\n1. [説明 **] と入力し** 、[追加] **を選択します**。\n\n    <img src=\"~/assets/images/bots/addclientsecret.png\" alt=\"Add client secret to app\" width=\"500\"/>\n\n1. [値 **] 列で** 、[クリップボードにコピー] **を選択し** 、将来の参照のためにクライアント シークレット ID を保存します。\n\n     ![クライアント シークレットの値](~/assets/images/bots/valueclientsecret.png)\n   \n**チャネルを追加Microsoft Teamsするには**\n\n1. [ホーム] **に移動します**。\n\n    <img src=\"~/assets/images/bots/homepage.png\" alt=\"Home page\" width=\"600\"/>\n\n1. [最近使ったリソース] セクションに一覧表示されているボット **を開** きます。\n1. 左側 **のウィンドウで**[チャネル] を選択し、[チャネル]**をTeams** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.    \n      ![チャネルTeamsを開く](~/assets/images/bots/channel-teams.png)    \n      ![[選択Teams](~/assets/images/bots/select-teams.png)    \n1. **[保存]** を選択します。\n1. このチェック ボックスをオンにしてサービス条件に同意し、[同意する] を **選択します**。</br>\n      ![利用規約](~/assets/images/bots/select-terms-of-service.png)\n\n**メッセージング エンドポイントを追加するには**\n\n1. 作成 **設定** Azure ボットの [構成] を **選択します**。\n1. ngrok に移動します。\n1. 次の図に示すように、HTTPS URL (https to io) をコピーします。\n\n    ![ngrok HTTPS URL](~/assets/images/bots/ngrokURL.png)\n\n1. メッセージング **エンドポイントで、ngrok** から利用可能な HTTPS URL を使用し、URL の最後に **/api/messages を追加します**。\n\n    <img src=\"~/assets/images/bots/messagingURL.png\" alt=\"Messaging endpoint\" width=\"600\"/>\n\n1. **[適用]** を選択します。\n\n    Azure Bot Service でボットを正常にセットアップし、ボット サービス接続をセットアップする必要があります。\n"
- title: ボットの SSO を構成する
  durationInMinutes: 5
  content: "ボット サービスでユーザーがサインインしてボットにアクセスするには、ボットの SSO を構成する必要があります。 これを行うには、次の手順を実行します。\n\n* Azure ボット リソースにリダイレクト URI を追加します。\n* API エンドポイントを公開して、リソースにアクセスできる場所を指定します。\n* クライアント アプリケーションを承認します。\n* ダウンストリーム呼び出しに必要な API アクセス許可を追加します。\n* 暗黙的な付与を有効にする。\n* マニフェストを更新します。\n* ボット サービス接続を設定します。\n\n**Azure ボット リソースにリダイレクト URI を追加するには**\n\n1. [Microsoft App **ID] の隣にある [** 管理] を **選択します**。</br>\n    ![アプリ ID の管理](~/assets/images/bots/select-manage.png)\n1. ボット リソースの左側のウィンドウで、[認証] を **選択します**。\n1. [ **プラットフォーム構成] で、[** プラットフォームの **追加] を選択します**。\n1. **[Web]** を選びます。\n\n1. [リダイレクト **URI] と入力し** 、[ **https://token.botframework.com/.auth/web/redirect** 構成] を **選択します**。\n\n    <img src=\"~/assets/images/bots/redirectURI.png\" alt=\"Configure Redirect URI\" width=\"600\"/>\n\n    リダイレクト URI が Azure ボット リソースに追加されます。\n\n    ![ボット リソースに追加されたリダイレクト URI](~/assets/images/bots/redirectURIadded.png)\n\n**API エンドポイントを公開するには**\n\n1. 左側のウィンドウで **、[API の公開] を選択します**。\n1. アプリケーション ID **URI の [** 設定] を選択します。\n1. 表示されているアプリケーション ID URI を使用し、URI **api://botid の** 先頭にアプリケーション ID URI を追加します。\n\n    <img src=\"~/assets/images/bots/exposeAPI.png\" alt=\"Expose an API\" width=\"500\"/>\n\n1. **[保存]** を選択します。 将来の **参照のためにアプリケーション ID URI** を保存します。\n1. **[スコープの追加]** を選択します。\n1. [ **スコープ名] に**「access_as_user」 **と入力します**。\n1. **[Who同意できますか?** に切り **替えて、管理者とユーザーに切り替えます**。\n1. ボックスに次の値を入力します。\n\n    | フィールド | 値 |\n    | ----- | ----- |\n    | 管理者の同意表示名 | Teamsプロファイルにアクセスできる |\n    | 管理者の同意の説明 | アプリTeams Web API を現在のユーザーとして呼び出す権限を持つユーザーを許可します。 |\n    | ユーザーの同意表示名 | Teamsプロファイルにアクセスし、代理で要求を行うことができます |\n    | ユーザーの同意の説明 | ユーザー Teams同じ権限でこのアプリの API を呼び出す方法を有効にしてください。 |\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n    <img src=\"~/assets/images/bots/addscope.png\" alt=\"Add a scope to app\" width=\"500\"/>\n\n1. **[スコープの追加]** を選択します。 スコープ名は自動的にアプリケーション ID URI と一致し **、/access_as_user** に追加されます。\n\n    ![API の公開とスコープの追加](~/assets/images/bots/ExposeAPIandaddscope.png)\n\n**クライアント アプリケーションを承認するには**\n\n次の ID を承認済みクライアント アプリケーション **として追加し** 、[承認済みスコープ] のチェック ボックス **もオンにします**。      \n* 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams モバイルまたはデスクトップ アプリケーション)            \n* 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams Web アプリケーション)</br>     \n    ![アプリへのクライアント アプリケーションの追加](~/assets/images/bots/addclientapplication1.png)        \n\n**ダウンストリーム呼び出しに必要な API アクセス許可を追加するには**\n\n1. 左側 **のウィンドウから [API のアクセス** 許可] を選択します。\n1. アプリで必要なユーザーが委任したアクセス許可を、ダウンストリーム API (User.Read など) に追加します。</br>\n    ![API ユーザーのアクセス許可](~/assets/images/bots/APIpermissions.png)\n\n**暗黙的な付与を有効にするには**\n\n1. 左側の **ウィンドウから** [認証] を選択します。\n1. [アクセス トークンと ID **トークン****] チェック ボックスを** オンにします。</br>\n    ![アプリの認証チェック ボックス](~/assets/images/bots/authenticationcheckboxes.png)\n1. [保存 **] を** 選択して変更を保存します。\n\n**マニフェストを更新するには**\n\n1. 左側 **のウィンドウから** [マニフェスト] を選択します。\n1. 構成項目が **\"accessTokenAcceptedVersion\": 2 に設定されている必要があります**。 指定しない場合は、その値を **2 に変更し** 、[保存] を **選択します**。 (既にボットをテストしている場合は、このアプリTeamsサインアウトし、サインインする必要Teams。 次に、もう一度サインインして、この変更を表示します)。</br>\n    ![マニフェストの更新](~/assets/images/bots/update-manifest.png)</br>\n\n**Bot Service 接続を設定するには**\n\n1. [構成]**ページの**  >  **[OAuth 接続の追加] ページに移動設定。**\n1. **[OAuth 接続の追加] を設定。**\n1. [ **新しい接続設定] で**、次の詳細を入力します。\n\n    | Field | 値または説明 |\n    | ----- | ----- |\n    | 名前 | 新しい接続設定の名前を入力します。 ボット サービス コードの設定で名前を使用できます。 |\n    | Service Provider | **[V2 Azure Active Directory] を選択します**。 |\n    | クライアント ID | 以前に Microsoft App **ID として保存されています**。 |\n    | クライアント シークレット | 以前はクライアント シークレット ID **の** 値として保存されています。 |\n    | トークンExchange URL | API エンドポイント **の公開中に** 以前に取得したアプリケーション ID URL を使用します。 |\n    | テナント ID | 共通と **入力します**。 |\n    | Scopes | **User.Read と入力** し、ダウンストリームAPI へのアクセス許可を指定する際に必要なすべてのスコープを追加します。 |\n\n    <img src=\"~/assets/images/bots/botserviceconnection.png\" alt=\"Bot Service connection\" width=\"300\"/>\n\n1. **[保存]** を選択します。\n1. **[適用]** を選択します。\n"
- title: ボット サンプルの構成と実行
  durationInMinutes: 1
  content: "ボット サンプルを構成して、会話型ボットを認証する方法を理解Microsoft Teams。\n\n**ボット サンプルを構成して実行するには**\n\n1. Visual Studio を開きます。\n1. [Visual Studio] で、[リポジトリ **の複製] を選択します**。\n1. リポジトリの **場所に、** と入力します **https://github.com/OfficeDev/Microsoft-Teams-Samples.git** 。 リポジトリが複製される **パス** に注意してください。\n1. [**ファイル] を>/ソリューション> Project開く] を選択します**。\n1. microsoft-Teams-Samples >ボット> **> sso-quickstart > csharp_dotnetcore** します。\n1. **BotSSOCSharp.csproj ファイルを開** きます。\n1. **appsettings.json ファイルを開** きます。\n1. と を **使用するボットの appsettings.json** 構成を `MicrosoftAppId` 更新します `MicrosoftAppPassword` 。 OAuth 接続名を接続名として **使用します**。\n\n    > [!NOTE]\n    > ボットの [ `MicrosoftAppId` 構成] ページから取得できます。 これは `MicrosoftAppPassword` 、以前に保存したクライアント シークレット ID の値です。\n\n    ![Appsettings json](~/assets/images/bots/appsettingsjson.png)\n\n1. このプロジェクトを **実行するには、F5** キーを選択します。\n\n    <br>\n\n    <details>\n\n    <summary><b>トラブルシューティング</b></summary>\n\n    [パッケージを検索 **できません] エラーが表示される場合は** 、次の手順を実行します。\n\n    1.  [ツール]**に**  >  **移動**  >  **NuGet パッケージ マネージャーパッケージ マネージャー 設定。**\n    1.  表示される **[オプション]** ウィンドウで、[パッケージ ソース] **NuGet パッケージ マネージャー**  >  **を選択します**。\n    1.  **[追加]** を選択します。\n    1.  [**名前]** に「nuget.org」**と入力し、[****ソース**] に入力します **https://api.nuget.org/v3/index.json** 。\n    1.  [更新] と **[OK] を選択します**。 \n    1.  プロジェクトを再構築します。\n    <br>\n\n    </details>\n"
- title: アプリの構成と実行Teamsする
  durationInMinutes: 2
  content: >
    ボットをテストする最も包括的な方法は、アプリ パッケージを作成し、アプリ パッケージをアプリ パッケージにアップロードTeams。 このメソッドは、すべてのスコープでボットで使用できる完全な機能をテストする唯一の方法です。 アプリを構成して実行するには、Teamsファイルを **アップロードmanifest.zipします**。


    **ファイルをアップロードTeamsしてアプリをmanifest.zipするには**


    1. このVisual Studio **appPackage/フォルダーに移動** します。

    1. **manifest.json ファイルを開** きます。

    1. **manifest.json ファイルで****、{TODO: MicrosoftAppId}** を見つけて、それを Microsoft App ID に置き換える。

    1. [Windows エクスプローラーで **、microsoft-Teams-Samples > appPackage フォルダー>ボット会話-sso-quickstart > csharp_dotnetcore >に移動** します。

    1. **appPackage/** フォルダーの内容を圧縮して、ファイル **を作成** manifest.zip。

    1. [次へ] Teams。

    1. アプリをアップロード **manifest.zip、[** ストア] を選択>**カスタム** アプリ> アップロードアプリを管理し、アプリを開 **manifest.zip。**

    1. [ **追加] を** 選択してチャットに会話ボットを追加します。

        このボットを操作するには、メッセージを送信します。 ボットは SSO トークンを交換し、ユーザーに代わって Graph API を呼び出し、結果を返します。 メッセージをログアウトに送信しない限り、サインインが **維持されます**。

    1. ボットにメッセージを送信します。 会話ボットは初めてアクセス許可を求める。

        ![ボットへのアクセス許可](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. [続行 **] を** 選択してアクセス許可を受け入れる。


    1. 要求された **アクセス許可に対****して [承諾] を選択します**。

        ![ボットにサインインしたモバイル](~/assets/images/bots/sbs-desktop-mobile.png)
- title: 完全なチャレンジ
  durationInMinutes: 1
  content: >
    このようなことを思い付い出しましたか?


    ![ボットにサインインしたモバイル](~/assets/images/bots/sbs-desktop-mobile.png)
- content: ボット フレームワークを使用してボットで SSO を使用Microsoft Teams完了しました。
