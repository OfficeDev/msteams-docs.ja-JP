### YamlMime:Tutorial
title: シングル サインオンと Teams ボット
metadata:
  title: SSO を使用した Teams ボット
  description: このチュートリアルでは、Teams 用のボットで SSO を設定する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: ボット認証の詳細
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 1fb468c8b9cc3ce1a8f8d407ea957d579632847c
  ms.sourcegitcommit: e16b51a49756e0fe4eaf239898e28d3021f552da
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 06/04/2022
  ms.locfileid: "65887815"
items:
- durationInMinutes: 1
  content: "Teams ボットは、カスタマー サービスなど、ユーザーが繰り返し行う自動化されたタスクを実行する会話型ボットです。 ユーザーは、繰り返しタスクを実行するために資格情報で複数回サインインする必要があります。 Azure Active Directory のシングル サインオン (SSO) 認証方法では、認証トークンが自動的に更新されるため、ユーザーがサインイン資格情報を入力する必要がある回数が減ります。 \n\nボットの動作は、ボットが関係する会話によって異なります。\n\n* チャネルとグループチャットの会話のボットでは、ユーザーがボットを@mentionする必要があります。\n* 1 対 1 の会話の場合、ボットを @メンションする必要はありません。 ユーザーによって送信されたすべてのメッセージは、ボットにルーティングされます。\n\nこのステップ バイ ステップ ガイドは、SSO 認証が有効になっているボットを作成するのに役立ちます。 次の出力が表示されます。\n\n![ボットにサインインしているモバイル](~/assets/images/bots/sbs-desktop-mobile.png)\n"
- title: 前提条件
  durationInMinutes: 1
  content: "次のツールをインストールし、開発環境を設定してください。  \n\n* プロフィール画像を含むアクティブな Microsoft Teams アカウント\n\n  > [!TIP]\n  > Microsoft Teams アカウントがゲスト アカウントではないことを確認します。\n\n* [ngrok](https://ngrok.com/) または同等のトンネリング ソリューション\n\n  > [!NOTE]\n  > ngrok をダウンロードしたら、サインアップして [authtoken](https://ngrok.com/download) をインストールします。\n\n* Visual Studio 2019 または最新バージョン\n* [Microsoft 365 開発者アカウント](concepts/build-and-test/prepare-your-o365-tenant.md) またはアプリをインストールするための適切なアクセス許可を持つ Teams アカウントへのアクセス\n"
- title: Azure Bot Service でボットを設定する
  durationInMinutes: 5
  content: "SSO でボットを認証するには、Azure Bot Service でボットを設定します。 Azure でボットを開発してホストするときに、ボットを Azure Bot Service に登録します。 次の手順を実行します。\n\n* ngrok を使用して、Web サーバーのエンドポイントへのトンネルを作成します。\n* Azure Bot Service にボットを登録する Azure Bot リソースを作成します。\n* ボットの SSO 認証を有効にするクライアント シークレットを作成します。\n* Microsoft Teams チャネルを追加して、ボットを Teams チャネルにデプロイします。\n* 作成した ngrok トンネルにメッセージング エンドポイントを追加します。\n\nngrok を使用して、ローカルで実行されている Web サーバーのパブリックに利用可能な HTTPS エンドポイントへのトンネルを作成します。 ngrok で次のコマンドを実行します。\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Azure Bot リソースを作成するには**\n\n1. [Microsoft Azure portal](https://portal.azure.com/) に移動します。\n1. **[リソースの作成]** を選択します。\n1. 検索ボックスに **「Azure bot** 」と入力し、Enter キーを選択します。\n1. **Azure Bot** を選択します。\n\n    ![Azure ボット カードを作成する](~/assets/images/bots/createazurebot.png)\n\n1. **[作成]** を選択します。\n1. ボット ハンドルに必要な **ボット ハンドル** 名を入力します。\n1. **[サブスクリプション**] ドロップダウン リストから、サブスクリプションを選択します。\n1. **[リソース グループ**] ドロップダウン リストから、リソース グループを選択します。\n    \n    新しいリソースを作成するには、[ **新規作成**] を選択し、リソース名を入力 **し、[OK] を** 選択し、[ **新しいリソース グループの場所** ] ドロップダウン リストから必要な場所を選択します。\n\n    > [!NOTE]\n    > [Microsoft アプリ ID] セクションで、[ **新しい Microsoft アプリ ID の作成]** が既に選択されています。 [ **既存のアプリの登録を使用** する] を選択し、 **既存のアプリ ID を** 入力して、 **既存のアプリ パスワード** を入力できます。\n\n1. **[確認 + 作成]** を選びます。\n\n    <img src=\"~/assets/images/bots/Azurebotcreate.png\" alt=\"Create resource Azure bot\" width=\"700\"/>\n\n1. 検証に合格した場合は、**[作成]** を選択します。\n\n    ボット サービスがプロビジョニングされるまで少し時間がかかります。\n\n1. [**リソースに移動**] を選びます。 ボットと関連リソースがリソース グループに一覧表示されます。\n\n    これで、Azure ボットが作成されました。\n\n    ![Azure ボット リソースが作成されました](~/assets/images/bots/Azurebotresource.png)\n\n**クライアント シークレットを作成するには**\n\n1. **[構成設定]** で、**[追加]** を選択します。\n\n   > [!TIP]\n   > 今後参照できるように **、Microsoft アプリ ID** または **クライアント ID を** 保存します。\n\n1. **[ボットの種類**] で **[MultiTenant**] を選択します。\n\n     ![ボットの種類](~/assets/images/bots/bot-type.png)\n\n1. **Microsoft アプリ ID** の横にある [**管理**] を選択します。\n\n     ![Microsoft アプリ ID](~/assets/images/bots/MicrosoftAppID.png)\n\n1. [ **クライアント シークレット** ] セクションで、[ **新しいクライアント シークレット**] を選択します。 [ **クライアント シークレットの追加]** ウィンドウが表示されます。  \n\n1. **[説明]** を入力し、**[追加]** を選択します。\n\n    <img src=\"~/assets/images/bots/addclientsecret.png\" alt=\"Add client secret to app\" width=\"500\"/>\n\n1. **[値]** の列で、**[クリップボードにコピー]** を選択し、将来参照できるようにクライアント シークレット ID を保存します。\n\n     ![クライアント シークレットの値](~/assets/images/bots/valueclientsecret.png)\n   \n**Microsoft Teams チャネルを追加するには**\n\n1. **[ホーム]** に移動します。\n\n    <img src=\"~/assets/images/bots/homepage.png\" alt=\"Home page\" width=\"600\"/>\n\n1. **[最近使ったリソース]** セクションに一覧表示されているボット開きます。\n1. 左側のウィンドウで **[チャネル**] を選択し、[Teams] を選択 **します**。 <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.    \n      ![チャネルから Teams を開く](~/assets/images/bots/channel-teams.png)    \n      ![[Teams] を選択します](~/assets/images/bots/select-teams.png)    \n1. **[保存]** を選択します。\n1. サービス利用規約に同意するチェック ボックスをオンにし、**[承諾する]** を選択します。</br>\n      ![利用規約](~/assets/images/bots/select-terms-of-service.png)\n\n**メッセージング エンドポイントを追加するには**\n\n1. 作成した Azure ボットの **設定** で、[構成] を選択 **します**。\n1. ngrok に移動します。\n1. 次の図に示すように、HTTPS URL (https から io) をコピーします。\n\n    ![ngrok HTTPS URL](~/assets/images/bots/ngrokURL.png)\n\n1. **メッセージング エンドポイント** で、ngrok から入手できる HTTPS URL を使用し、URL の最後に **/api/messages** を追加します。\n\n    <img src=\"~/assets/images/bots/messagingURL.png\" alt=\"Messaging endpoint\" width=\"600\"/>\n\n1. **[適用]** を選択します。\n\n    Azure Bot Service でボットを正常に設定したので、ボット サービス接続を設定する必要があります。\n"
- title: ボットの SSO を構成する
  durationInMinutes: 5
  content: "Bot Service でユーザーがサインインしてボットにアクセスできるようにするには、ボットの SSO を構成する必要があります。 これを行うには、次の手順に従います。\n\n* Azure ボット リソースにリダイレクト URI を追加します。\n* API エンドポイントを公開して、リソースにアクセスできる場所を指定します。\n* クライアント アプリケーションを承認します。\n* ダウンストリーム呼び出しに必要な API アクセス許可を追加します。\n* 暗黙的な許可を有効にします。\n* マニフェストを更新します。\n* Bot Service 接続を設定します。\n\n**Azure ボット リソースにリダイレクト URI を追加するには**\n\n1. **Microsoft アプリ ID** の横にある [**管理**] を選択します。</br>\n    ![アプリ ID を管理する](~/assets/images/bots/select-manage.png)\n1. ボット リソースの左側のウィンドウで、[ **認証**] を選択します。\n1. **[プラットフォームの構成]** で、**[プラットフォームの追加]** を選択します。\n1. **[Web]** を選びます。\n\n1. **「リダイレクト URI」と**`https://token.botframework.com/.auth/web/redirect`入力し、[構成] を選択 **します**。\n\n    <img src=\"~/assets/images/bots/redirectURI.png\" alt=\"Configure Redirect URI\" width=\"600\"/>\n\n    リダイレクト URI が Azure ボット リソースに追加されます。\n\n    ![ボット リソースに追加されたリダイレクト URI](~/assets/images/bots/redirectURIadded.png)\n\n**API エンドポイントを公開するには**\n\n1. 左側のウィンドウで、[ **API の公開**] を選択します。\n1. アプリケーション ID URI の **[設定** ] を選択します。\n1. URI の先頭に表示されているアプリケーション ID URI を使用し **、api://botid 追加** します。\n\n    <img src=\"~/assets/images/bots/exposeAPI.png\" alt=\"Expose an API\" width=\"500\"/>\n\n1. **[保存]** を選択します。 今後の参照用に **アプリケーション ID URI を** 保存します。\n1. **[スコープの追加]** を選択します。\n1. **[スコープ名] に****「access_as_user**」と入力します。\n1. [ **同意できるユーザー] で**、 **管理者とユーザー** に切り替えます。\n1. ボックスに次の値を入力します。\n\n    | フィールド | 値 |\n    | ----- | ----- |\n    | 管理者の同意表示名 | Teams はユーザーのプロファイルにアクセスできます |\n    | 管理者の同意の説明 | Teams がアプリの Web API を現在のユーザーとして呼び出すことができます。 |\n    | ユーザー同意表示名 | Teams はユーザー プロファイルにアクセスし、ユーザーに代わって要求を行うことができます |\n    | ユーザーの同意の説明 | Teams が持っているのと同じ権限でこのアプリの API を呼び出すようにします。 |\n\n1. **[状態]** が **[有効]** に設定されていることを確認してください。\n\n    <img src=\"~/assets/images/bots/addscope.png\" alt=\"Add a scope to app\" width=\"500\"/>\n\n1. **[スコープの追加]** を選択します。 スコープ名はアプリケーション ID URI と自動的に一致し、 **末尾に /access_as_user** が追加されます。\n\n    ![公開された API とスコープが追加されました](~/assets/images/bots/ExposeAPIandaddscope.png)\n\n**クライアント アプリケーションを承認するには**\n\n次の ID を **承認済みクライアント アプリケーション** として追加し、 **承認されたスコープ** のチェック ボックスをオンにします。      \n* 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams モバイルまたはデスクトップ アプリケーション)            \n* 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams Web アプリケーション)</br>     \n    ![クライアント アプリケーションをアプリに追加する](~/assets/images/bots/addclientapplication1.png)        \n\n**ダウンストリーム呼び出しに必要な API アクセス許可を追加するには**\n\n1. 左側のウィンドウ **[API アクセス許可]** を選択します。\n1. アプリに必要なユーザー委任アクセス許可をダウンストリーム API (User.Read など) に追加します。</br>\n    ![API ユーザーのアクセス許可](~/assets/images/bots/APIpermissions.png)\n\n**暗黙的な付与を有効にするには**\n\n1. 左側のウィンドウで **[認証]** を選択します。\n1. **[アクセス トークン]** を選択し、**[ID トークン]** チェックボックスを選択します。</br>\n    ![アプリの [認証] チェック ボックス](~/assets/images/bots/authenticationcheckboxes.png)\n1. **[保存]** を選択し、変更内容を保存します。\n\n**マニフェストを更新するには**\n\n1. 左側のウィンドウで **[マニフェスト]** を選択します。\n1. 構成項目が次に設定されていることを確認します **\"accessTokenAcceptedVersion\": 2**。 そうでない場合は、その値を **2** に変更し、[ **保存]** を選択します。 (Teams でボットを既にテストしている場合は、このアプリをサインアウトして Teams にサインアウトする必要があります。 その後、もう一度サインインして、この変更を確認します)。</br>\n    ![マニフェストを更新する](~/assets/images/bots/update-manifest.png)</br>\n\n**Bot Service 接続を設定するには**\n\n1. **[構成] ページ** > の **[OAuth 接続設定の追加]** に移動します。\n1. **[OAuth 接続設定の追加]** を選択します。\n1. **[新しい接続設定]** で、次の詳細を入力します。\n\n    | フィールド | 値または説明 |\n    | ----- | ----- |\n    | 名前 | 新しい接続設定の名前を入力します。 この名前は、ボット サービス コードの設定で使用できます。 |\n    | Service Provider | **Azure Active Directory V2 を選択します**。 |\n    | クライアント ID | 以前に **Microsoft アプリ ID** として保存しました。 |\n    | クライアント シークレット | 以前にクライアント シークレット ID の **値** として保存しました。 |\n    | トークン交換 URL | API エンドポイントを公開するときに、以前に取得した **アプリケーション ID URL を** 使用します。 |\n    | テナント ID | common と入力 **します**。 |\n    | Scopes | **User.Read** と入力し、ダウンストリーム API へのアクセス許可を指定するときに必要なすべての **スコープ** を追加します。 |\n\n    <img src=\"~/assets/images/bots/botserviceconnection.png\" alt=\"Bot Service connection\" width=\"300\"/>\n\n1. **[保存]** を選択します。\n1. **[適用]** を選択します。\n"
- title: ボット サンプルを構成して実行する
  durationInMinutes: 1
  content: >
    Microsoft Teams で会話型ボットを認証する方法を理解するようにボット サンプルを構成します。


    **ボット サンプルを構成して実行するには**


    1. Visual Studio を開きます。

    1. Visual Studio で、[ **リポジトリの複製**] を選択します。

    1. リポジトリの **場所に**「.」と入力します `https://github.com/OfficeDev/Microsoft-Teams-Samples.git`。 リポジトリが複製される **パス** に注意してください。

    1. [ **ファイルを** > **開く** > **] プロジェクト/ソリューションを選択します**。

    1. **microsoft-Teams-Samples >サンプル > bot-conversation-sso-quickstart > csharp_dotnetcore** フォルダーに移動します。

    1. **BotSSOCSharp.csproj ファイルを** 開きます。

    1. **appsettings.json ファイルを** 開きます。

    1. とを使用するように、ボットの **appsettings.json** 構成を`MicrosoftAppId``MicrosoftAppPassword`更新します。 OAuth 接続名を **接続名** として使用します。

        > [!NOTE]
        > ボットの `MicrosoftAppId` [構成] ページから取得できます。 以前 `MicrosoftAppPassword` に保存したクライアント シークレット ID の値です。

        ![Appsettings json](~/assets/images/bots/appsettingsjson.png)

    1. F5  キーを選択して、このプロジェクトを実行します。

        <br>

        <details>

        <summary><b>トラブルシューティング</b></summary>

        **パッケージが見つからない** というエラーが発生した場合は、次の手順に従います。

        1.  **ツール** > **NuGet パッケージ マネージャー パッケージ マネージャー** > **の設定** に移動します。
        1.  表示される **[オプション]** ウィンドウで、[ **NuGet パッケージ マネージャー** > **パッケージ ソース**] を選択します。
        1.  **[追加]** を選択します。
        1.  **[名前]** に「**ソース」** と入力`nuget.org`し、次のように入力します`https://api.nuget.org/v3/index.json`。
        1.  [ **更新]** と **[OK] を選択します**。
        1.  プロジェクトをリビルドします。
        <br>

        </details>
- title: Teams アプリを構成して実行する
  durationInMinutes: 2
  content: >
    ボットをテストする最も包括的な方法は、アプリ パッケージを作成して Teams にアップロードすることです。 このメソッドは、すべてのスコープでボットで使用できる完全な機能をテストする唯一の方法です。 Teams アプリを構成して実行するには、ファイルを `manifest.zip` アップロードします。


    **manifest.zip ファイルをアップロードして Teams アプリを実行するには**


    1. Visual Studio で、フォルダーに `appPackage/` 移動します。

    1. `manifest.json` ファイルを開きます。

    1. ファイルで `manifest.json` **{TODO: MicrosoftAppId} を** 探し、それを Microsoft アプリ ID に置き換えます。

    1. Windows エクスプローラーで、 **microsoft-Teams-Samples > サンプル > bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** フォルダーに移動します。

    1. 作成`manifest.zip`するフォルダーの内容を `appPackage/` zip にします。

    1. Teams に移動します。

    1. アップロード `manifest.zip`するには、[ **ストア > アプリの管理] >カスタム アプリをアップロード** して開きます `manifest.zip`。

    1. [ **追加]** を選択して、会話ボットをチャットに追加します。

        このボットを操作するには、メッセージを送信します。 ボットは SSO トークンを交換し、ユーザーに代わって Graph API を呼び出し、結果を返します。 **ログアウト** にメッセージを送信しない限り、サインインは維持されます。

    1. ボットにメッセージを送信します。 会話ボットは、初めてアクセス許可を要求します。

        ![ボットへのアクセス許可](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. [ **続行]** を選択してアクセス許可を受け入れます。


    1. **[要求されたアクセス許可** に **同意する**] を選択します。

        ![ボットにサインインしているモバイル](~/assets/images/bots/sbs-desktop-mobile.png)
- title: チャレンジを完了する
  durationInMinutes: 1
  content: >
    このようなことを思い付いたのですか?


    ![ボットにサインインしているモバイル](~/assets/images/bots/sbs-desktop-mobile.png)
- content: Bot Framework を使用して Microsoft Teams 用のボットで SSO を使用するチュートリアルを完了しました。
