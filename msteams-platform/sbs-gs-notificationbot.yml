### YamlMime:Tutorial
title: JavaScript を使用した通知ボットのビルド
metadata:
  title: JavaScript を使用した通知ボットのビルド
  description: このチュートリアルでは、Teams Toolkit を使用して新しい通知ボットを作成することで、JavaScript で通知を送信する方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 05/04/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: 機能の追加に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: fd960500abb1e40de06d384776aa9d116a9f674f
  ms.sourcegitcommit: 5e645a3436a6924f4a6bf470c563aa0d76e0d226
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/07/2022
  ms.locfileid: "67615575"
items:
- durationInMinutes: 1
  content: >
    通知ボットは、Teams チャネルまたはグループ チャットまたは個人用チャットでメッセージをプロアクティブに送信します。 カードやテキストなどの HTTP 要求を使用して通知ボットをトリガーできます。


    このチュートリアルでは以下を学習します。


    - Teams Toolkit を使用して新しい通知ボットを作成する方法。

    - アプリのディレクトリ構造について説明します。

    - 複数の通知を送信する方法。


    このステップ バイ ステップ ガイドは、Teams Toolkit を使用して通知ボットを構築するのに役立ちます。 次の出力が表示されます。

      :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="トリガー出力"border="true":::
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリをビルドして展開するために必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | 使用する場合 |\n| --- | --- | --- |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript または TypeScript のビルド環境。 最新バージョンを使用します。 |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Microsoft Visual Studio Code 拡張機能。 バージョン 4.0.0 を使用します。 |\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バックエンド JavaScript ランタイム環境。 バージョン 14 または 16 を使用します。|\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams は、チャット、会議、通話、すべて 1 か所でアプリを使用して共同作業するすべてのユーザーと共同作業を行います。|\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | アプリをインストールするための適切なアクセス許可を持つ Teams アカウントにアクセスします。 |\n\n> [!NOTE]\n> このガイドは、Teams Toolkit バージョン 4.0.0 および Nodejs バージョン 14 および 16 でテストされています。 このガイドの手順は他のバージョンでも動作する場合がありますが、テストされていません。\n\n## <a name=\"prepare-development-environment\"></a>開発環境を準備する\n\n必要なツールをインストールしたら、開発環境を設定します。\n\n### <a name=\"install-the-teams-toolkit\"></a>Teams Toolkit をインストールする\n\nTeams Toolkit を使用すると、アプリのクラウド リソースのプロビジョニングとデプロイ、Teams ストアへの公開などを行うツールにより、開発プロセスを簡略化できます。 \n \n使用このツールキットは、Visual Studio Code または `TeamsFx` という CLI (コマンド ライン インターフェイス) で使用できます。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開き、 **拡張機能** (**Ctrl + Shift + X** / **⌘⇧-X** または **表示>拡張機能**) を選択します。\n1. 検索ボックスに、「**Teams Toolkit**」と入力します。\n1. Teams Toolkit の横にある **[インストール]** を選択します。\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/teams-toolkit.png\" alt-text=\"図は、Teams Toolkit 拡張機能のインストールを示しています。\":::\n\n インストール後に Teams Toolkit アイコンが、Visual Studio Code サイド バーに表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、Visual Studio Code サイド バーの Teams Toolkit アイコンを示しています。\":::\n\nTeams Toolkit は、[Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) にもあります。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、`npm` パッケージ マネージャーを使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI をインストールするために `sudo` を使用しなければならないこともあります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nLinux および macOS システムでは、より一般的です。\n\nnpm グローバル キャッシュが PATH に追加されていることを確認します。 この手順は通常、Node.js インストーラーの一部として行われます。  \n\nCLI で `teamsfx` コマンドを指定して使用できます。 コマンドを実行 `teamsfx -h`して動作していることをテストします。\n\n> [!NOTE]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell の **リモート署名済み** 実行ポリシーを有効にしてください。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** は、Teams でチャット、ファイルの共有、組織の会議の実行を行うスペースやコンテナーのようなものです。 アプリをサイドロードしてテストすることもできます。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 これはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 サイドローディングを有効にして、Teams でアプリをローカルでプレビューしてテストします。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にあるかどうかを確認しましょう。\n\nTeams でサイドロード アプリを確認するには:\n\n 1. Teams クライアントで、[ストア] を選択 **します**。\n 1. **[アプリの管理]** を選択します。\n 1. [**アプリ の発行**] を選択します。\n 1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションが表示されない場合は、Teams 管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で **[E5 サブスクリプションのセットアップ** ] を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 新しい管理者アカウントを使用して Teams にサインインします。 これで、[ **カスタム アプリのアップロード] オプションが表示** されます。\n"
- title: 通知ボットをビルドする
  durationInMinutes: 1
  content: "**Visual Studio Code を使用して通知ボットをビルドするには**\n\n 1. Visual Studio Code を開きます。\n \n 1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n 1. **[新しい Teams アプリを作成]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-teams-app.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\":::。\n\n 1. [ **新しい Teams アプリの作成** ] オプションを選択して、Teams Toolkit を使用してアプリを作成します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png\" alt-text=\"新しいプロジェクトを作成するためのウィザードが開始されます\":::\n\n 1. アプリでビルドする機能として **Notification Bot** が選択されていることを確認します。 \n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-notification-bot.png\" alt-text=\"アプリ機能の選択\":::\n\n 1. **トリガーとして [HTTP トリガー Restify Server**] を選択します。 \n 1. **[OK]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-trigger.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\":::  \n\n 1. プログラミング言語として **[JavaScript]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\":::    \n\n 1. **既定の場所** にプロジェクト ルート フォルダーを格納するには、[既定のフォルダー] を選択します。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png\" alt-text=\"既定の場所を選択する\":::\n \n    次の手順で既定の場所を変更することもできます。\n\n     1. **[参照] を選択します**。\n\n         :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-browse.png\" alt-text=\"参照場所を選択する\":::\n         \n     1. プロジェクト ワークスペースの場所を選択します。\n\n     1. フォルダーの **選択を選択します**。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-folder.png\" alt-text=\"フォルダーの選択\":::\n \n 1. アプリケーション名として mynotificationbot など、アプリに適した名前を入力します。 \n 1. **Enter** キーを押します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/type-notfication-name.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリケーション名には英数字のみを使用してください。\n\n 1. 既定では、プロジェクトは 10 秒以内に新しいウィンドウで開きます。 現在のウィンドウで開く場合は、[現在のウィンドウ **で開く**] を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/new-window-notification.png\" alt-text=\"新しいウィンドウ通知\":::\n\n     通知ボット アプリは数秒で作成されます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-bot.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\":::\n\n 1. Visual Studio Code サイドバーから **[実行とデバッグ**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::] アイコンを選択します。\n\n 1. ドロップダウン リストから **[Debug(Edge)]** または **[Debug(Chrome)]** を選択します。\n\n 1. [ **デバッグの開始] ボタンを** 選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"アプリのデバッグ\"border=\"true\"::: \n\n 1. **[追加]** を選択します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-output.png\" alt-text=\"自分の通知出力 1\"border=\"true\":::\n\n 1. **Windows PowerShell** を開きます。\n\n 1. `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` コマンドを実行します。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"Powershell トリガー\"border=\"true\":::   \n\n     Teams では次の出力が得られます。\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png\" alt-text=\"トリガー出力\"border=\"true\":::\n\n ## <a name=\"take-tour-of-source-code\"></a>ソース コードのツアーに参加する\n\n Teams Toolkit には、アプリを構築するためのコンポーネントが用意されています。 プロジェクトを作成した後、プロジェクトのフォルダーとファイルを、Visual Studio Code の **エクスプローラー** 領域で確認できます。\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/folder-structure1.png\" alt-text=\"構造タグ\":::\n\n UI フレームワークを使用することを選択した場合、次のサンプル テンプレート コードは、React コンポーネントを使用したスキャフォールディングを提供します。\n\n 新しいプロジェクト フォルダーには、次のコンテンツが含まれています。\n\n | フォルダー名 | コンテンツ |\n | --- | --- |\n | `.fx` | プロジェクト レベルの設定、構成、および環境の情報 |\n | `.vscode` | ローカル デバッグ用の VS コード ファイル |\n | `bot` | ボットのソース コード |\n | `templates` | Teams アプリ マニフェストと対応する Azure リソースのテンプレート |\n \n  **ボット** フォルダー内のコア通知の実装とその内容は次のとおりです。\n\n | ファイル名 | コンテンツ |\n | --- | --- |\n | `src/adaptiveCards/` | アダプティブ カードのテンプレート  |\n | `src/internal/` | 通知機能用に生成された初期化コード |\n | `src/index.*s` | ボット メッセージを処理し、通知を送信するエントリポイント |\n | `.gitignore` | ボット プロジェクトからローカル ファイルを除外するファイル |\n | `package.json` | ボット プロジェクトの npm パッケージ ファイル |\n"
- title: Teams チャネルに通知を送信する
  durationInMinutes: 1
  content: "**Teams チャネルに通知を送信するには**\n\n1. Visual Studio Code の **EXPLORER** で、 **MYNOTIFICATIONBOT> ボット> src> index.js** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/file-path.png\" alt-text=\"ファイル パス\":::\n\n   次のページが表示されます。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/default-program.png\" alt-text=\"既定のプログラム\":::\n\n1. Visual Studio Code の後 `for (const target of await bot.notification.installations()) { ` に次のコードを使用します。\n\n     ```bash\n     if (target.type === \"Channel\") {\n       const members = await target.members();\n       await target.sendMessage(\"This is a message to channel: \" + members.length + \" members.\");\n       for (const member of members) {\n         await member.sendMessage(\"This is a message to Member: \" + member.account.email);\n       }\n     }\n     /* \n     ```  \n\n      :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/code-add.png\" alt-text=\"コードの追加\":::\n\n    **ストレージをカスタマイズするには:**\n\n    1. Visual Studio Code の **EXPLORER** で、 **MYNOTIFICATIONBOT> ボット> src>内部> initialize.js** を選択します。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/initialize-storage.png\" alt-text=\"記憶域の初期化\":::\n    \n       次のページが表示されます。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/storage-code.png\" alt-text=\"ストレージ コード\":::\n\n    1. initialize.js **ファイル内** の次のコードを更新して、ストレージをカスタマイズします。\n\n         ```bash\n         const myStorage = new MyStorage(...);\n\n         // initialize ConversationBot with notification enabled and customized storage\n         const bot = new ConversationBot({\n             // The bot id and password to create BotFrameworkAdapter.\n             // See https://aka.ms/about-bot-adapter to learn more about adapters.\n             adapterConfig: {\n                 appId: process.env.BOT_ID,\n                 appPassword: process.env.BOT_PASSWORD,\n             },\n             // Enable notification\n             notification: {\n                 enabled: true,\n                 storage: myStorage,\n             },\n          });\n         ```  \n    1. **MyStorage** の代わりに独自のストレージの場所を使用します。\n\n        > [!NOTE]\n        > 運用環境では、独自のストレージを使用する必要があります。 ストレージが指定されていない場合は、既定のローカル ファイル ストレージと見なされます。\n\n1. Visual Studio Code サイドバーから **[実行とデバッグ**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::] アイコンを選択します。\n\n1. ドロップダウン リストから **[Debug(Edge)]** または **[Debug(Chrome)]** を選択します。\n\n1. [ **デバッグの開始] ボタンを** 選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"アプリのデバッグ\":::\n\n    Teams で次の出力が得られます。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation.png\" alt-text=\"アプリのインストール\":::\n\n1. ドロップダウン リスト **で [チームに追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation1.png\" alt-text=\"自分の通知出力 1\":::\n\n1. **[検索] ボックス** で、**任意のチャネル** を追加します。\n1. [ **ボットのセットアップ] を選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/setup-bot.png\" alt-text=\"ボットのセットアップ\":::\n\n   次の画面が表示されます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-notification.png\" alt-text=\"Channe1 通知\":::\n\n1. **Windows PowerShell** を開きます。\n\n1. `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` コマンドを実行します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"Powershell トリガー\"border=\"true\":::   \n\n   Teams チャネルで通知を受け取ります。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-output.png\" alt-text=\"チャネル出力\":::\n\n   個人用チャットで通知を受け取ります。         \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/member-output.png\" alt-text=\"member-output\":::\n"
- title: 最初の Teams アプリをデプロイする
  durationInMinutes: 1
  content: "\n通知ボット機能を使用して Teams アプリを構築し、実行することを学習しました。 最後の手順は、アプリを Azure に展開することです。\n\nTeams Toolkit を使用して、通知ボット機能を備えた最初のアプリを Azure にデプロイしましょう。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nアカウントを使用して Microsoft Azure portalにアクセスし、アプリをサポートするための新しいクラウド リソースをプロビジョニングします。\n\n1. Visual Studio Code を開きます。\n1. 通知ボット アプリを作成したプロジェクト フォルダーを開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. [ **Azure へのサインイン] を選択します**。\n\n    > [!TIP]\n    > Azure アカウント拡張機能がインストールされ、同じアカウントを使用している場合は、この手順をスキップできます。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできるようになります。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。 \n    \n    > [!NOTE]\n    > 使用可能な Azure サブスクリプションが少なくとも 1 つあることを確認します。\n\n    これで、アプリを Azure にデプロイする準備が整いました。\n\n## <a name=\"deploy-your-app-to-azure\"></a>アプリを Azure にデプロイする\n\n  **DEPLOYMENT** では、必要なクラウド リソースをプロビジョニングでき、アプリのコードが作成されたクラウド リソースにコピーされます。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. [デプロイ] **で [クラウドでプロビジョニング****] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-cloud.png\" alt-text=\"プロビジョニング コマンドを示すスクリーンショット\":::\n\n1. 既存のサブスクリプションの任意のユーザーを選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/select-subscription.png\" alt-text=\"サブスクリプションの選択\":::\n\n1. 既存のリソース グループを選択するか、新しいリソース グループを作成します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/subscription-cloud.png\" alt-text=\"プロビジョニング用のリソースを示すスクリーンショット\":::\n\n   > [!NOTE]\n   > Azure でリソースを実行するときにコストが発生する可能性があることを示すダイアログが表示されます。\n\n1. **[プロビジョニング]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-confirm1.png\" alt-text=\"プロビジョニング ダイアログのスクリーンショット。\":::\n\n   プロビジョニング プロセスにより、Azure クラウドにリソースが作成されます。 右下隅にあるダイアログを観察することで、進行状況を監視できます。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-provision-success.png\" alt-text=\"プロビジョニング完了のダイアログを示すスクリーンショット。\":::\n\n     プロビジョニングされたリソースを表示するオプションが表示されます。 このチュートリアルでは、リソースを表示する必要はありません。\n\n1. プロビジョニングが完了したら、[DEPLOYMENT] で [**クラウドにデプロイ****] を選択します**。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-cloud.png\" alt-text=\"クラウドにデプロイする場所を示すスクリーンショット。\":::\n\n1. **[展開]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/Deploy-confirm.png\" alt-text=\"デプロイして確認します。\":::\n\n   デプロイには時間がかかります。 右下隅のダイアログで進行状況を監視できます。\n    \n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-confirmation-cloud.png\" alt-text=\"デプロイの確認。\":::\n\n1. Visual Studio Code の **[ENVIRONMENT**] で [**ローカル デバッグ**] を選択します。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/local-debug.png\" alt-text=\"ローカル デバッグ。\":::\n\n1. ドロップダウン リストから [ **デバッグ エッジ** ] を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/debug-cloud.png\" alt-text=\"ローカル デバッグ。\":::\n\n1. **[追加]** を選択します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/app-cloud-output.png\" alt-text=\"アプリ クラウドの出力。\":::\n\n1. **Windows PowerShell** を開きます。\n\n1. `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` コマンドを実行します。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/windows-powershell1.png\" alt-text=\"Windows Powershell\":::\n\n    Teams で通知を受け取ります。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/cloud-final-output.png\" alt-text=\"クラウドの最終出力\":::\n\n# <a name=\"command-line\"></a>[Command Line/コマンド ライン](#tab/cli)\n\nターミナル ウィンドウで以下を行います。\n\n1. 新しいプロジェクトを作成するために実行 `teamsfx new` します。\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. Azure リソースを作成するために実行 `teamsfx provision` します。\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. アプリをデプロイするために実行 `teamsfx deploy` します。\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. アプリを実行するために実行 `teamsfx preview` します。\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: 課題の完了
  durationInMinutes: 1
  content: >
    このようなものを思いついたのですか?

     :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="トリガー出力"border="true":::
- content: 通知ボットをビルドするためのチュートリアルを完了しました。
