### YamlMime:Tutorial
title: JavaScript を使用して初めてのアプリを構築する
metadata:
  title: JavaScript を使用したHallo Welt
  description: このチュートリアルでは、JavaScript を使用してHallo Weltアプリをビルドする方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Első lépésekの概要に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 76ee0d72caf3f8b79d29825a0416251962c4aa9f
  ms.sourcegitcommit: 123a64d7bcd310352dcff9f769b5f7f9cafd6aeb
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/18/2022
  ms.locfileid: "64910565"
items:
- durationInMinutes: 1
  content: "最初のTeams アプリでアプリ開発Microsoft Teams開始します。 タブ アプリ、ボット アプリ、メッセージング拡張機能アプリの 3 つのTeams アプリを作成します。 \n\n各アプリには、独自の UI と UX が付属する機能があります。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。\" border=\"false\":::\n\n> [!NOTE]\n> このチュートリアルでは、最初にタブ アプリを作成し、次にボット アプリ、次にメッセージング拡張機能アプリを作成します。 ただし、他のアプリの機能を妨げることなく、最初に任意の機能を備えたアプリを構築することを選択できます。\n\nこのチュートリアルでは、次のことを学習します。\n\n- Teams Toolkitを使用して新しいプロジェクトを設定する方法。\n- タブ、ボット、メッセージング拡張機能など、それぞれ異なる機能を持つ 3 つのアプリをビルドする方法。\n- アプリの構造:\n    - Reactを使用した JavaScript のタブ部分。\n    - Node.jsを使用した残りの機能。\n- アプリをデプロイする方法\n"
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリのビルドとデプロイに必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | using... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Microsoft Visual Studio Code 拡張機能。 最新バージョンを使用します。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams、チャット、会議、通話用のアプリを通じて作業するすべてのユーザーと共同作業を行うことができます。すべて 1 か所で行うことができます。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バックエンド JavaScript ランタイム環境。 最新の v14 LTS リリースを使用します。|\n| &nbsp; | [マイクロソフト&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript、またはSharePoint Framework (SPFx) ビルド環境。 バージョン 1.55 以降を使用します。 |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) と [Azure CLI](/cli/azure/install-azure-cli) | 保存されたデータにアクセスしたり、Azure でTeams アプリのクラウドベースのバックエンドをデプロイしたりするための Azure ツール。 |\n| &nbsp; | [React Chrome 用開発者ツール](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)または [MicrosoftEdge&nbsp; 用の開発者ツールのReact](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | オープン ソース React JavaScript ライブラリのブラウザー DevTools 拡張機能。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph エクスプローラー。Microsoft Graph データからクエリを実行できるブラウザー ベースのツールです。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | 組織またはTeams ストアを含む、Teams アプリを構成、管理、配布するための Web ベースのポータル。 |\n\n\n> [!TIP]\n> Microsoft Graph データを操作する場合は、Microsoft Graph エクスプローラーについて学習し、ブックマークする必要があります。 このブラウザー ベースのツールを使用すると、アプリの外部で Microsoft Graphにクエリを実行できます。\n\n\n## <a name=\"prepare-development-environment\"></a>開発環境を準備する\n\n必要なツールをインストールしたら、開発環境を設定します。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Teams Toolkitをインストールする\n\nTeams Toolkitは、アプリのクラウド リソースのプロビジョニングとデプロイ、Teams ストアへの発行などを行うツールを使用して開発プロセスを簡略化するのに役立ちます。 \n \nツールキットは、Visual Studio Codeまたは CLI (コマンド ライン インターフェイス) で使用できます。.`TeamsFx`\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code開き、**拡張機能** ビュー (**Ctrl + Shift + X** / **⌘⇧-X** または **表示>拡張機能**) を選択します。\n1. 検索ボックスに「**Teams Toolkit**」と入力します。\n1. Teams Toolkitの横にある [**インストール**] を選択します。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscode.png\" alt-text=\"図は、Teams Toolkit拡張機能のインストールを示しています。\" border=\"false\":::\n\n Teams Toolkit アイコンは、インストール後にVisual Studio Codeサイドバーに表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、サイドバーのTeams ToolkitアイコンVisual Studio Code示しています。\" border=\"false\":::\n\nVisual Studio Code [Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) でもTeams Toolkitを見つけることができます。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、パッケージ マネージャーを `npm` 使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI のインストールに使用 `sudo` する必要がある場合があります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nこの条件は、Linux および macOS システムでより一般的です。\n\nnpm グローバル キャッシュを PATH に追加していることを確認します。 この手順は通常、Node.js インストーラーの一部として行われます。  \n\nコマンドで CLI を `teamsfx` 使用できます。 コマンドが動作していることを確認するには、次のコマンドを実行します `teamsfx -h`。\n\n> [!CAUTION]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell の \"リモート署名済み\" 実行ポリシーを有効にする必要があります。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams開発テナントを設定する\n\n**テナント** は、チャット、ファイル共有、会議の実行を行う、Teams内の組織のスペースやコンテナーのようなものです。 この領域は、アプリをサイドロードしてテストする場所でもあります。 テナントで開発する準備ができているかどうかを確認しましょう。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 このプロセスはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > ローカル環境でアプリをプレビューおよびテストするには、サイドローディングTeams必要です。 有効になっていない場合は、ローカルでアプリをプレビューしてテストTeamsできません。\n\nテナントは既にあり、管理者はアクセスできますか? 実際に行うかどうかを確認しましょう。\n\nTeamsでアプリをサイドロードできるかどうかを確認します。\n\n 1. Teams クライアントで、**ストア** アイコンを選択します。\n 1. [ **アプリの管理**] を選択します。\n 1. [**アプリ の発行**] を選択します。\n 1. **カスタム アプリをアップロード** するオプションを探します。 このオプションが表示された場合は、サイドローディング アプリが有効になります。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teamsでカスタム アプリをアップロードするオプションを示しています。\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションがない場合は、Teams管理者に問い合わせてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料のTeams開発者テナントを作成する (省略可能)\n\nTeams開発者アカウントをお持ちでない場合は、無料で入手できます。 Microsoft 365開発者プログラムに参加してください。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. [ **今すぐ参加** ] を選択し、画面の指示に従います。\n1. ウェルカム画面で、[ **E5 サブスクリプションのセットアップ**] を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"Microsoft 365開発者プログラムにサインアップした後に表示される内容の例。\":::\n\n1. 設定した管理者アカウントを使用して、Teamsにサインインします。 **Teamsにカスタム アプリ オプションアップロード** があることを確認します。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得する\n\nアプリをホストする場合、または Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。 [開始する前に無料アカウントを作成](https://azure.microsoft.com/free/) します。\n\nこれで、すべてのツールが用意され、アカウントが設定されました。 次に、開発環境を設定し、ビルドを開始しましょう。 最初に実行するアプリを選択します。\n"
- title: タブ アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\n最初のアプリMicrosoft Teams作成して、アプリ開発を開始します。 このアプリでは、Tab 機能を使用します。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。タブが強調表示されています。\" border=\"false\":::\n\nこのページでは、次のことを学習します。\n1. [Teams Toolkitを使用して新しい Tab プロジェクトを設定する方法](#create-your-tab-project-workspace)\n1. [アプリのディレクトリ構造について](#take-a-tour-of-the-tab-app-source-code)\n\n## <a name=\"create-your-tab-project-workspace\"></a>タブ プロジェクト ワークスペースを作成する\n\n前提条件が整っている場合は、始めましょう。\n\n> [!NOTE]\n> 表示されるVisual Studio Code UI は Mac からです。 オペレーティング システム、Teams Toolkitバージョン、環境によって異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいTeams アプリの作成**] を選択して、Teams Toolkitを使用してアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"新しいプロジェクトの作成を開始するウィザード\" border=\"false\":::\n\n1. アプリでビルドする機能として **Tab** が選択されていることを確認します。 **[OK]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-capabilities-tab.png\" alt-text=\"アプリ機能を選択する\" border=\"false\":::\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-language-tab.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. アプリケーション名として入力 `helloworld` します。 英数字のみを使用してください。 Enter キーを **押** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/enter-name-tab.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\" border=\"false\":::\n\n    Teams タブ アプリは数秒で作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/app-created.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、プロジェクト ワークスペースが作成された場所を示すメッセージがTeams Toolkitに表示されます。 このフォルダーは、Visual Studio Code設定で指定された既定の場所です。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所を変更する**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要はありません。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、Visual Studio Codeの再読み込み後に作成したプロジェクトにのみ反映されます。 既存のプロジェクトの場所は変更されません。\n\n    <details>\n    <summary>Teams アプリの作成の簡単な要約。</summary>\n    Teams アプリを作成するための簡単な要約をご覧ください。\n\n    ![Teams アプリを作成する](~/assets/videos/javascript-tab-app.gif) </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して、新しいTeams アプリを作成できます。 CLI を使用すると、一連の質問を確認できます。 すべての質問には、それに対する回答に関する指示が含まれています。\n\nたとえば、方向キーを使用してオプションを選択します。 選択した後、 **Enter** キーを押して確定します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. タブ機能を選択 **します** 。\n1. **Azure** フロントエンド ホスティングを選択します。\n1. クラウド リソースは選択しないでください。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. **Enter** キーを押して、既定のワークスペース フォルダーを選択します。\n1. アプリの名前として入力 `helloworld` します。 アプリの名前には英数字のみを使用する必要があります。\n\n  すべての質問に回答すると、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-tab-app-source-code\"></a>タブ アプリのソース コードのツアーに参加する\n\nTeams Toolkitは、アプリを構築するためのすべてのコンポーネントを提供します。 プロジェクトを作成した後、プロジェクトのフォルダーとファイルをVisual Studio Codeの **エクスプローラー** 領域に表示できます。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/hw-folder-structure-tab.png\" alt-text=\"Visual Studio Codeで Tab 機能を使用して、アプリ用にスキャフォールディングされたファイルをProjectします。\":::\n\n任意の UI フレームワークを自由に選択できますが (または使用しないでください)、このサンプル テンプレート コードでは、React コンポーネントを使用したスキャフォールディングが提供されます。\n\nこのディレクトリ構造内の他の項目のうち、Toolkitは次を保持します。\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがTeams アプリ用にカスタマイズできる構成ファイル。 |\n| - `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| - `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| - `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| - `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| - `.fx/states` | Teams Toolkitによって生成される出力をプロビジョニングします。  ツールキットは、アプリのリソースをプロビジョニングした後にこのフォルダーを作成します。 |\n| - `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| - `.fx/states/<env>.userdata` | すべての環境に対するプロビジョニング出力の機密ユーザー データ。 |\n| `tabs` | プライバシーに関する通知、使用条件、構成タブなど、実行時に必要なタブ機能のコード。 |\n| - `tabs/src/index.jsx` | メインのアプリ コンポーネントがレンダリングされるフロントエンド アプリのエントリ ポイント `ReactDOM.render()` |\n| - `tabs/src/components/App.jsx` | アプリで URL ルーティングを処理するためのコード。 [Microsoft Teams JavaScript client SDK](../msteams-platform/tabs/how-to/using-teams-client-sdk.md) を呼び出して、アプリと Teams の間の通信を確立します。 |\n| - `tabs/src/components/Tab.jsx` | アプリの UI を実装するコード。 |\n| - `tabs/src/components/TabConfig.jsx` | アプリを構成する UI を実装するコード。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイルとアプリ アイコン: color.pngとoutline.png。 |\n| - `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するためのアプリ マニフェスト  |\n| - `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するためのアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n\nクラウド機能を追加すると、必要なフォルダーがプロジェクトに追加Teams Toolkit。 このフォルダーには`api`、記述した任意のAzure Functionsに対するコードが保持されます。\n"
- title: 最初のタブ アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nTeams Toolkitを使用してプロジェクト ワークスペースを設定したら、タブ プロジェクトをビルドします。 Microsoft 365 アカウントにサインインする必要があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nMicrosoft 365 アカウントを使用してTeamsにサインインします。 Microsoft 365開発者プログラム テナントを使用している場合は、登録中に設定した管理者アカウントがMicrosoft 365 アカウントです。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーでTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。\n1. **[M365 へのサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. 資格情報を使用して、Microsoft 365 アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、Visual Studio Codeに戻ります。\n1. Visual Studio Code内のTeams Toolkitに戻ります。\n\n    サイドバーの **[ACCOUNTS**] セクションに、Microsoft 365アカウント名が表示されます。 Teams Toolkit Microsoft 365 アカウント **でサイド** ローディングが有効になっている場合、サイドローディングが有効になっていると表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Microsoft 365と Azure にサインインする場所を示すスクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドし、ローカル環境で実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用してMicrosoft 365にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Codeと TeamsFx CLI の間で共有されます。\n\n    開発環境が構成されたので、最初のTeams アプリを作成、ビルド、デプロイできます。\n\n---\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio-code\"></a>Visual Studio Code でアプリをローカルにビルドして実行する\n\nアプリをローカルに構築して実行するには、以下のようにします。\n\n1. Visual Studio Codeから **F5** を選択して、アプリケーションをデバッグ モードで実行します。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    **F5** キーを押すと、次のTeams Toolkit。\n\n    1. 次の前提条件を確認します。\n      * Microsoft 365 アカウントでログインしています。\n      * Microsoft 365 アカウントに対してサイドローディングが有効になっています。\n      * サポートされているNode.jsバージョンがインストールされています。\n      * タブ アプリの NPM パッケージがインストールされます。\n      * localhost の開発証明書がインストールされています。           \n      * ポートはタブ アプリで使用できます。\n\n      > [!NOTE]\n      > Teams Toolkit特定の前提条件を確認できない場合は、確認を求めるメッセージが表示されます。\n\n    2. アプリをAzure ADに登録し、アプリを構成します。\n    3. Teams開発者ポータルにアプリを登録し、アプリを構成します。\n    4. タブ アプリを起動します。\n    5. Web ブラウザーでTeamsを開始し、タブ アプリをサイドロードします。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/f5-build-and-run.png\" alt-text=\"F5 キーが押されたときを示すスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 このプロセスが完了するまでに 3 ~ 5 分かかる場合があります。\n\n    必要に応じて、ツールキットからローカル証明書のインストールを求めるメッセージが表示されます。 この証明書により、Teams は `https://localhost` からアプリケーションを読み込むことができます。\n\n1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ssl-prompt.png\" alt-text=\"Teamsが localhost からアプリケーションを読み込むよう SSL 証明書をインストールするプロンプトを示すスクリーンショット。\":::\n\n    または、オペレーティング システムに応じて、[ **続行**] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/ssl-prompt-mac.png\" alt-text=\"mac 上の localhost からアプリケーションを読み込むTeamsを有効にする SSL 証明書をインストールするプロンプトを示すスクリーンショット。\":::\n\n    Teams Web クライアントがブラウザー ウィンドウで開きます。\n\n1. プロンプトが表示されたら、Microsoft 365 アカウントでサインインします。\n\n1. ローカル コンピューター上のTeamsにアプリをサイドロードするように求められたら、[**追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/add-tab-app-local-debug.png\" alt-text=\"アプリをTeamsに追加する\":::\n\n1. おめでとうございます。最初のアプリはTeamsで実行されています。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-debug.png\" alt-text=\"完了したアプリのスクリーンショット\":::\n\n1. ページ内を移動して、ユーザーの詳細を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-authorize.png\" alt-text=\"タブの [ユーザー情報] セクションのスクリーンショット\":::\n    \n1. [**承認] を** 選択して、Microsoft Graphを使用してアプリでユーザーの詳細を取得できるようにします。\n\n    アプリは、ユーザーの詳細を表示するためのアクセス許可を付与するアクセス許可を要求します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-graph-permission.png\" alt-text=\"ユーザーの詳細にアクセスするためのアプリの承認のスクリーンショット\":::\n\n1. [ **承諾]** を選択して、アプリがユーザーの詳細にアクセスできるようにします。\n\n    写真と詳細が個人用タブに表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-user-info.png\" alt-text=\"タブのユーザー情報のスクリーンショット\":::\n\n    ブレークポイントの設定などの通常のデバッグ アクティビティは、他の Web アプリケーションと同様に実行できます。 このアプリはホット リロードをサポートしています。 プロジェクト内のファイルを変更すると、ページが再読み込みされます。\n\n  <!-- markdownlint-disable MD033 -->\n\n  <details>\n  <summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\n  Teamsでアプリを正常に実行するには、Teams アカウントでのサイドローディングが有効になっていることを確認します。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n\n  </details>\n\n  Toolkitを使用してタブ アプリを設定し、ローカルで実行する方法を理解しています。 次に、Toolkitを使用して会話型チャット ボットを構築する方法について説明します。\n"
- title: ボット アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\nタブ アプリを作成しました。 次に、最初のボット アプリを作成しましょう。\n\nTeams アプリのボット機能により、チャットボットまたは会話型ボットが作成されます。 顧客サービスの提供など、簡単で自動化されたタスクを実行するために使用します。 ボットは Web サービスと対話し、そのサービスを使用するのに役立ちます。 天気予報、予約、または会話ボットを使用して提供されるその他のサービスを取得できます。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。ボットが強調表示されています。\" border=\"false\":::\n\nこれらのアプリを作成する準備が済んでいるので、ボット アプリを作成するための新しいTeams プロジェクトを設定できます。\n\nこのチュートリアルでは、次のことを学習します。\n\n1. [Teams Toolkitを使用して新しい Bot プロジェクトを設定する方法。](#create-your-bot-project-workspace)\n1. [アプリ プロジェクトのディレクトリ構造について説明します。](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> 現在、ボットはGovernment Community Cloud (GCC) で利用できますが、GCC-Highおよび国防総省 (DOD) では利用できません。\n\n## <a name=\"create-your-bot-project-workspace\"></a>ボット プロジェクト ワークスペースを作成する\n\n前提条件が整っている場合は、始めましょう。\n\n> [!NOTE]\n> 表示されるVisual Studio Code UI は Mac からです。 オペレーティング システム、Teams Toolkitバージョン、環境によって異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開きます。\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいTeams アプリの作成**] を選択して、Teams Toolkitを使用してアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"[新しいプロジェクトの作成] のウィザードの開始\" border=\"false\":::。\n\n1. **ボット** を選択し、**Tab の** 選択を解除して、[OK] を選択 **します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"新しいアプリに機能を追加する方法を示すスクリーンショット\" border=\"false\":::。\n\n1. [**プログラミング言語**] セクションで **JavaScript** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. `hellobot` のように、アプリに適した名前を入力します。 アプリの名前が英数字であることを確認します。 Enter キーを **押** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\" border=\"false\":::\n\n    ボット機能を備えたTeams アプリは、数秒で作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、プロジェクト ワークスペースが作成された場所を示すメッセージがTeams Toolkitに表示されます。 このフォルダーは、Visual Studio Code設定で指定された既定の場所です。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所を変更する**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要はありません。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、Visual Studio Codeの再読み込み後に作成したプロジェクトにのみ反映されます。 既存のプロジェクトの場所は変更されません。\n\n<details>\n<summary>Teams アプリの作成の簡単な要約。</summary>\nTeams アプリを作成するための簡単な要約をご覧ください。\n\n![Teams アプリを作成する](~/assets/videos/javascript-bot-app.gif)\n</details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。  プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して、新しいTeams アプリを作成できます。 CLI を使用すると、一連の質問を確認できます。 すべての質問には、それに対する回答に関する指示が含まれています。\n\nたとえば、方向キーを使用してオプションを選択します。 選択した後、 **Enter** キーを押して確定します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. **ボット** を選択し、**Tab の** 選択を解除します。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. Enter キーを **押** して、既定のワークスペース フォルダーを選択します。\n1. `HelloBot` のように、アプリに適した名前を入力します。  アプリの名前は、英数字のみで構成されている必要があります。\n\nすべての質問に回答すると、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>ボット アプリのソース コードのツアーに参加する\n\nスキャフォールディングが完了したら、プロジェクトディレクトリとファイルをVisual Studio Codeのエクスプローラー領域に表示します。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hw-folder-structure-bot.png\" alt-text=\"Visual Studio Codeでボット用にスキャフォールディングされたProject ファイル。\" border=\"false\":::\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがTeams アプリ用にカスタマイズできる構成ファイル。 |\n| `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| `.fx/states` | Toolkitによって生成される出力をプロビジョニングします。  ツールキットは、アプリのリソースをプロビジョニングした後にこのフォルダーを作成します。 |\n| `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| `.fx/states/<env>.userdata` | すべての環境に対するプロビジョニング出力の機密ユーザー データ。 |\n| `bot` |  実行時に必要なボット機能のコード。 |\n| `bot/teamsBot.js` | ボット アプリのメイン エントリ ポイント。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイル、アプリ アイコン、color.pngとoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するためのアプリ マニフェスト  |\n| `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するためのアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n\n> [!Tip]\n> Teams 内で最初のボットを統合する前に、Teams 外のボットに慣れておきましょう。\n"
- title: 最初のボット アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nTeams Toolkitを使用してプロジェクト ワークスペースを設定したら、ボット プロジェクトをビルドします。 Microsoft 365 アカウントにサインインしていることを確認します。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nこのアカウントを使用して、Teamsにサインインします。 Microsoft 365開発者プログラム テナントを使用している場合は、登録中に設定した管理者アカウントがMicrosoft 365 アカウントです。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーでTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. **[M365 へのサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. 資格情報を使用して、Microsoft 365 アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、Visual Studio Codeに戻ります。\n1. Visual Studio Code内のTeams Toolkitに戻ります。\n\n    このアカウントを使用して、Teamsにサインインします。 Microsoft 365開発者プログラム テナントを使用している場合は、登録中に設定した管理者アカウントがMicrosoft 365 アカウントです。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Microsoft 365と Azure にサインインする場所を示すスクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドしてローカルで実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用してMicrosoft 365にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Codeと TeamsFx CLI の間で共有されます。\n\n    開発環境が構成されたので、最初のTeams アプリを作成、ビルド、デプロイできます。\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>最初のボット アプリをローカルでビルドして実行する\n\nローカル環境でアプリをビルドして実行するには:\n\n1. Visual Studio Codeで **F5** を選択して、アプリをデバッグ モードで実行します。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    **F5** キーを押すと、次のTeams Toolkit。\n\n    1. 次のすべての前提条件を確認します。\n      - Microsoft 365 アカウントでログインしています。\n      - Microsoft 365 アカウントに対してサイドローディングが有効になっています。\n      - サポートされているNode.jsバージョンがインストールされています。\n      - ボット アプリの NPM パッケージがインストールされます。\n      - Ngrok がインストールされています。\n      - ボット アプリで必要なポートを使用できます。\n\n      > [!NOTE]\n      > Teams Toolkit特定の前提条件を確認できない場合は、確認を求めるメッセージが表示されます。\n\n    2. Ngrok を起動して HTTP トンネルを作成します。\n    3. アプリをAzure ADに登録し、アプリを構成します。\n    4. ボット アプリを Bot Framework に登録し、ボット アプリを構成します。\n    5. Teams開発者ポータルにアプリを登録し、アプリを構成します。\n    6. ボット アプリを起動します。\n    7. Web ブラウザーでTeamsを開始し、ボット アプリをサイドロードします。\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"デバッグのために F5 キーが押されたときを示すスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、自動的にブラウザー ウィンドウが開きます。 このプロセスが完了するまでに 3 ~ 5 分かかる場合があります。\n\n    Teams Web ブラウザーでアプリを実行します。\n\n1. プロンプトが表示されたら、Microsoft 365 アカウントでサインインします。\n\n1. ローカル コンピューター上のTeamsにアプリをサイドロードするように求められたら、[**追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"ボットがクライアントに追加されていることを示すスクリーンショットTeams。\":::\n\n    これで、ボットはTeamsで正常に実行されました。 アプリが読み込まれると、ボットとのチャット セッションが開きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"ボットがクライアントで実行されていることを示すスクリーンショットTeams。\":::\n\n    入力 `welcome` して概要カードを表示し、入力 `learn` してアダプティブ カードとボットコマンドのドキュメントに移動できます。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Teams クライアント上のボットの学習カードを示すスクリーンショット。\":::       \n\n    他の Web アプリケーションと同様に、ブレークポイントの設定などの通常のデバッグ アクティビティを実行できます。 `bot/teamsBot.js` ファイルを開き、`onMessage()` メソッドを探します。 任意の場合にブレークポイントを設定します。 次に、テキストを入力します。\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\n  Teamsでアプリを正常に実行するには、Teams アカウントでのサイドローディングが有効になっていることを確認します。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n\n  > [!IMPORTANT]\n  > 現在、サイドローディング アプリは、Government Community Cloud (GCC)、GCC-High、DOD で利用できます。\n\n  > [!TIP]\n  > アプリ [検証ツール](https://dev.teams.microsoft.com/appvalidation.html)を使用して、アプリをサイドロードする前に問題を確認します。 このツールはツールキットに含まれています。 アプリをサイドロードするためのエラーを修正します。\n  </details> \n"
- title: メッセージング拡張機能アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\nボット アプリを構築しました。 次に、最初のメッセージング拡張機能アプリを作成しましょう。\n\nメッセージング拡張機能機能を使用すると、Web サービスを操作できます。 クライアントの作成領域、コマンド ボックス、またはメッセージングTeams使用して、外部システムでアクションを検索して開始します。\n\n  :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。メッセージング拡張機能が強調表示されています。\" border=\"false\":::\n\nTeams **メッセージング拡張機能** には、以下の 2 種類があります。\n\n- [検索コマンド](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md): 外部システムを検索できます。 次に、その結果をカードの形式でメッセージに挿入できます。\n- [アクション コマンド](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md): ユーザーにモーダル ポップアップを表示して、情報を収集または表示できます。 その後、それらの相互作用を処理し、Teamsに情報を送信できます。\n\n*検索コマンド* を使用してメッセージング拡張機能アプリを作成しましょう。 外部データを検索し、結果をクライアント内のメッセージに挿入Teams使用します。\n\nこれらのアプリを作成する準備が済んでいるので、メッセージング拡張機能アプリを作成するための新しいTeams プロジェクトを設定できます。\n\n> [!NOTE]\n> メッセージング拡張機能は、ユーザーとコードの間のダイアログを提供するボットに依存しています。\n\n\nこのチュートリアルでは、次のことを学習します。\n\n1. [Teams Toolkitを使用して新しいメッセージング拡張機能プロジェクトを設定する方法。](#create-your-messaging-extension-project-workspace)\n1. [アプリ プロジェクトのディレクトリ構造について説明します。](#take-a-tour-of-the-messaging-extension-app-source-code)\n\n## <a name=\"create-your-messaging-extension-project-workspace\"></a>メッセージング拡張機能プロジェクト ワークスペースを作成する\n\n前提条件が整っている場合は、始めましょう。\n\n> [!NOTE]\n> 表示されるVisual Studio Code UI は Mac からです。 オペレーティング システム、Toolkitバージョン、環境によって異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. Toolkitの左側にある [**新しい** Projectの作成] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいProjectの作成**] を選択して、Teams Toolkitを使用してアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"[新しいプロジェクトの作成] のウィザードの開始\" border=\"false\":::。\n\n1. [ **メッセージング拡張機能]** を選択し、[ **タブ] の** 選択を解除して、[OK] を選択 **します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex.png\" alt-text=\"新しいアプリに機能を追加する方法を示すスクリーンショット\" border=\"false\":::。\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-mex.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. アプリに適した名前を入力します。 アプリの名前が英数字であることを確認します。 Enter キーを **押** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-name-mex.png\" alt-text=\"アプリ名を入力する方法を示すスクリーンショット。\" border=\"false\":::\n\n    Teams Toolkit数秒でアプリが作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、プロジェクト ワークスペースが作成された場所を示すメッセージがTeams Toolkitに表示されます。 これは、Visual Studio Code設定で指定された既定の場所です。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所を変更する**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要はありません。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、Visual Studio Codeの再読み込み後に作成したプロジェクトにのみ反映されます。 既存のプロジェクトの場所は変更されません。\n\n  <details>\n  <summary>Teams アプリの作成の簡単な要約。</summary>\n  Teams アプリを作成するための簡単な要約をご覧ください。\n\n  ![Teams アプリを作成する](~/assets/videos/javascript-msg-ext-app.gif)\n  </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して、新しいTeams アプリを作成できます。 CLI を使用すると、一連の質問を確認できます。 すべての質問には、それに対する回答に関する指示が含まれています。\n\nたとえば、方向キーを使用してオプションを選択します。 選択した後、 **Enter** キーを押して確定します。\n\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. **[メッセージ拡張機能**] を選択し、[**タブ] の** 選択を解除します。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. Enter キーを **押** して、既定のワークスペース フォルダーを選択します。\n1. `HelloMsgExtn` のように、アプリに適した名前を入力します。  アプリの名前は、英数字のみで構成されている必要があります。\n\n  すべての質問に答えた後、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-messaging-extension-app-source-code\"></a>メッセージング拡張機能アプリのソース コードのツアーに参加する\n\nメッセージング拡張機能は Bot Framework を使用します。 これを使用して、会話を介してサービスと対話します。 スキャフォールディングが完了したら、プロジェクトディレクトリとファイルをVisual Studio Codeのエクスプローラー領域に表示します。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/hw-folder-structure-mex.png\" alt-text=\"ボット プロジェクトのファイル レイアウト\" border=\"false\":::\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがTeams アプリ用にカスタマイズできる構成ファイル。 |\n| `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| `.fx/states` | Toolkitによって生成される出力をプロビジョニングします。  ツールキットは、アプリのリソースをプロビジョニングした後にこのフォルダーを作成します。 |\n| `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| `.fx/states/<env>.userdata` | すべての環境に対するプロビジョニング出力の機密ユーザー データ。 |\n| `bot` |  実行時に必要なボットのコード。 |\n| `bot/messageExtensionBot.js` | メッセージング拡張機能アプリのメイン エントリ ポイント。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイル、アプリ アイコン、color.pngとoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するためのアプリ マニフェスト  |\n| `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するためのアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n\n> [!Tip]\n> アプリをTeams内に統合する前に、Teamsの外部でボットとメッセージング拡張機能について理解します。\n"
- title: 最初のメッセージング拡張機能アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nTeams Toolkitを使用してプロジェクト ワークスペースを設定したら、プロジェクトをビルドします。 Microsoft 365 アカウントにサインインする必要があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nこのアカウントを使用して、Teamsにサインインします。 Microsoft 365開発者プログラム テナントを使用している場合は、登録中に設定した管理者アカウントがMicrosoft 365 アカウントです。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vcode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーでTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. **[M365 へのサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. Microsoft 365 アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、Visual Studio Codeに戻ります。\n1. Visual Studio Code内のTeams Toolkitに戻ります。\n\n    サイドバーの **[ACCOUNTS**] セクションに、Microsoft 365アカウント名が表示されます。 Microsoft 365 アカウントで **サイドローディングが有効になっている** 場合、Teams Toolkitにサイドローディングが有効と表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Microsoft 365と Azure にサインインする場所を示すスクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドしてローカルで実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用してMicrosoft 365にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Codeと TeamsFx CLI の間で共有されます。\n\n    開発環境が構成されたので、最初のTeams アプリを作成、ビルド、デプロイできます。\n\n---\n\n## <a name=\"build-and-run-your-app-in-the-local-environment\"></a>ローカル環境でアプリをビルドして実行する\n\nメッセージング拡張機能を使用すると、Web サービスを操作できます。 メッセージング機能とボットのセキュリティで保護された通信を利用します。 メッセージング拡張機能アプリは、ボットとして登録された Web サービスに追加されます。 \n\n### <a name=\"build-and-run-your-app-locally\"></a>アプリをローカルでビルドして実行する\n\n1. Visual Studio Codeで **F5** を選択して、アプリケーションをデバッグ モードで実行します。\n    <!-- markdownlint-disable MD033 -->\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    **F5** を選択すると、次のTeams Toolkit。\n\n    1. 次のすべての前提条件を確認します。\n      - Microsoft 365 アカウントでログインしています。\n      - Microsoft 365 アカウントに対してサイドローディングが有効になっています。\n      - サポートされているNode.jsバージョンがインストールされています。\n      - ボット アプリの NPM パッケージがインストールされます。\n      - Ngrok がインストールされています。\n      - ボット アプリで必要なポートを使用できます。\n\n      > [!NOTE]\n      > Teams Toolkit特定の前提条件を確認できない場合は、確認を求めるメッセージが表示されます。\n\n    2. Ngrok を起動して HTTP トンネルを作成します。\n    3. アプリをAzure ADに登録し、アプリを構成します。\n    4. Bot Framework にボット アプリを登録し、アプリを構成します。\n    5. Teams開発者ポータルにアプリを登録し、アプリを構成します。\n    6. ローカルでホストされているメッセージング拡張機能アプリを起動します。\n    7. Web ブラウザーでTeamsを起動し、Teams アプリをサイドロードします。\n    \n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png\" alt-text=\"F5 キーを押してデバッグするタイミングを示すスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 このプロセスが完了するまでに 3 ~ 5 分かかる場合があります。\n\n    Teams Web ブラウザーでアプリを実行します。\n    \n1. プロンプトが表示されたら、Microsoft 365 アカウントでサインインします。\n1. [ **追加]** を選択して、アプリをアカウントに追加します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png\" alt-text=\"アプリを追加するメッセージを示すスクリーンショット\" border=\"false\":::\n\n    ツールキットには、アプリがTeamsに追加されたことを示すメッセージが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-added-local-debug.png\" alt-text=\"スクリーンショットは、アプリを今すぐまたは後で試すメッセージを示しています\" border=\"true\":::\n\n    - [ **Got it**] を選択した場合は、サイドロードされたアプリの一覧から後でアプリを試すことができます。\n    - **[試してみる**] を選択した場合は、アプリを読み込Teams。\n\n1. [ **試してみる**] を選択します。\n\n    メッセージング拡張機能アプリは、チャット ボット アプリに読み込まれます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png\" alt-text=\"Teamsにサイドロードされたアプリを示すスクリーンショット\" border=\"false\":::\n\n    メッセージング拡張機能アプリは、ユーザーと Web サービス間の通信を有効にするためにボットに依存しているため、アプリはボットのチャット機能に読み込まれます。\n\n    - メッセージング拡張機能アプリを作成する前にボット アプリを作成した場合は、作成したのと同じボット アプリに読み込まれていることがわかります。 以前のチャット メッセージが表示されます。\n    - 最初にメッセージング拡張機能を作成した場合、アプリは、Teamsで開いているすべてのチャットに読み込まれます。\n\n### <a name=\"test-your-app\"></a>アプリのテスト\n\nアプリが初めて読み込まれると、メッセージング拡張機能アプリが開き、テストできます。 このサンプル アプリを使用すると、ソフトウェア レジストリからオープンソースの npm パッケージを検索できます。\n\n#### <a name=\"to-run-a-search-query\"></a>検索クエリを実行するには\n\n1. 検索ボックスに検索文字列 (\"cli\" など) を入力します。 一致する項目の一覧が表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png\" alt-text=\"アプリを検索に使用する方法を示すスクリーンショット\" border=\"true\":::\n\n1. 検索結果から 1 つを選択します。 その結果をチャネルに送信できるように、作成領域に表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png\" alt-text=\"検索結果を示すスクリーンショット\" border=\"false\":::\n\n1. **[送信手順] を** 選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png\" alt-text=\"チャットで送信された検索結果を示すスクリーンショット\" border=\"false\":::\n\n    これで、基本的なメッセージング拡張機能アプリをビルドして実行する方法について学習しました。         \n\n## <a name=\"optional-scenarios\"></a>オプションのシナリオ\n\n基本的なメッセージング拡張機能アプリの検索機能をテストしました。 これで、このアプリの他のいくつかの機能を試すことができます。 これらは、このアプリの省略可能なシナリオです。\n<br>\n<br>\n<details>\n<summary>カードを作成するには</summary>\n\n1. [ **カードの作成**] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png\" alt-text=\"カードを作成する方法を示すスクリーンショット\" border=\"false\":::\n\n1. 表示されているカードの詳細を入力し、[ **送信**] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\" border=\"true\":::\n\n    カードの詳細が作成領域に表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\" border=\"true\":::\n\n1. 作成領域から **[送信]** アイコンを選択します。\n\n    アプリはボット チャットでカードを送信します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png\" alt-text=\"送信されたカードを示すスクリーンショット\" border=\"false\":::\n</details>\n<br>\n<details>\n<summary>作成領域からアプリを開くには</summary>\n\nアプリを開くには、次のいずれかの方法を選択します。\n\n**次の使用 `@mention`:**\n\n1. アプリのコマンド領域に入力 `@your-app-name` します。\n    \n    アプリによって検索ボックスが開き、それを使用してクエリを実行できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png\" alt-text=\"メッセージング拡張機能アプリを@mentionする方法を示すスクリーンショット\" border=\"false\":::\n\n1. 検索文字列を入力し、検索結果から検索文字列を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png\" alt-text=\"メッセージング拡張機能アプリを使用して検索を実行する方法を示すスクリーンショット\" border=\"false\":::\n\n    コマンド領域にカードとして表示されます。\n\n1. カードをコピーして、作成領域に貼り付けます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png\" alt-text=\"カード内の検索結果を示すスクリーンショット\" border=\"false\":::\n    \n1. 作成領域を使用してカードを送信します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png\" alt-text=\"チャット内の検索結果を示すスクリーンショット\" border=\"false\":::\n\n**3 点のアイコンを使用する:**\n\n1. 作成領域の下部にある 3 つのドットからメッセージング拡張機能を起動します。\n1. メッセージング拡張機能アプリを選択します。       \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png\" alt-text=\"サンプル メッセージング拡張機能アプリを開く方法を示すスクリーンショット\" border=\"false\":::\n\n    メッセージング拡張機能アプリには、検索を実行してアダプティブ カードを作成するオプションが読み込まれます。\n</details>\n<br>\n<details>\n<summary>サイドロードされたアプリからアプリを実行する</summary>\n\nサイドロードされたアプリの一覧からサイドロードされたTeams アプリを開くことができます。 \n\n1. Teamsサイドバーから **[ストア]** アイコンを選択します。\n1. [ **アプリの管理**] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png\" alt-text=\"サイドロードされたアプリを示すスクリーンショット\" border=\"false\":::\n\n1. アプリの 3 つのドット アイコンを選択し、[詳細の **表示**] を選択します。 また、アプリへのリンクをコピーし、それを使用してアプリを開くこともできます。\n1. **[開く]** を選択してアプリを読み込み、[**試してみる**] を選択します。 \n    \n    アプリはTeamsに読み込まれます。\n</details>\n<br>\n<br>\n<!-- markdownlint-disable MD033 -->\n<details>\n<summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\nTeamsでアプリを実行するには、アプリのサイドローディングを許可するMicrosoft 365開発アカウントが必要です。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n</details>\n"
- title: 最初のTeams アプリをデプロイする
  durationInMinutes: 1
  content: "\nTab、Bot、Messaging Extension の機能を備えたアプリTeams作成、ビルド、実行する方法について学習しました。 最後の手順は、Azure にアプリをデプロイすることです。\n\nTeams Toolkitを使用して、Tab 機能を備えた最初のアプリを Azure にデプロイしましょう。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nこのアカウントを使用して、Microsoft Azure ポータルにアクセスし、アプリをサポートする新しいクラウド リソースをプロビジョニングします。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. タブ アプリを作成したプロジェクト フォルダーを開きます。\n1. サイドバーでTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. [ **Azure へのサインイン] を選択します**。\n\n    > [!TIP]\n    > Azure アカウント拡張機能がインストールされていて、同じアカウントを使用している場合は、この手順をスキップできます。 他の拡張機能で使用しているのと同じアカウントを使用します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、Visual Studio Codeに戻ります。\n\n    サイドバーの **[ACCOUNTS** ] セクションには、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。 使用可能な Azure サブスクリプションが少なくとも 1 つ用意されていることを確認します。 そうでない場合は、サインアウトして別のアカウントを使用します。\n\n    これで、アプリを Azure にデプロイする準備ができました。\n\n    おめでとうございます。3 種類のTeams アプリを作成しました。 \n    次に、Teams Toolkitを使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用してMicrosoft 365にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Codeと TeamsFx CLI の間で共有されます。\n\n    おめでとうございます。3 種類のTeams アプリを作成しました。 \n    次に、Teams Toolkitを使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリを Azure に展開した場合に発生することを説明します</summary>\n\n  展開前は、このアプリケーションは以下のようにローカルで動作しています。\n\n  * バックエンドは、**Azure Functions Core Tools** を使用して実行します。\n  * アプリケーションの HTTP エンドポイントは、Microsoft Teams がアプリケーションを読み込む場所でローカルに実行されます。\n\n  デプロイは 2 段階のプロセスです。 アクティブな Azure サブスクリプションにリソースをプロビジョニングし、アプリケーションのバックエンドコードとフロントエンド コードを Azure にデプロイまたはアップロードします。\n\n  * バックエンドが構成されている場合、Служба приложений AzureやAzure Storageなど、さまざまな Azure サービスが使用されます。\n  * フロントエンド アプリケーションは、静的な Web ホスティング用に構成された Azure Storage アカウントに展開されます。\n\n  </details>\n"
- title: おめでとうございます!
  durationInMinutes: 1
  content: "\nこれで完了です。\n\nタブ アプリ、ボット アプリ、メッセージング拡張機能アプリの 3 つのアプリをそれぞれ異なる機能で作成しました。\n\n基本的なアプリの作成を学習したので、より複雑なアプリの作成に進むことができます。 まず、既存のアプリに機能を追加してみてください。\n\n既存のアプリに機能を追加するには:\n\n1. Teams Toolkitサイドバーの **[開発**] セクションで [**機能の追加]** を選択します。\n\n1. アプリに追加する機能を選択します。\n\n手順は以上です。 Teams Toolkitアプリのディレクトリ構造に新しい機能のスキャフォールディングを追加します。 手順に従ってアプリをビルドしてデプロイします。アプリには複数の機能があります。 \n\nJavaScript を使用してアプリをビルドするためのチュートリアルを完了しました。"
