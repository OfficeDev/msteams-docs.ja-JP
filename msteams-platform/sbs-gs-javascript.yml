### YamlMime:Tutorial
title: JavaScript を使用して初めてのアプリを構築する
metadata:
  title: JavaScript を使用した Hello World
  description: このチュートリアルでは、JavaScript を使用して Hello World アプリをビルドする方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: '[概要] に戻る'
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 514a1aa3e7d8d644509351cb08a1983cf41a5a20
  ms.sourcegitcommit: 90587b1ec04bf20d716ed6feb8ccca4313e87f8c
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 02/10/2022
  ms.locfileid: "62518542"
items:
- durationInMinutes: 1
  content: "最初Microsoft Teamsアプリでアプリ開発を開始Teamsします。 タブ アプリ、ボット Teamsメッセージング拡張機能アプリの 3 つのアプリを作成します。 \n\n各アプリには、独自の UI と UX が付属する機能があります。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。\" border=\"false\":::\n\n> [!NOTE]\n> このチュートリアルでは、最初にタブ アプリを作成し、その後にボット アプリ、次にメッセージング拡張機能アプリを作成します。 ただし、他のアプリの機能を妨げることなく、最初に任意の機能を持つアプリを構築することもできます。\n\nこのチュートリアルでは、次の情報を学習します。\n\n- 新しいプロジェクトを新しいプロジェクトでセットアップするTeams Toolkit。\n- タブ、ボット、メッセージング拡張機能など、それぞれ異なる機能を持つ 3 つのアプリを構築する方法。\n- アプリの構造:\n    - JavaScript を使用してタブ部分を使用React。\n    - この他の機能は、Node.js。\n- アプリを展開する方法\n"
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリの構築と展開に必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | using... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) |  アプリMicrosoft Visual Studioスキャフォールディングを作成するコード拡張機能です。 最新バージョンを使用します。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/en-us/microsoft-teams/download-app) | Microsoft Teamsチャット、会議、通話のアプリを通じて、作業しているすべてのユーザーと共同作業を 1 か所で行います。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バック エンド JavaScript ランタイム環境。 最新の v14 LTS リリースを使用します。|\n| &nbsp; | [Microsoft&nbsp;エッジ](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを含むブラウザー。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript、または SharePoint Framework (SPFx) ビルド環境。 バージョン 1.55 以降を使用します。 |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack)[および Azure CLI](/cli/azure/install-azure-cli) | Azure ツールを使用して、保存されたデータにアクセスしたり、Azure でアプリのクラウド ベースのバックエンドTeams展開したりします。 |\n| &nbsp; | [React Chrome または MicrosoftEdge](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) React[開発者向けツール&nbsp;](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | JavaScript ライブラリのオープン ソース ライブラリ用のブラウザー devTools React拡張機能です。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graphエクスプローラーは、Microsoft のデータからクエリを実行できるブラウザー ベースのGraphです。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | Web ベースのポータルを使用して、組織や組織Teamsストアにアプリを構成、管理、配布Teamsします。 |\n\n\n> [!TIP]\n> Microsoft のデータをGraphする場合は、Microsoft データベース エクスプローラーについて説明し、ブックマークGraph必要があります。 このブラウザー ベースのツールを使用すると、アプリの外部で Microsoft Graphクエリを実行できます。\n\n\n## <a name=\"prepare-development-environment\"></a>開発環境の準備\n\n必要なツールをインストールしたら、開発環境をセットアップします。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>サーバーをインストールTeams Toolkit\n\nこのTeams Toolkitは、アプリのクラウド リソースをプロビジョニングおよび展開するツール、アプリ ストアに発行するツールを使用して開発プロセスを簡略化Teams役立ちます。 \n \nツールキットは、Visual Studio Code CLI (コマンド ライン インターフェイス) と一緒に使用できます`TeamsFx`。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. [Visual Studio Codeを開き、[拡張機能]  ビュー (**Ctrl + Shift +** **>** X / \n1. 検索ボックスに「Teams Toolkit」**と入力します**。\n1. [インストール **] メニュー** の横にある [インストールTeams Toolkit。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscode.png\" alt-text=\"図は、拡張機能Teams Toolkitを示しています。\" border=\"false\":::\n\n インストールTeams Toolkitすると、Visual Studio Codeアイコンが表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、サイドバー Teams ToolkitアイコンをVisual Studio Codeしています。\" border=\"false\":::\n\nまた、マーケットプレースTeams Toolkitを[Visual Studio Codeできます](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、パッケージ マネージャーを `npm` 使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI のインストールに使用 `sudo` する必要がある場合があります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nこの状態は、Linux および macOS システムで一般的です。\n\nnpm グローバル キャッシュを PATH に追加してください。 通常、この手順は、ユーザーのインストーラーの一部Node.jsされます。  \n\nコマンドで CLI を使用 `teamsfx` できます。 コマンドを実行して動作を確認します `teamsfx -h`。\n\n> [!CAUTION]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell の \"リモート署名済み\" 実行ポリシーを有効にする必要があります。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>開発テナントTeams設定する\n\nテナント **は**、チャット、ファイルの共有、会議の実行を行う、Teamsのスペース、または組織のコンテナーに似たものになります。 この領域は、アプリをサイドロードしてテストする場所です。 テナントを使用して開発する準備ができていることを確認します。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成した後、アプリを配布せずにアプリTeams読み込む必要があります。 このプロセスはサイドローディングと呼ばれる。 このオプションを表示するには、Microsoft 365アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、ローカル環境でアプリをプレビュー Teams必要です。 有効になっていない場合は、アプリをローカルにプレビューしてテストTeamsできません。\n\nテナントが既に存在し、管理者アクセス権を持っていますか? 本当に行うのか確認しましょう!\n\n次の手順でアプリをサイドロードTeams。\n\n 1. クライアントでTeamsストア アイコン **を選択** します。\n 1. [アプリ **の管理] を選択します**。\n 1. [アプリ **の発行] を選択します**。\n 1. カスタム アプリを作成する **アップロード探します**。 オプションが表示された場合は、サイドローディング アプリが有効になります。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、カスタム アプリをアプリにアップロードするTeams。\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションが設定されていない場合は、管理者にTeamsしてください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>開発者テナントに無料Teamsを作成する (オプション)\n\n開発者アカウントを持Teams場合は、無料で利用できます。 開発者プログラムMicrosoft 365参加してください。\n\n1. 開発者プログラムの[Microsoft 365に移動します](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. [今 **すぐ参加] を** 選択し、画面の指示に従います。\n1. ようこそ画面で、[ **E5 サブスクリプションの設定] を選択します**。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"開発者プログラムにサインアップした後に表示されるMicrosoft 365例。\":::\n\n1. セットアップしTeams管理者アカウントを使用してサインインします。 カスタム アプリ オプションがアップロード **が設定** Teams。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得する\n\nアプリをホストするか、Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。 [開始する前に無料アカウント](https://azure.microsoft.com/free/) を作成します。\n\nこれで、すべてのツールが手に入り、アカウントを設定しました。 次に、開発環境をセットアップし、構築を開始しましょう。 最初に実行するアプリを選択します。\n"
- title: タブ アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\n最初のMicrosoft Teamsを作成して、アプリ開発の開始を開始します。 このアプリでは、Tab 機能を使用します。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。タブが強調表示されます。\" border=\"false\":::\n\nこのページでは、次の情報を学習します。\n1. [新しい Tab プロジェクトを設定するTeams Toolkit](#create-your-tab-project-workspace)\n1. [アプリのディレクトリ構造について](#take-a-tour-of-the-tab-app-source-code)\n\n## <a name=\"create-your-tab-project-workspace\"></a>タブ プロジェクト ワークスペースを作成する\n\n前提条件が満たされている場合は、まず始めましょう。\n\n> [!NOTE]\n> 表示Visual Studio Code UI は Mac です。 オペレーティング システム、バージョン、および環境によってTeams Toolkit異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンをVisual Studio Codeします。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいアプリを作成する] Teamsを選択** して、アプリを作成Teams Toolkit。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"ウィザードは、新しいプロジェクトの作成を開始します\" border=\"false\":::\n\n1. アプリで **ビルド** する機能として Tab が選択されている必要があります。 **[OK]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-capabilities-tab.png\" alt-text=\"[アプリ機能の選択]\" border=\"false\":::\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-language-tab.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. アプリケーション `helloworld` 名として入力します。 英数字のみを使用してください。 [ **Enter] を選択** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/enter-name-tab.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\" border=\"false\":::\n\n    [Teams] タブ アプリは数秒で作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/app-created.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、Teams Toolkitワークスペースが作成される場所を示すメッセージが表示されます。 このフォルダーは、ユーザー設定で指定された既定Visual Studio Codeです。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所の変更**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要があります。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、ワークスペースの再読み込み後に作成したプロジェクトVisual Studio Code。 既存のプロジェクトの場所に変更はありません。\n\n    <details>\n    <summary>アプリを作成する簡単なTeamsまとめです。</summary>\n    アプリを作成するためのこの短い要約Teamsしてください。\n\n    ![アプリをTeamsする](~/assets/videos/javascript-tab-app.gif) </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して新しいアプリを作成Teamsできます。 CLI によって、一連の質問が表示されます。 すべての質問には、回答に関する指示が含まれています。\n\nたとえば、矢印キーを使用してオプションを選択します。 選択した後、[Enter] を **選択して** 確認します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. タブ機能 **を選択** します。\n1. **Azure** フロントエンド ホスティングを選択します。\n1. クラウド リソースを選択しない。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. **Enter** キーを押して、既定のワークスペース フォルダーを選択します。\n1. アプリ `helloworld` の名前として入力します。 アプリの名前には、英数字のみを指定する必要があります。\n\n  すべての質問に答えた後、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-tab-app-source-code\"></a>タブ アプリのソース コードのツアーに参加する\n\nTeams Toolkitアプリを構築するすべてのコンポーネントが提供されます。 プロジェクトを作成した後は、プロジェクト フォルダーとファイルを[プロジェクト] の **[エクスプローラー**] 領域Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/hw-folder-structure-tab.png\" alt-text=\"Projectタブ機能を持つアプリ用にスキャフォールディングされたファイルVisual Studio Code。\":::\n\n任意の UI フレームワーク (または使用しない) を自由に選択することができますが、このサンプル テンプレート コードは、さまざまなコンポーネントをReactします。\n\nこのディレクトリ構造内の他の項目の中でも、次のToolkit保持されます。\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがアプリ用にカスタマイズできるTeamsファイル。 |\n| - `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| - `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| - `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| - `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| - `.fx/states` | ユーザーが生成する出力をプロビジョニングTeams Toolkit。  ツールキットは、アプリのリソースを準備した後にこのフォルダーを作成します。 |\n| - `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| - `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密性の高いユーザー データ。 |\n| `tabs` | プライバシーに関する通知、使用条件、構成タブなど、実行時に必要なタブ機能のコード。 |\n| - `tabs/src/index.jsx` | メイン アプリ コンポーネントがレンダリングされるフロントエンド アプリのエントリ ポイント `ReactDOM.render()` |\n| - `tabs/src/components/App.jsx` | アプリで URL ルーティングを処理するコード。 [Microsoft Teams JavaScript client SDK](../msteams-platform/tabs/how-to/using-teams-client-sdk.md) を呼び出して、アプリと Teams の間の通信を確立します。 |\n| - `tabs/src/components/Tab.jsx` | アプリの UI を実装するコード。 |\n| - `tabs/src/components/TabConfig.jsx` | アプリを構成する UI を実装するコード。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイルとアプリ アイコン: color.pngとoutline.png。 |\n| - `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するアプリ マニフェスト  |\n| - `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n|\n\nクラウド機能を追加すると、Teams Toolkitフォルダーがプロジェクトに追加されます。 フォルダー `api` には、記述した Azure 関数のコードが保持されます。\n"
- title: 最初のタブ アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nプロジェクト ワークスペースをユーザー設定で設定したTeams Toolkit、タブ プロジェクトをビルドします。 アカウントにサインインするMicrosoft 365があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>アカウントにサインインMicrosoft 365する\n\nアカウントをMicrosoft 365して、アカウントにサインインTeams。 開発者プログラムのテナントMicrosoft 365している場合は、登録時に設定した管理者アカウントMicrosoft 365です。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。\n1. [ **M365 にサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. 資格情報を使用してMicrosoft 365アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、ブラウザーに戻Visual Studio Code。\n1. データ内のTeams ToolkitにVisual Studio Code。\n\n    サイドバー **の [ACCOUNTS**] セクションには、アカウント名Microsoft 365表示されます。 Teams Toolkitアカウント **でサイドローディング** が有効になっている場合、サイドローディングが有効Microsoft 365します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"アプリと Azure にサインインする場所を示Microsoft 365スクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドし、ローカル環境で実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用Microsoft 365サインインして、次のコマンドを実行します。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、ユーザーと TeamsFx CLI Visual Studio Code共有されます。\n\n    これで、開発環境が構成されたので、最初のアプリを作成、ビルド、およびTeamsできます。\n\n---\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio-code\"></a>Visual Studio Code でアプリをローカルにビルドして実行する\n\nアプリをローカルに構築して実行するには、以下のようにします。\n\n1. [Visual Studio Code **F5**] を選択して、アプリケーションをデバッグ モードで実行します。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    気が付く場合は、**F5** キーを押すと、次のTeams Toolkit。\n\n    - アプリをアプリに登録Azure Active Directory。 このアプリには、アプリが読み込まれる場所とバックエンド リソースに対するアクセス許可があります。\n    - *アプリをサイド* ロードTeams。\n    - Azure Function Core Tools を使用してローカルで実行されている [アプリのバックエンドを開始します](/azure/azure-functions/functions-run-local?#start)。\n    - ローカルでホストされているアプリのフロントエンドを開始します。\n    - アプリMicrosoft Teams読み込む側に指示するコマンドを使用して web ブラウザー Teamsを開始します`https://localhost:3000/tab`。 この URL は、アプリのマニフェストに登録されます。\n    - アプリのマニフェストは、Developer Portal for Teams で生成され存在します。 Teams はアプリ マニフェストを使用して、接続しているクライアントにアプリをロードする場所を伝達します。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/f5-build-and-run.png\" alt-text=\"F5 キーが押された状態を示すスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 このプロセスの完了には 3 ~ 5 分かかる場合があります。\n\n    必要に応じて、ローカル証明書をインストールするように求めるメッセージがツールキットに表示されます。 この証明書により、Teams は `https://localhost` からアプリケーションを読み込むことができます。\n\n1. 次の **ダイアログが表示** される場合は、[はい] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ssl-prompt.png\" alt-text=\"ローカル ホストからアプリケーションを読み込むTeams SSL 証明書をインストールするプロンプトを示すスクリーンショット。\":::\n\n    または、オペレーティング **システムに** 応じて [続行] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/ssl-prompt-mac.png\" alt-text=\"Mac 上の localhost からアプリケーションを読み込Teams SSL 証明書をインストールするプロンプトを示すスクリーンショット。\":::\n\n    Teams Web クライアントがブラウザー ウィンドウで開きます。\n\n1. プロンプトが表示されたら、Microsoft 365アカウントでサインインします。\n\n1. アプリ **をローカル** コンピューター上のアプリにサイドロードするように求Teams[追加] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/add-tab-app-local-debug.png\" alt-text=\"アプリをアプリに追加Teams\":::\n\n1. おめでとうございます、最初のアプリが実行中Teams!\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-debug.png\" alt-text=\"完了したアプリのスクリーンショット\":::\n\n1. ページを移動して、ユーザーの詳細を表示します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-authorize.png\" alt-text=\"タブの [ユーザー情報] セクションのスクリーンショット\":::\n    \n1. [**承認] を** 選択すると、アプリで Microsoft のアプリを使用してユーザーの詳細を取得Graph。\n\n    アプリは、ユーザーの詳細を表示するためのアクセス許可を付与するアクセス許可を要求します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-graph-permission.png\" alt-text=\"ユーザーの詳細にアクセスするアプリの承認のスクリーンショット\":::\n\n1. [承諾 **] を選択** して、アプリがユーザーの詳細にアクセスできます。\n\n    写真と詳細が個人用タブに表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-user-info.png\" alt-text=\"タブのユーザー情報のスクリーンショット\":::\n\n    ブレークポイントの設定など、他の Web アプリケーションと同様に、通常のデバッグ アクティビティを実行できます。 このアプリはホット リロードをサポートしています。 プロジェクト内のファイルを変更すると、ページが再読み込みされます。\n\n  <!-- markdownlint-disable MD033 -->\n\n  <details>\n  <summary>アプリがローカルで実行されていない場合のトラブルシューティング方法について説明します。</summary>\n\n  アプリを正常に実行するには、Teamsアカウントでサイドローディングを有効にTeamsしてください。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n\n  </details>\n\n  アプリを使用してタブ アプリToolkitローカルで実行する方法を知っている必要があります。 次に、会話型チャット ボットを作成する方法について説明します。Toolkit!\n"
- title: ボット アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\nタブ アプリを構築しました。 次に、最初のボット アプリを作成します。\n\nアプリのボット機能Teamsチャットボットまたは会話型ボットを作成します。 顧客サービスの提供など、簡単で自動化されたタスクを実行するために使用します。 ボットは Web サービスと話し合い、そのサービスを使用するのに役立ちます。 天気予報の取得、予約、会話ボットを使用して提供されるその他のサービスを取得できます。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。ボットが強調表示されます。\" border=\"false\":::\n\nこれらのアプリを作成する準備が済むので、ボット アプリを作成するための新Teamsプロジェクトをセットアップできます。\n\nこのチュートリアルでは、次の情報を学習します。\n\n1. [新しいボット プロジェクトをセットアップする方法をTeams Toolkit。](#create-your-bot-project-workspace)\n1. [アプリ プロジェクトのディレクトリ構造について。](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> 現在、ボットは Government Community Cloud (GCC) で使用できますが、GCC-High国防総省 (DOD) では使用できません。\n\n## <a name=\"create-your-bot-project-workspace\"></a>ボット プロジェクト ワークスペースを作成する\n\n前提条件が満たされている場合は、まず始めましょう。\n\n> [!NOTE]\n> 表示Visual Studio Code UI は Mac です。 オペレーティング システム、バージョン、および環境によってTeams Toolkit異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンをVisual Studio Codeします。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいアプリを作成Teams] を選択** して、アプリを使用してアプリをTeams Toolkit。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"[新しいプロジェクトの作成] のウィザードの開始\" border=\"false\":::。\n\n1. [ボット **] を選択** し、[ **タブ] の選択を解除** し、[OK] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"新しいアプリに機能を追加する方法を示すスクリーンショット\" border=\"false\":::。\n\n1. [ **プログラミング言語]** セクションで **[JavaScript] を選択** します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. `hellobot` のように、アプリに適した名前を入力します。 アプリの名前が英数字である必要があります。 [ **Enter] を選択** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\" border=\"false\":::\n\n    ボットTeamsアプリは数秒で作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、プロジェクト ワークスペースTeams Toolkit場所を示すメッセージが表示されます。 このフォルダーは、ユーザー設定で指定された既定Visual Studio Codeです。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所の変更**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要があります。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、ワークスペースの再読み込み後に作成したプロジェクトVisual Studio Code。 既存のプロジェクトの場所に変更はありません。\n\n<details>\n<summary>アプリを作成する簡単なTeamsまとめです。</summary>\nアプリを作成するためのこの短い要約Teamsしてください。\n\n![アプリをTeamsする](~/assets/videos/javascript-bot-app.gif)\n</details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。  プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して新しいアプリを作成Teamsできます。 CLI によって、一連の質問が表示されます。 すべての質問には、回答に関する指示が含まれています。\n\nたとえば、矢印キーを使用してオプションを選択します。 選択した後、[Enter] を **選択して** 確認します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. [ボット **] を選択し** 、[タブ] の **選択を解除します**。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. [ **Enter] を** 選択して、既定のワークスペース フォルダーを選択します。\n1. `HelloBot` のように、アプリに適した名前を入力します。  アプリの名前は、英数字のみで構成されている必要があります。\n\nすべての質問に答えた後、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>ボット アプリのソース コードのツアーに参加する\n\nスキャフォールディングが完了したら、プロジェクトのディレクトリとファイルをエクスプローラー領域で表示Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hw-folder-structure-bot.png\" alt-text=\"Projectボット用にスキャフォールディングされたファイルVisual Studio Code。\" border=\"false\":::\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがアプリ用にカスタマイズできるTeamsファイル。 |\n| `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| `.fx/states` | ユーザーが生成する出力をプロビジョニングToolkit。  ツールキットは、アプリのリソースを準備した後にこのフォルダーを作成します。 |\n| `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密性の高いユーザー データ。 |\n| `bot` |  実行時に必要なボット機能のコード。 |\n| `bot/teamsBot.js` | ボット アプリの主要なエントリ ポイント。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイル、アプリ のアイコン、color.pngとoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するアプリ マニフェスト  |\n| `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n\n> [!Tip]\n> Teams 内で最初のボットを統合する前に、Teams 外のボットに慣れておきましょう。\n"
- title: 最初のボット アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nプロジェクト ワークスペースを設定し、Teams Toolkitボット プロジェクトをビルドします。 自分のアカウントにサインインMicrosoft 365します。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>アカウントにサインインMicrosoft 365する\n\nこのアカウントを使用して、アカウントにサインインTeams。 開発者プログラムのテナントMicrosoft 365している場合は、登録時に設定した管理者アカウントMicrosoft 365です。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. [ **M365 にサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. 資格情報を使用してMicrosoft 365アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、ブラウザーに戻Visual Studio Code。\n1. データ内のTeams ToolkitにVisual Studio Code。\n\n    このアカウントを使用して、アカウントにサインインTeams。 開発者プログラムのテナントMicrosoft 365している場合は、登録時に設定した管理者アカウントMicrosoft 365です。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"アプリと Azure にサインインする場所を示Microsoft 365スクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドしてローカルで実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用Microsoft 365サインインして、次のコマンドを実行します。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、ユーザーと TeamsFx CLI Visual Studio Code共有されます。\n\n    これで、開発環境が構成されたので、最初のアプリを作成、ビルド、およびTeamsできます。\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>最初のボット アプリをローカルでビルドして実行する\n\nローカル環境でアプリをビルドして実行するには、次のコマンドを実行します。\n\n1. デバッグ **モードでアプリVisual Studio Code F5** を選択します。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    気が付く場合は、**F5** キーを押すと、次のTeams Toolkit。\n\n    - アプリをアプリに登録Azure Active Directory。 このアプリには、アプリが読み込まれる場所とバックエンド リソースに対するアクセス許可があります。\n    - *アプリをサイド* ロードTeams。\n    - Azure Function Core Tools を使用してローカルで実行されている [アプリのバックエンドを開始します](/azure/azure-functions/functions-run-local?#start)。\n    - ローカルでホストされているアプリのフロントエンドを開始します。\n    - アプリMicrosoft Teams読み込む側に指示するコマンドを使用して web ブラウザー Teamsを開始します`https://localhost:3000/tab`。 この URL は、アプリのマニフェストに登録されます。\n    - アプリのマニフェストは、Developer Portal for Teams で生成され存在します。 Teams はアプリ マニフェストを使用して、接続しているクライアントにアプリをロードする場所を伝達します。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"デバッグ用に F5 キーが押された状態を示すスクリーンショット。\":::\n\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、自動的にブラウザー ウィンドウが開きます。 このプロセスの完了には 3 ~ 5 分かかる場合があります。\n\n    Web ブラウザーがアプリの実行を開始します。\n\n1. プロンプトが表示されたら、Microsoft 365アカウントでサインインします。\n\n1. アプリ **をローカル** コンピューター上のアプリにサイドロードするように求Teams[追加] を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"ボットがクライアントに追加されているTeamsします。\":::\n\n    これで、ボットが正常に実行Teams! アプリが読み込まれると、ボットとのチャット セッションが開きます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"ボットがクライアント上で実行Teamsスクリーンショット。\":::\n\n    入力して導入 `welcome` カードを表示し、アダプティブ `learn` カードとボット コマンドのドキュメントに移動します。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"クライアント上のボット内の学習カードを示Teamsスクリーンショット。\":::       \n\n    ブレークポイントの設定などの通常のデバッグ アクティビティは、他の Web アプリケーションと同様に実行できます。 `bot/teamsBot.js` ファイルを開き、`onMessage()` メソッドを探します。 任意の場合にブレークポイントを設定します。 次に、テキストを入力します。\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリがローカルで実行されていない場合のトラブルシューティング方法について説明します。</summary>\n\n  アプリを正常に実行するには、Teamsアカウントでサイドローディングを有効にTeamsしてください。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n\n  > [!IMPORTANT]\n  > 現在、サイドローディング アプリは、Government Community Cloud (GCC)、GCC-High、DOD で利用できます。\n\n  > [!TIP]\n  > アプリ検証ツールを使用して、アプリをサイドロードする前に問題 [を確認します](https://dev.teams.microsoft.com/appvalidation.html)。 このツールはツールキットに含まれています。 アプリをサイドロードするエラーを修正します。\n  </details> \n"
- title: メッセージング拡張機能アプリのプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\nボット アプリを構築しました。 次に、最初のメッセージング拡張機能アプリを作成します。\n\nメッセージング拡張機能機能を使用すると、Web サービスを操作できます。 外部システムでアクションを検索および開始するには、Teams作成領域、コマンド ボックス、またはメッセージングを使用します。\n\n  :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png\" alt-text=\"このアプリを示す図には、3 つの機能があります。メッセージング拡張機能が強調表示されます。\" border=\"false\":::\n\nTeams **メッセージング拡張機能** には、以下の 2 種類があります。\n\n- [検索コマンド](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md): 外部システムを検索できます。 次に、その結果をカードの形式でメッセージに挿入できます。\n- [アクション コマンド](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md): ユーザーにモーダル ポップアップを表示して、情報を収集または表示できます。 次に、それらの操作を処理し、情報をユーザーにTeams。\n\n検索コマンドを使用してメッセージング拡張機能アプリを *作成します*。 外部データを検索し、クライアント内のメッセージに結果を挿入Teamsします。\n\nこれらのアプリを作成する準備が済むので、メッセージング拡張機能アプリを作成するための新Teamsプロジェクトをセットアップできます。\n\n> [!NOTE]\n> メッセージング拡張機能は、ユーザーとコードの間のダイアログを提供するボットに依存しています。\n\n\nこのチュートリアルでは、次の情報を学習します。\n\n1. [新しいメッセージング拡張機能プロジェクトをセットアップする方法をTeams Toolkit。](#create-your-messaging-extension-project-workspace)\n1. [アプリ プロジェクトのディレクトリ構造について。](#take-a-tour-of-the-messaging-extension-app-source-code)\n\n## <a name=\"create-your-messaging-extension-project-workspace\"></a>メッセージング拡張機能プロジェクト ワークスペースを作成する\n\n前提条件が満たされている場合は、まず始めましょう。\n\n> [!NOTE]\n> 表示Visual Studio Code UI は Mac です。 オペレーティング システム、バージョン、および環境によってToolkit異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンをVisual Studio Codeします。\n\n1. [**新しいProject** を作成する] を選択します。このウィンドウの左側Toolkit。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. [**新しいアプリのProject**] を選択して、アプリを作成します。Teams Toolkit。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"[新しいプロジェクトの作成] のウィザードの開始\" border=\"false\":::。\n\n1. [メッセージング **拡張機能] を選択し**、[タブ] の **選択を解除し**、[OK] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex.png\" alt-text=\"新しいアプリに機能を追加する方法を示すスクリーンショット\" border=\"false\":::。\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-mex.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. アプリに適した名前を入力します。 アプリの名前が英数字である必要があります。 [ **Enter] を選択** して続行します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-name-mex.png\" alt-text=\"アプリ名を入力する方法を示すスクリーンショット。\" border=\"false\":::\n\n    Teams Toolkit数秒でアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、プロジェクト ワークスペースTeams Toolkit場所を示すメッセージが表示されます。 これは、既定の設定で指定Visual Studio Codeです。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"場所のメッセージ\":::\n\n    このメッセージには、次の 2 つのオプションがあります。\n    \n    - **場所の変更**\n    - **ローカル デバッグ**\n    \n    このチュートリアルでは、これらのオプションを使用する必要があります。\n\n    > [!NOTE]\n    > ワークスペースの場所を変更する場合は、ワークスペースの再読み込み後に作成したプロジェクトVisual Studio Code。 既存のプロジェクトの場所に変更はありません。\n\n  <details>\n  <summary>アプリを作成する簡単なTeamsまとめです。</summary>\n  アプリを作成するためのこの短い要約Teamsしてください。\n\n  ![アプリをTeamsする](~/assets/videos/javascript-msg-ext-app.gif)\n  </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\n\nCLI を使用して新しいアプリを作成Teamsできます。 CLI によって、一連の質問が表示されます。 すべての質問には、回答に関する指示が含まれています。\n\nたとえば、矢印キーを使用してオプションを選択します。 選択した後、[Enter] を **選択して** 確認します。\n\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. [メッセージ **拡張機能] を選択し** 、[タブ] の **選択を解除します**。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. [ **Enter] を** 選択して、既定のワークスペース フォルダーを選択します。\n1. `HelloMsgExtn` のように、アプリに適した名前を入力します。  アプリの名前は、英数字のみで構成されている必要があります。\n\n  すべての質問に答えた後、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-messaging-extension-app-source-code\"></a>メッセージング拡張機能アプリのソース コードのツアーに参加する\n\nメッセージング拡張機能はボット フレームワークを使用します。 会話を介してサービスを操作するために使用します。 スキャフォールディングが完了したら、プロジェクトのディレクトリとファイルをエクスプローラー領域で表示Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/hw-folder-structure-mex.png\" alt-text=\"ボット プロジェクトのファイル レイアウト\" border=\"false\":::\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーがアプリ用にカスタマイズできるTeamsファイル。 |\n| `.fx/configs/config.<envName>.json` | すべての環境の構成ファイル。 |\n| `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| `.fx/configs/localSettings.json` | ローカル デバッグ用の構成ファイル。 |\n| `.fx/states` | ユーザーが生成する出力をプロビジョニングToolkit。  ツールキットは、アプリのリソースを準備した後にこのフォルダーを作成します。 |\n| `.fx/states/state.<envName>.json` | すべての環境に対して出力ファイルをプロビジョニングします。 |\n| `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密性の高いユーザー データ。 |\n| `bot` |  実行時に必要なボットのコード。 |\n| `bot/messageExtensionBot.js` | メッセージング拡張機能アプリの主要なエントリ ポイント。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイル、アプリ のアイコン、color.pngとoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | ローカル環境でアプリを実行するアプリ マニフェスト  |\n| `templates/appPackage/manifest.remote.template.json` | Azure サイトなどのリモート環境でアプリを実行するアプリ マニフェスト |\n| `templates/azure` | BICEP テンプレート ファイル |\n\n> [!Tip]\n> アプリをアプリに統合する前に、Teams外部のボットとメッセージング拡張機能についてTeams。\n"
- title: 最初のメッセージング拡張機能アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nプロジェクト ワークスペースをセットアップした後、Teams Toolkitビルドします。 アカウントにサインインするMicrosoft 365があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>アカウントにサインインMicrosoft 365する\n\nこのアカウントを使用して、アカウントにサインインTeams。 開発者プログラムのテナントMicrosoft 365している場合は、登録時に設定した管理者アカウントMicrosoft 365です。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vcode)\n\n1. Visual Studio Code を開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. [ **M365 にサインイン] を選択します**。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. アカウントにサインインMicrosoft 365します。\n1. プロンプトが表示されたらブラウザーを閉じて、ブラウザーに戻Visual Studio Code。\n1. データ内のTeams ToolkitにVisual Studio Code。\n\n    サイドバー **の [ACCOUNTS**] セクションには、アカウント名Microsoft 365表示されます。 サイドTeams Toolkitアカウント **でサイドローディング** が有効になっている場合、サイドローディングが有効Microsoft 365されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"アプリと Azure にサインインする場所を示Microsoft 365スクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドしてローカルで実行する準備ができました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用Microsoft 365サインインして、次のコマンドを実行します。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、ユーザーと TeamsFx CLI Visual Studio Code共有されます。\n\n    これで、開発環境が構成されたので、最初のアプリを作成、ビルド、およびTeamsできます。\n\n---\n\n## <a name=\"build-and-run-your-app-in-the-local-environment\"></a>ローカル環境でアプリをビルドして実行する\n\nメッセージング拡張機能を使用すると、Web サービスを操作できます。 メッセージング機能とボットの安全な通信を利用します。 メッセージング拡張機能アプリは、ボットとして登録された Web サービスに追加されます。 \n\n### <a name=\"build-and-run-your-app-locally\"></a>アプリをローカルでビルドして実行する\n\n1. デバッグ **モードで** アプリケーションをVisual Studio Codeするには、次のコマンドで [F5] を選択します。\n    <!-- markdownlint-disable MD033 -->\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    **F5 を選択すると**、次のTeams Toolkit。\n\n    1. アプリケーションをアプリケーションに登録Azure Active Directory。\n    1. アプリケーションを\"サイド ローディング\" に登録Teams。\n    1. Azure Function Core Tools を使用してローカルで実行されている [アプリケーション バックエンドを開始します](/azure/azure-functions/functions-run-local?#start)。\n    1. アプリと通信Teams ngrok トンネルを開始します。\n    1. アプリケーションMicrosoft Teams読み込むようTeamsコマンドを使用して開始します。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png\" alt-text=\"F5 キーを押してデバッグする場合のスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 このプロセスの完了には 3 ~ 5 分かかる場合があります。\n\n    Teamsブラウザーで開きます。\n    \n1. プロンプトが表示されたら、Microsoft 365アカウントでサインインします。\n1. [ **追加] を** 選択して、アプリをアカウントに追加します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png\" alt-text=\"スクリーンショットは、アプリを追加するメッセージを示しています\" border=\"false\":::\n\n    ツールキットにメッセージが表示され、アプリがアプリに追加Teams。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-added-local-debug.png\" alt-text=\"スクリーンショットには、アプリを今すぐ試すメッセージが表示されます。\" border=\"true\":::\n\n    - [Got **it] を選択した** 場合は、サイドロードされたアプリの一覧から後でアプリを試してみてください。\n    - [試す] **を選択した** 場合Teamsアプリが読み込まれます。\n\n1. [ **試す] を選択します**。\n\n    メッセージング拡張機能アプリは、チャット ボット アプリに読み込まれます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png\" alt-text=\"アプリがアプリのサイドロードを示すTeams\" border=\"false\":::\n\n    メッセージング拡張機能アプリは、ユーザーと Web サービス間の通信を有効にするためのボットに依存します。アプリはボットのチャット機能に読み込まれます。\n\n    - メッセージング拡張機能アプリを作成する前にボット アプリを作成した場合は、作成したのと同じボット アプリにボット アプリが読み込まれているのが確認できます。 以前のチャット メッセージが表示されます。\n    - メッセージング拡張機能を最初に作成した場合、アプリは、アプリで開いているすべてのチャットにTeams。\n\n### <a name=\"test-your-app\"></a>アプリのテスト\n\nアプリが初めて読み込まれると、メッセージング拡張機能アプリが開き、テストできます。 このサンプル アプリでは、ソフトウェア レジストリからオープン ソース npm パッケージを検索できます。\n\n#### <a name=\"to-run-a-search-query\"></a>検索クエリを実行するには\n\n1. 検索ボックスに「cli」などの検索文字列を入力します。 一致するアイテムの一覧が表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png\" alt-text=\"アプリを検索に使用する方法を示すスクリーンショット\" border=\"true\":::\n\n1. 検索結果から 1 つを選択します。 作成領域に表示され、結果をチャネルに送信できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png\" alt-text=\"検索結果を示すスクリーンショット\" border=\"false\":::\n\n1. [送信 **] 命令を** 選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png\" alt-text=\"チャットで送信された検索結果を示すスクリーンショット\" border=\"false\":::\n\n    これで、基本的なメッセージング拡張機能アプリをビルドして実行する方法について説明しました。         \n\n## <a name=\"optional-scenarios\"></a>オプションのシナリオ\n\n基本的なメッセージング拡張機能アプリの検索機能をテストしました。 これで、このアプリの他のいくつかの機能を試し直す方法について説明します。 これらは、このアプリのオプションのシナリオです。\n<br>\n<br>\n<details>\n<summary>カードを作成するには</summary>\n\n1. [カード **の作成] を選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png\" alt-text=\"カードの作成方法を示すスクリーンショット\" border=\"false\":::\n\n1. 図のようにカードの詳細を入力し、[送信] を **選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\" border=\"true\":::\n\n    カードの詳細が作成領域に表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png\" alt-text=\"カードの詳細を追加する方法を示すスクリーンショット\" border=\"true\":::\n\n1. 作成領域 **から [** 送信] アイコンを選択します。\n\n    アプリはボット チャットでカードを送信します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png\" alt-text=\"送信されたカードを示すスクリーンショット\" border=\"false\":::\n</details>\n<br>\n<details>\n<summary>作成領域からアプリを開く方法</summary>\n\nアプリを開く方法として、次のいずれかを選択します。\n\n**Using `@mention`:**\n\n1. アプリ `@your-app-name` のコマンド領域に入力します。\n    \n    アプリは検索ボックスを開き、クエリを実行するために使用できます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png\" alt-text=\"メッセージング拡張機能アプリを@mentionする方法を示すスクリーンショット\" border=\"false\":::\n\n1. 検索文字列を入力し、検索結果から 1 つを選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png\" alt-text=\"メッセージング拡張機能アプリを使用して検索を実行する方法を示すスクリーンショット\" border=\"false\":::\n\n    コマンド領域にカードとして表示されます。\n\n1. カードをコピーして、作成領域に貼り付けます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png\" alt-text=\"カード内の検索結果を示すスクリーンショット\" border=\"false\":::\n    \n1. 作成領域を使用してカードを送信します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png\" alt-text=\"チャット内の検索結果を示すスクリーンショット\" border=\"false\":::\n\n**3 ドット アイコンの使用:**\n\n1. 作成領域の下部にある 3 つのドットからメッセージング拡張機能を起動します。\n1. メッセージング拡張機能アプリを選択します。       \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png\" alt-text=\"サンプル メッセージング拡張機能アプリを開く方法を示すスクリーンショット\" border=\"false\":::\n\n    メッセージング拡張機能アプリは、検索を実行し、アダプティブ カードを作成するためのオプションを使用して読み込まれます。\n</details>\n<br>\n<details>\n<summary>サイドロードされたアプリからアプリを実行する</summary>\n\nサイドロードされたアプリのTeamsからサイドロードされたアプリを開きます。 \n\n1. サイドバーの **[ストア**] アイコンTeamsします。\n1. [アプリの **管理] を選択します**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png\" alt-text=\"サイドロードされたアプリを示すスクリーンショット\" border=\"false\":::\n\n1. アプリの 3 つのドット アイコンを選択し、[詳細の表示] **を選択します**。 アプリへのリンクをコピーし、アプリを使用してアプリを開く方法もできます。\n1. [ **開く]** を選択してアプリを読み込み、[試す] **を選択します**。 \n    \n    アプリの読み込みTeams。\n</details>\n<br>\n<br>\n<!-- markdownlint-disable MD033 -->\n<details>\n<summary>アプリがローカルで実行されていない場合のトラブルシューティング方法について説明します。</summary>\n\nアプリをアプリのサイドローディングTeams、アプリのサイドローディングをMicrosoft 365開発アカウントを持っている必要があります。 サイドローディングの詳細については、「前提条件」セクションを参照してください。\n</details>\n"
- title: 最初のアプリをTeamsする
  durationInMinutes: 1
  content: "\nタブ、ボット、メッセージング拡張機能機能を使用して、Teamsアプリを作成、ビルド、および実行する方法について説明しました。 最後の手順は、Azure にアプリを展開します。\n\nアプリを使用して、Azure に Tab 機能を持つ最初のアプリを展開Teams Toolkit。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nこのアカウントを使用して、Microsoft Azureポータルにアクセスし、アプリをサポートするために新しいクラウド リソースをプロビジョニングします。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. タブ アプリを作成したプロジェクト フォルダーを開きます。\n1. サイドバーのTeams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::アイコンを選択します。  \n1. [ **Azure にサインイン] を選択します**。\n\n    > [!TIP]\n    > Azure Account 拡張機能がインストールされ、同じアカウントを使用している場合は、この手順を省略できます。 他の拡張機能で使用しているアカウントと同じアカウントを使用します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. プロンプトが表示されたらブラウザーを閉じて、ブラウザーに戻Visual Studio Code。\n\n    サイドバー **の [ACCOUNTS** ] セクションには、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。 使用可能な Azure サブスクリプションが少なくとも 1 つ用意されている必要があります。 サインインしていない場合は、サインアウトして別のアカウントを使用します。\n\n    これで、アプリを Azure に展開する準備ができました。\n\n    おめでとうございます、3 種類のアプリをTeamsしました。 \n    次に、アプリ Teams Toolkitの 1 つを Azure に展開する方法について説明します。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用Microsoft 365サインインして、次のコマンドを実行します。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 プロンプトが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、ユーザーと TeamsFx CLI Visual Studio Code共有されます。\n\n    おめでとうございます、3 種類のアプリをTeamsしました。 \n    次に、アプリ Teams Toolkitの 1 つを Azure に展開する方法について説明します。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリを Azure に展開した場合に発生することを説明します</summary>\n\n  展開前は、このアプリケーションは以下のようにローカルで動作しています。\n\n  * バックエンドは、**Azure Functions Core Tools** を使用して実行します。\n  * アプリケーションの HTTP エンドポイントは、Microsoft Teams がアプリケーションを読み込む場所でローカルに実行されます。\n\n  展開は 2 段階のプロセスです。 アクティブな Azure サブスクリプションでリソースをプロビジョニングし、アプリケーションのバックエンド コードとフロントエンド コードを Azure に展開またはアップロードします。\n\n  * バックエンドが構成されている場合は、Azure App Service や Azure App Service などのさまざまな Azure サービスをAzure Storage。\n  * フロントエンド アプリケーションは、静的な Web ホスティング用に構成された Azure Storage アカウントに展開されます。\n\n  </details>\n"
- title: おめでとうございます!
  durationInMinutes: 1
  content: "\n完了しました!\n\nタブ アプリ、ボット アプリ、メッセージング拡張機能アプリの 3 つのアプリを作成しました。\n\n基本的なアプリを作成する方法を学んだので、より複雑なアプリの作成に進む必要があります。 まず、既存のアプリに機能を追加してみてください。\n\n既存のアプリに機能を追加するには、次の方法を実行します。\n\n1. サイドバー **の [開発]** セクション **から** [機能の追加] Teams Toolkitします。\n\n1. アプリに追加する機能を選択します。\n\n手順は以上です。 Teams Toolkit、新しい機能のスキャフォールディングをアプリのディレクトリ構造に追加します。 手順に従ってアプリをビルドして展開すると、アプリには複数の機能があります。 \n\nJavaScript を使用してアプリをビルドするためのチュートリアルを完了しました。"
