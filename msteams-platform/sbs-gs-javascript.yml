### YamlMime:Tutorial
title: JavaScript を使用して初めてのタブ アプリを構築する
metadata:
  title: JavaScript を使用した Hello World
  description: このラーニング モジュールでは、Teams Toolkitを使用して新しいプロジェクトを設定し、タブ アプリをビルドしてデプロイすることで、JavaScript を使用してHello World アプリをビルドする方法について説明します。
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 開始の概要に戻る
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 502e5398553f59c008ca99b18427f4a7e14a7852
  ms.sourcegitcommit: ca84b5fe5d3b97f377ce5cca41c48afa95496e28
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 06/17/2022
  ms.locfileid: "66143061"
items:
- durationInMinutes: 1
  content: "最初の Teams アプリを使用して Microsoft Teams アプリの開発を開始します。 Teamsを使用してタブ アプリを作成します。 \n\nアプリには、独自の UI と UX が付属する機能があります。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"このアプリを示すダイアグラムには、3 つの機能があります。\" border=\"false\":::\n\n> [!NOTE]\n> このチュートリアルでは、Javascript を使用してタブ アプリを作成します。\n\nこのチュートリアルでは、次の方法について学ぶことができます:\n\n- Teams Toolkit を使用して新しいプロジェクトを設定する方法。\n- タブ アプリをビルドする方法。\n- アプリの構造:\n    - React を使用した JavaScript によるタブ部分。\n    - Node.js を使用した残りの機能。\n- アプリをデプロイする方法。\n"
- title: 前提条件
  durationInMinutes: 1
  content: "\nアプリをビルドしてデプロイするために必要なツールの一覧を次に示します。\n\n| &nbsp; | インストール | 使用するには... |\n| --- | --- | --- |\n| **必須** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams ツールキット](#install-the-teams-toolkit) | アプリのプロジェクト スキャフォールディングを作成する Microsoft Visual Studio Code 拡張機能。 4.0.0 バージョンを使用します。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams を使用して、チャット、会議、通話用のアプリを通じて共同作業を行うすべてのユーザーと 1 か所で共同作業を行うことができます。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | バックエンド JavaScript ランタイム環境。 最新の v16 LTS リリースを使用します。|\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推奨) または [Google Chrome](https://www.google.com/chrome/) | 開発者ツールを備えたブラウザー。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript、または SharePoint Framework (SPFx) ビルド環境。 バージョン 1.55 以降を使用します。 |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) および [Azure CLI](/cli/azure/install-azure-cli) | 保存されたデータにアクセスしたり、Azure で Teams アプリ用のクラウドベースのバックエンドをデプロイしたりするための Azure ツール。 |\n| &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) または [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | オープン ソース React JavaScript ライブラリのブラウザー DevTools 拡張機能。 |\n| &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph エクスプローラー。Microsoft Graph データからクエリを実行できるブラウザー ベースのツール。 |\n| &nbsp; | [Teams の開発者ポータル](https://dev.teams.microsoft.com/) | Teams アプリを構成、管理、組織や Teams ストアなどに配布するための Web ベースのポータル。 |\n\n\n> [!TIP]\n> Microsoft Graph データを操作する場合は、Microsoft Graph エクスプローラーについて学び、ブックマークする必要があります。 このブラウザー ベースのツールを使用すると、アプリの外部で Microsoft Graph に対してクエリを実行できます。\n\n\n## <a name=\"prepare-development-environment\"></a>開発環境を準備する\n\n必要なツールをインストールしたら、開発環境を設定します。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Teams Toolkit をインストールする\n\nTeams Toolkit を使用すると、アプリのクラウド リソースのプロビジョニングとデプロイ、Teams ストアへの公開などを行うツールにより、開発プロセスを簡略化できます。 \n \n使用このツールキットは、Visual Studio Code または `TeamsFx` という CLI (コマンド ライン インターフェイス) で使用できます。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Visual Studio Code を開き、**[拡張機能]** ビュー (**Ctrl + Shift + X** / **⌘⇧-X** または **[表示] > [拡張機能]**) を選択します。\n1. 検索ボックスに、「**Teams Toolkit**」と入力します。\n1. Teams Toolkit の横にある **[インストール]** を選択します。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"図は、Teams Toolkit 拡張機能のインストールを示しています。\" border=\"false\":::\n\n インストール後に Teams Toolkit アイコンが、Visual Studio Code サイド バーに表示されます。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"図は、Visual Studio Code サイド バーの Teams Toolkit アイコンを示しています。\" border=\"false\":::\n\nTeams Toolkit は、[Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) にもあります。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\nTeamsFx CLI をインストールするには、`npm` パッケージ マネージャーを使用します。\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n構成によっては、CLI をインストールするために `sudo` を使用しなければならないこともあります。\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nLinux および macOS システムではこの条件はより一般的です。\n\nnpm グローバル キャッシュが PATH に追加されていることを確認します。 この手順は通常、Node.js インストーラーの一部として行われます。  \n\nCLI で `teamsfx` コマンドを指定して使用できます。 `teamsfx -h` を実行して、このコマンドが動作していることを確認します。\n\n> [!CAUTION]\n> PowerShell ターミナルで TeamsFx を実行する前に、PowerShell で \"remote signed\" 実行ポリシーを有効にする必要があります。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Teams 開発テナントを設定する\n\n**テナント** とは、チャット、ファイルの共有、会議の実行を行う Teams の組織のスペースまたはコンテナーのようなものです。 このスペースは、アプリをサイドロードしてテストする場所でもあります。 テナントを使って開発する準備ができているかどうかを確認しましょう。\n\n### <a name=\"check-for-sideloading-option\"></a>サイドローディング オプションを確認する\n\nアプリを作成したら、アプリを配布せずに Teams に読み込む必要があります。 このプロセスはサイドローディングと呼ばれます。 このオプションを表示するには、Microsoft 365 アカウントにサインインします。\n\n > [!NOTE]\n > サイドローディングは、Teams のローカル環境でアプリをプレビューおよびテストするために必要です。 有効になっていない場合は、Teams でアプリをローカルでプレビューしてテストすることはできません。\n\n既にテナントがあり、管理者アクセス権がありますか? 実際にそうかどうかを確認しましょう。\n\nTeams でアプリをサイドロードできるかどうかを確認します。\n\n 1. Teams クライアントで、**[ストア]** アイコンを選択します。\n 1. **[アプリの管理]** を選択します。\n 1. [**アプリ の発行**] を選択します。\n 1. **[カスタム アプリのアップロード]** オプションを探します。 オプションが表示された場合は、アプリのサイドローディングが有効です。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"図は、Teams でカスタム アプリをアップロードするオプションを示しています。\":::\n\n     > [!NOTE]\n     > カスタム アプリをアップロードするオプションが表示されない場合は、Teams 管理者にお問い合わください。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>無料の Teams 開発者テナントを作成する (省略可能)\n\nTeams 開発者アカウントをお持ちでない場合は、無料で取得できます。 Microsoft 365 開発者プログラムに参加します。\n\n1. [Microsoft 365 開発者プログラム](https://developer.microsoft.com/microsoft-365/dev-program)に移動します。\n1. **[今すぐ参加]** を選択し、画面の指示に従います。\n1. ようこそ画面で、**[E5 サブスクリプションの設定]** を選択します。\n1. 管理者アカウントを設定します。 完了すると、次の画面が表示されます。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\" border=\"true\":::\n\n1. 設定した管理者アカウントを使用して Teams にサインインします。 Teams に **[カスタム アプリのアップロード]** オプションがあることを確認します。\n\n## <a name=\"get-a-free-azure-account\"></a>無料の Azure アカウントを取得します。\n\nアプリをホストする場合、または Azure でリソースにアクセスする場合は、Azure サブスクリプションが必要です。開始する前に、[無料アカウントを作成](https://azure.microsoft.com/free/) してください。\n\nこれで、すべてのツールを入手し、アカウントを設定しました。 次に、開発環境を設定し、ビルドを開始しましょう。 最初に実行するアプリを選択します。\n"
- title: タブ アプリ用のプロジェクト ワークスペースを作成する
  durationInMinutes: 1
  content: "\n最初のアプリを作成して、Microsoft Teams アプリ開発を開始します。 このアプリは、タブ機能を使用します。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png\" alt-text=\"このアプリには 3 つの機能があることを示す図。タブが強調表示されています。\" border=\"false\":::\n\nこのページでは、次のことについて説明します。\n1. [Teams Toolkit を使用して新しいタブ プロジェクトを設定する方法](#create-your-tab-project-workspace)\n1. [アプリのディレクトリ構造について](#take-a-tour-of-the-tab-app-source-code)\n\n## <a name=\"create-your-tab-project-workspace\"></a>タブ プロジェクト ワークスペースを作成する\n\n前提条件が整っている場合、始めましょう。\n\n> [!NOTE]\n> 表示される Visual Studio Code UI は Mac のものです。 オペレーティング システム、Teams Toolkit バージョン、環境によって異なる場合があります。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Visual Studio Code を開きます。\n1. Visual Studio Code のサイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams ツールキットのサイド バーにある [新しいプロジェクトの作成] リンクの位置\" border=\"false\":::。\n\n1. **[新しい Teams アプリを作成]** を選択して、Teams Toolkit を使用してアプリを作成します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"新しいプロジェクトを作成するためのウィザードが開始されます\" border=\"false\":::\n\n1. アプリでビルドする機能として **[タブ]** が選択されていることを確認します。 **[OK]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-capabilities-tabapp.png\" alt-text=\"アプリ機能の選択\" border=\"false\":::\n\n1. プログラミング言語として **[JavaScript]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-language-tab.png\" alt-text=\"プログラミング言語を選択する方法のスクリーンショット\" border=\"false\":::\n\n1. 必要なフォルダーを選択して **、ワークスペース** フォルダーを選択します。  \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-folder.png\" alt-text=\"select-folder\" border=\"false\":::\n\n1. アプリケーション名として `helloworld` と入力します。 英数字のみを使用してください。 **Enter** キーを押します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/enter-name-tab.png\" alt-text=\"アプリ名を入力する場所を示すスクリーンショット。\" border=\"false\":::\n\n    数秒で Teams タブ アプリが作成されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tap-app-created1.png\" alt-text=\"作成されたアプリを示すスクリーンショット。\" border=\"false\":::\n\n    アプリが作成されると、Teams Toolkit次のメッセージが表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/preview-project.png\" alt-text=\"プレビュー Project。\" border=\"false\":::\n    \n    **[ローカル デバッグ**] を選択して、プロジェクトをプレビューできます。 \n    \n    <details>\n    <summary>Teams アプリの作成に関する簡単なまとめ。</summary>\n    Teams アプリの作成に関する簡単なまとめをご覧ください。\n\n    ![Teams アプリを作成する](~/assets/videos/javascript-tab-app1.gif) </details>\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cli)\n\n`teamsfx` CLI を使用して、最初のプロジェクトを作成します。 プロジェクト フォルダーを作成するフォルダーから開始します。\n\n``` bash\nteamsfx new\n```\nCLI を使用して、新しい Teams アプリを作成できます。 CLI では、一連の質問によって作業を進めます。 すべての質問には、それに対する回答に関する指示が含まれています。\n\nたとえば、方向キーを使用してオプションを選択します。 選択した後、**Enter** キーを押して確定します。\n\n1. **[新しい Teams アプリを作成]** を選択します。\n1. **[タブ]** 機能を選択します。\n1. **Azure** フロントエンド ホスティングを選択します。\n1. クラウド リソースは選択しないでください。\n1. プログラミング言語として **[JavaScript]** を選択します。\n1. **Enter** キーを押して、既定のワークスペース フォルダーを選択します。\n1. アプリの名前として `helloworld` と入力します。 アプリの名前には、英数字のみを含めることができます。\n\n  すべての質問に回答すると、プロジェクトが作成されます。\n\n---\n\n## <a name=\"take-a-tour-of-the-tab-app-source-code\"></a>タブ アプリのソース コードのツアーを開始する\n\nTeams Toolkit には、アプリをビルドするためのすべてのコンポーネントが備わっています。 プロジェクトを作成した後、プロジェクトのフォルダーとファイルを、Visual Studio Code の **エクスプローラー** 領域で確認できます。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/hw-folder-structure-tab12.png\" alt-text=\"構造タグ\" border=\"true\":::\n\n\n任意の UI フレームワークを自由に選択できますが (またはまったく使用しないように選択することもできますが)、このサンプル テンプレート コードでは、React コンポーネントを使用したスキャフォールディングが提供されます。\n\nToolkit では、このディレクトリ構造内の項目のうち、次の項目を保持します。\n\n| フォルダー名 | コンテンツ |\n| --- | --- |\n| `.fx/configs` | ユーザーが Teams アプリ用にカスタマイズできる構成ファイル。 |\n| - `.fx/configs/config.<envName>.json` | 環境すべての構成ファイル。 |\n| - `.fx/configs/azure.parameters.<envName>.json` | すべての環境に対する Azure BICEP プロビジョニングのパラメーター ファイル。 |\n| - `.fx/configs/projectSettings.json` | すべての環境に適用されるグローバル プロジェクト設定。 |\n| - `.fx/states` | Teams Toolkit によって生成されるプロビジョニング出力。  アプリのリソースをプロビジョニングした後にこのフォルダーが Toolkit によって作成されます。 |\n| - `.fx/states/state.<envName>.json` | すべての環境のプロビジョニング出力ファイル。 |\n| - `.fx/states/<env>.userdata` | すべての環境のプロビジョニング出力の機密ユーザー データ。 |\n| `tabs` | プライバシーに関する通知、使用条件、構成タブなど、実行時に必要なタブ機能のためのコード。 |\n| - `tabs/src/index.jsx` | メインのアプリ コンポーネントが `ReactDOM.render()` によってレンダリングされる、フロントエンド アプリのエントリ ポイント |\n| - `tabs/src/components/App.jsx` | アプリで URL ルーティングを処理するためのコード。 [Microsoft Teams JavaScript client SDK](../msteams-platform/tabs/how-to/using-teams-client-sdk.md) を呼び出して、アプリと Teams の間の通信を確立します。 |\n| - `tabs/src/components/Tab.jsx` | アプリの UI を実装するコード。 |\n| - `tabs/src/components/TabConfig.jsx` | アプリを構成する UI を実装するコード。 |\n| `templates/appPackage` | アプリ マニフェスト テンプレート ファイルとアプリ アイコン: color.png および outline.png。 |\n| - `templates/appPackage/manifest.template.json` | ローカルまたはリモートの環境でアプリを実行するためのアプリ マニフェスト。  |\n| `templates/azure` | BICEP テンプレート ファイル |\n\nクラウド機能を追加すると、Teams Toolkit によって、必要なフォルダーがプロジェクトに追加されます。 `api` フォルダーに、ユーザーが書き込んだ Azure Functions のコードが格納されます。\n"
- title: 最初のタブ アプリをビルドして実行する
  durationInMinutes: 1
  content: "\nTeams Toolkit を使用してプロジェクト ワークスペースを設定したら、次にタブ プロジェクトをビルドします。 Microsoft 365 アカウントにサインインする必要があります。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Microsoft 365 アカウントにサインインする\n\nMicrosoft 365 アカウントを使用して Teams にサインインします。 Microsoft 365 開発者プログラム テナントを使用している場合は、Microsoft 365 アカウントは、登録中に設定した管理者アカウントです。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. **[M365 にサインイン (Sign in to M365)]** を選択します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n\n1. 資格情報を使用して Microsoft 365 アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n1. Visual Studio Code 内の Teams Toolkit に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、Microsoft 365 アカウント名が表示されます。 Microsoft 365 アカウントでサイドローディングが有効になっている場合、Teams Toolkit に **[サイドローディングが有効]** と表示されます。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Microsoft 365と Azure にサインインする場所を示すスクリーンショット。\" border=\"false\":::\n\n    これで、アプリをビルドし、ローカル環境で実行する準備が整いました。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用して Microsoft 365 にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Code と TeamsFx CLI で共有されます。\n\n    開発環境が構成されたので、最初の Teams アプリを作成、ビルド、デプロイできます。\n\n---\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio-code\"></a>Visual Studio Code でアプリをローカルにビルドして実行する\n\nアプリをローカルに構築して実行するには、以下のようにします。\n\n1. Visual Studio Code で、**F5** を選択して、アプリケーションをデバッグ モードで実行します。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>デバッガーでアプリをローカルに実行した場合に発生することを説明します。</summary>\n\n    気にかかる点がある場合、**F5** キーを押すと、Teams Toolkit によって以下が行われます。\n\n    1. 次の前提条件を確認します。\n      * Microsoft 365 アカウントでログインしています。\n      * Microsoft 365 アカウントに関してサイドローディングが有効になっています。\n      * サポートされている Node.js バージョンがインストールされています。\n      * タブ アプリの NPM パッケージがインストールされています。\n      * localhost の開発証明書がインストールされています。           \n      * タブ アプリでポートが使用できます。\n\n      > [!NOTE]\n      > Teams Toolkit によって特定の前提条件が確認できない場合は、確認を求めるメッセージが表示されます。\n\n    2. アプリを Azure AD に登録し、アプリを構成します。\n    3. Teams 開発者ポータルにアプリを登録し、アプリを構成します。\n    4. タブ アプリを起動します。\n    5. Web ブラウザーで Teams を開始し、タブ アプリをサイドロードします。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/f5-build-and-run.png\" alt-text=\"F5 キーが押されたときのスクリーンショット。\":::\n\n    > [!NOTE]\n    > アプリを初めて実行すると、すべての依存関係がダウンロードされ、アプリがビルドされます。 ビルドが完了すると、ブラウザー ウィンドウが開きます。 この処理には 3 ～ 5 分かかります。\n\n    必要に応じて、Toolkit によってローカル証明書のインストールを求めるメッセージが表示されます。 この証明書により、Teams は `https://localhost` からアプリケーションを読み込むことができます。\n\n1. 以下のダイアログが表示されたら、**[はい]** を選択します:\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/hw-warning.png\" alt-text=\"microsoft\" border=\"true\":::\n\n    または、オペレーティング システムによっては、**[続行]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/ssl-prompt-mac.png\" alt-text=\"Teams がアプリケーションを localhost からロードできるようにするための SSL 証明書のインストールを求めるメッセージを示す、Mac 上のスクリーンショット。\":::\n\n    Teams Web クライアントがブラウザー ウィンドウで開きます。\n\n1. メッセージが表示されたら、Microsoft 365 アカウントを使用してサインインします。\n\n1. ローカル マシン上の Teams にアプリをサイドロードするように求められたら、**[追加]** を選択します。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/add-tab-app-local-debug.png\" alt-text=\"アプリを Teams に追加する\":::\n\n1. おめでとうございます。最初のアプリが Teams で実行されています。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-localdebug.png\" alt-text=\"完了したアプリのスクリーンショット\":::\n\n   SSO 機能を追加して、ユーザーの詳細を取得できます。 他の Web アプリケーションと同様に、プレークポイントの設定など通常のデバッグ作業を行うことができます。 このアプリはホット リロードをサポートしています。 プロジェクト内のファイルを変更すると、ページが再読み込みされます。\n\n  <!-- markdownlint-disable MD033 -->\n\n  <details>\n  <summary>アプリがローカルで実行されない場合のトラブルシューティング方法について説明します。</summary>\n\n  Teams でアプリを正常に実行するには、Teams アカウントでサイドローディングが有効になっていることを確認します。 「前提条件」セクションで、サイドローディングの詳細について確認できます。\n\n  </details>\n\n \n"
- title: 最初の Teams アプリをデプロイする
  durationInMinutes: 1
  content: "\nTab アプリを使用してアプリを作成、ビルド、実行Teams学習しました。 最後の手順は、アプリを Azure に展開することです。\n\nTeams Toolkit を使用して、タブ機能を備えた最初のアプリを Azure にデプロイしましょう。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Azure アカウントにサインインする\n\nこのアカウントを使用して、Microsoft Azure potral にアクセスし、アプリをサポートする新しいクラウド リソースをプロビジョニングします。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Visual Studio Code を開きます。\n1. タブ アプリを作成したプロジェクト フォルダーを開きます。\n1. サイド バーで Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: アイコンを選択します。\n1. **[Azure にサインイン]** を選択します。\n\n    > [!TIP]\n    > Azure アカウント拡張機能がインストールされ、同じアカウントを使用している場合は、この手順をスキップできます。 他の拡張機能で使用しているのと同じアカウントを使用します。\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。\n1. 資格情報を使用して Azure アカウントにサインインします。\n1. メッセージが表示されたらブラウザーを閉じて、Visual Studio Code に戻ります。\n\n    サイドバーの **[アカウント]** セクションに、2 つのアカウントが個別に表示されます。 また、使用可能な Azure サブスクリプションの数も一覧表示されます。 使用可能な Azure サブスクリプションが少なくとも 1 つあることを確認します。 ない場合は、サインアウトして別のアカウントを使用します。\n\n    これで、アプリを Azure にデプロイする準備が整いました。\n\n    おめでとうございます。Teams アプリを作成しました。 \n    次に、Teams Toolkit を使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n# <a name=\"command-line\"></a>[コマンド ライン](#tab/cline)\n\n1. TeamsFx CLI を使用して Microsoft 365 にサインインします。\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n2. TeamsFx CLI を使用して Azure にサインインします。\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    既定の Web ブラウザーが開き、アカウントにサインインできます。 資格情報を使用して Azure アカウントにサインインします。 メッセージが表示されたら、ブラウザーを閉じます。\n\n    アカウント ログインは、Visual Studio Code と TeamsFx CLI で共有されます。\n\n    おめでとうございます。Teams アプリを作成しました。 \n    次に、Teams Toolkit を使用していずれかのアプリを Azure にデプロイする方法について説明します。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions-tab.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>アプリを Azure に展開した場合に発生することを説明します</summary>\n\n  展開前は、このアプリケーションは以下のようにローカルで動作しています。\n\n  * バックエンドは、**Azure Functions Core Tools** を使用して実行します。\n  * アプリケーションの HTTP エンドポイントは、Microsoft Teams がアプリケーションを読み込む場所でローカルに実行されます。\n\n  デプロイは、2 つの手順で構成されるプロセスです。 アクティブな Azure サブスクリプションにリソースをプロビジョニングし、その後アプリケーションのバックエンド コードとフロントエンド コードを Azure にデプロイまたはアップロードします。\n\n  * バックエンドが構成済みの場合、Azure App Service や Azure Storage など、さまざまな Azure のサービスが使用されています。\n  * フロントエンド アプリケーションは、静的な Web ホスティング用に構成された Azure Storage アカウントに展開されます。\n\n  </details>\n"
- title: おめでとうございます!
  durationInMinutes: 1
  content: "\nこれで完了です。\n\nタブ アプリを作成しました。\n\n基本的なアプリの作成を学習したので、より複雑なアプリの作成に進むことができます。 まず、既存のアプリに機能を追加してみてください。\n\n既存のアプリに機能を追加するには:\n\n1. Teams Toolkitサイドバーの **[開発**] セクションで [**機能の追加]** を選択します。\n\n1. アプリに追加する機能を選択します。\n\n手順は以上です。 Teams Toolkit によって、アプリのディレクトリ構造に新しい機能のスキャフォールディングが追加されます。 手順に従ってアプリをビルドしてデプロイします。アプリには複数の機能を含めます。 \n\nJavaScript を使用してタブ アプリをビルドするためのチュートリアルを完了しました。"
